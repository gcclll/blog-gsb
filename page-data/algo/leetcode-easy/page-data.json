{"componentChunkName":"component---src-templates-blog-post-js","path":"/algo/leetcode-easy/","result":{"data":{"site":{"siteMetadata":{"title":"若叶知秋"}},"markdownRemark":{"id":"139764a0-36c7-5428-b49e-e90c27d809a5","excerpt":"基于leetcode的算法学习记录文章，使用语言主要是 JavaScript，可能会有少于C/Python实现，在没标明的情况下默认都是 JavaScript 实现。 约定： 有每日 角标的标识是每日一题的题目 有官方角标的标识是该方案是官方题解 数组分类 01. 数组中重复的数字 方案一： reduce…","html":"<blockquote>\n<p>基于leetcode的算法学习记录文章，使用语言主要是 JavaScript，可能会有少于C/Python实现，在没标明的情况下默认都是 JavaScript 实现。</p>\n<p>约定：</p>\n<ol>\n<li>有<sup><font color=\"red\" size=\"2\">每日</font></sup> 角标的标识是每日一题的题目</li>\n<li>有<sup><font color=\"red\" size=\"2\">官方</font></sup>角标的标识是该方案是官方题解</li>\n</ol>\n</blockquote>\n<h1 id=\"数组分类\" style=\"position:relative;\"><a href=\"#%E6%95%B0%E7%BB%84%E5%88%86%E7%B1%BB\" aria-label=\"数组分类 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>数组分类</h1>\n<h2 id=\"01-数组中重复的数字\" style=\"position:relative;\"><a href=\"#01-%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97\" aria-label=\"01 数组中重复的数字 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/\">01. 数组中重复的数字</a></h2>\n<h3 id=\"方案一：-reduce--objectkeys--map--filter\" style=\"position:relative;\"><a href=\"#%E6%96%B9%E6%A1%88%E4%B8%80%EF%BC%9A-reduce--objectkeys--map--filter\" aria-label=\"方案一： reduce  objectkeys  map  filter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>方案一： reduce + Object.keys + map + filter</h3>\n<p>下面这种方案适合于将所有重复的数字都找出来的案例，如果只需要找到第一个，该方案有多余的处理步骤，不建议使用。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @param {number[]} nums\n * @return {number}\n */</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">findRepeatNumber</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">nums</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token comment\">// 通过 reduce 得到 { val: times } 结果</span>\n  <span class=\"token comment\">// 如果重复出现过 times > 0 否则 times === 0</span>\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> num</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> k <span class=\"token operator\">=</span> num <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token keyword\">let</span> v <span class=\"token operator\">=</span> acc<span class=\"token punctuation\">[</span>num <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      acc<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>v\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      acc<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> acc\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 然后通过 keys, map 整理结果 times > 0 的值</span>\n  <span class=\"token comment\">// 最后 filter 过滤掉 0 值得到的数组就是源数组中重复的数集合</span>\n  <span class=\"token keyword\">const</span> found <span class=\"token operator\">=</span> <span class=\"token operator\">+</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">k</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> k <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>Boolean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">return</span> found <span class=\"token operator\">!==</span> found <span class=\"token operator\">?</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">:</span> found\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//console.log(findRepeatNumber([2, 3, 1, 0, 2, 5, 3]))</span></code></pre></div>\n<p><strong>执行结果：</strong></p>\n<p><font color=\"red\">执行用时：152 ms, 在所有 JavaScript 提交中击败了24.41%的用户</font></p>\n<p>内存消耗：51.9 MB, 在所有 JavaScript 提交中击败了100.00%的用户</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">提交时间</th>\n<th align=\"left\">提交结果</th>\n<th align=\"left\">运行时间</th>\n<th align=\"left\">内存消耗</th>\n<th align=\"left\">语言</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">几秒前</td>\n<td align=\"left\">通过</td>\n<td align=\"left\">152 ms</td>\n<td align=\"left\">51.9 MB</td>\n<td align=\"left\">Javascript</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"span-idarray-01-plan-2span方案二-for\" style=\"position:relative;\"><a href=\"#span-idarray-01-plan-2span%E6%96%B9%E6%A1%88%E4%BA%8C-for\" aria-label=\"span idarray 01 plan 2span方案二 for permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><span id=\"array-01-plan-2\"></span>方案二: for</h3>\n<p>使用 for 语法，明显会比使用 reduce 快，因为它只要遇到重复的立即退出函数，而 reduce 版本无论什么时候都需要将数组所有元素遍历完，方案一更适合于查找</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">findRepeatNumber</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">nums</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> k <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n      v <span class=\"token operator\">=</span> res<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> k\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      res<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>提交结果：</p>\n<p>执行用时：88 ms, 在所有 JavaScript 提交中击败了57.41%的用户</p>\n<p>内存消耗：43.1 MB, 在所有 JavaScript 提交中击败了100.00%的用户</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">提交时间</th>\n<th align=\"left\">提交结果</th>\n<th align=\"left\">运行时间</th>\n<th align=\"left\">内存消耗</th>\n<th align=\"left\">语言</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">几秒前</td>\n<td align=\"left\">通过</td>\n<td align=\"left\"><font color=\"red\">88 ms</font></td>\n<td align=\"left\">43.1 MB</td>\n<td align=\"left\">Javascript</td>\n</tr>\n<tr>\n<td align=\"left\">3 分钟前</td>\n<td align=\"left\">通过</td>\n<td align=\"left\">104 ms</td>\n<td align=\"left\">43 MB</td>\n<td align=\"left\">Javascript</td>\n</tr>\n<tr>\n<td align=\"left\">1 天前</td>\n<td align=\"left\">通过</td>\n<td align=\"left\">152 ms</td>\n<td align=\"left\">51.9 MB</td>\n<td align=\"left\">Javascript</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"方案三-递归\" style=\"position:relative;\"><a href=\"#%E6%96%B9%E6%A1%88%E4%B8%89-%E9%80%92%E5%BD%92\" aria-label=\"方案三 递归 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>方案三: 递归</h3>\n<p><strong>这个方法也可以通过，但效率上面感觉并没什么优势，并且这个方法找出的并不是第一个重复的元素。</strong></p>\n<p>对比<a href=\"#array-01-plan-2\">方案二</a>：</p>\n<ol>\n<li>重复元素在中心点两边，同样需要遍历相同的次数才能找到这个重复元素(因为左边的递归必须先完成)</li>\n<li>重复元素在左边，左边递归次数和方案二循环次数是一样的</li>\n<li>重复元素在右边，左边必须递归完，右边的也必须递归直到两个重复元素出现(同方案一一样)</li>\n</ol>\n<p>能否针对上面的情况进行优化(<font color=\"blur\">考虑中心点两边同时进行比较，而不是等一边完成再处理另一边，那貌似就不适用递归了</font>)???</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">findRepeatNumber</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">_</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nums<span class=\"token punctuation\">,</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token comment\">// 过滤掉非数组的情况</span>\n\n  <span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\n    mid <span class=\"token operator\">=</span> <span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> v <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> val <span class=\"token operator\">=</span> res<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">!==</span> <span class=\"token keyword\">void</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 这里应该可以再优化下，空数组不应该会到这里</span>\n    res<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> val <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token comment\">// console.log(v, \"-------\", res)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> v <span class=\"token comment\">// 这里的返回值会被下面递归是的 x 变量接受</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mid <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">// 这里优化空数组情况，不应该继续往下分解了</span>\n    x <span class=\"token operator\">=</span> <span class=\"token function\">_</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> x\n    x <span class=\"token operator\">=</span> <span class=\"token function\">_</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> x\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>执行用时：112 ms, 在所有 JavaScript 提交中击败了28.43%的用户</p>\n<p>内存消耗：49.8 MB, 在所有 JavaScript 提交中击败了100.00%的用户</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">提交时间</th>\n<th align=\"left\">提交结果</th>\n<th align=\"left\">运行时间</th>\n<th align=\"left\">内存消耗</th>\n<th align=\"left\">语言</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">几秒前</td>\n<td align=\"left\">通过</td>\n<td align=\"left\">112 ms</td>\n<td align=\"left\">49.8 MB</td>\n<td align=\"left\">Javascript</td>\n</tr>\n<tr>\n<td align=\"left\">3 天前</td>\n<td align=\"left\">通过</td>\n<td align=\"left\">92 ms</td>\n<td align=\"left\">45.5 MB</td>\n<td align=\"left\">Javascript</td>\n</tr>\n<tr>\n<td align=\"left\">3 天前</td>\n<td align=\"left\">通过</td>\n<td align=\"left\">104 ms</td>\n<td align=\"left\">45.1 MB</td>\n<td align=\"left\">Javascript</td>\n</tr>\n<tr>\n<td align=\"left\">4 天前</td>\n<td align=\"left\">通过</td>\n<td align=\"left\">88 ms</td>\n<td align=\"left\">43.1 MB</td>\n<td align=\"left\">Javascript</td>\n</tr>\n<tr>\n<td align=\"left\">4 天前</td>\n<td align=\"left\">通过</td>\n<td align=\"left\">104 ms</td>\n<td align=\"left\">43 MB</td>\n<td align=\"left\">Javascript</td>\n</tr>\n<tr>\n<td align=\"left\">6 天前</td>\n<td align=\"left\">通过</td>\n<td align=\"left\">152 ms</td>\n<td align=\"left\">51.9 MB</td>\n<td align=\"left\">Javascript</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"方案四：二分-for\" style=\"position:relative;\"><a href=\"#%E6%96%B9%E6%A1%88%E5%9B%9B%EF%BC%9A%E4%BA%8C%E5%88%86-for\" aria-label=\"方案四：二分 for permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>方案四：二分 for</h3>\n<p>这个方案好处就是当两个数分布在中心点的两边的时候。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">findRepeatNumber</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">_</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nums</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n\n  <span class=\"token keyword\">const</span> len <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">const</span> mid <span class=\"token operator\">=</span> <span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> mid <span class=\"token operator\">||</span> j <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> v1 <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v1 <span class=\"token operator\">!==</span> <span class=\"token keyword\">void</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      res<span class=\"token punctuation\">[</span>v1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> res<span class=\"token punctuation\">[</span>v1<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">void</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> res<span class=\"token punctuation\">[</span>v1<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">[</span>v1<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> v1\n\n    <span class=\"token keyword\">const</span> v2 <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v2 <span class=\"token operator\">!==</span> <span class=\"token keyword\">void</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      res<span class=\"token punctuation\">[</span>v2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> res<span class=\"token punctuation\">[</span>v2<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">void</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> res<span class=\"token punctuation\">[</span>v2<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">[</span>v2<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> v2\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>结果好像并没啥优势，😅!!!</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">提交时间</th>\n<th align=\"left\">提交结果</th>\n<th align=\"left\">运行时间</th>\n<th align=\"left\">内存消耗</th>\n<th align=\"left\">语言</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">几秒前</td>\n<td align=\"left\">通过</td>\n<td align=\"left\">104 ms</td>\n<td align=\"left\">45.4 MB</td>\n<td align=\"left\">Javascript</td>\n</tr>\n<tr>\n<td align=\"left\">1 分钟前</td>\n<td align=\"left\">通过</td>\n<td align=\"left\">108 ms</td>\n<td align=\"left\">45.6 MB</td>\n<td align=\"left\">Javascript</td>\n</tr>\n<tr>\n<td align=\"left\">1 分钟前</td>\n<td align=\"left\">通过</td>\n<td align=\"left\">116 ms</td>\n<td align=\"left\">45.6 MB</td>\n<td align=\"left\">Javascript</td>\n</tr>\n<tr>\n<td align=\"left\">1 分钟前</td>\n<td align=\"left\">通过</td>\n<td align=\"left\">88 ms</td>\n<td align=\"left\">45.7 MB</td>\n<td align=\"left\">Javascript</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"其他方案leetcoders\" style=\"position:relative;\"><a href=\"#%E5%85%B6%E4%BB%96%E6%96%B9%E6%A1%88leetcoders\" aria-label=\"其他方案leetcoders permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>其他方案(leetcoders)</h3>\n<p>其他 leetcode 上的方案，觉得有趣挺好的方案列表：</p>\n<ol>\n<li>\n<p>set.has 通过集合特性检测是否存在</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">findRepeatNumber</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">_</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nums</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">const</span> val <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n     <span class=\"token comment\">// 这里还可以改造下，通过检测长度变化来做为退出条件</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> val\n     <span class=\"token keyword\">else</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<h2 id=\"span-idarray-02span02-两数之和-ii---输入有序数组\" style=\"position:relative;\"><a href=\"#span-idarray-02span02-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C-ii---%E8%BE%93%E5%85%A5%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84\" aria-label=\"span idarray 02span02 两数之和 ii   输入有序数组 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><span id=\"array-02\"></span>02. <a href=\"https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/\">两数之和 II - 输入有序数组</a></h2>\n<h3 id=\"span-idarray-02-plan-1span方案一：两个for，onsup2sup\" style=\"position:relative;\"><a href=\"#span-idarray-02-plan-1span%E6%96%B9%E6%A1%88%E4%B8%80%EF%BC%9A%E4%B8%A4%E4%B8%AAfor%EF%BC%8Consup2sup\" aria-label=\"span idarray 02 plan 1span方案一：两个for，onsup2sup permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><span id=\"array-02-plan-1\"></span>方案一：两个for，O(n<sup>2</sup>)</h3>\n<p>这种方法最简单暴力，但是时间复杂度为 <em>O(n<sup>2</sup>)</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 最基本的遍历 O(n^2)</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">twoSum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">numbers<span class=\"token punctuation\">,</span> target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span>length\n     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n             <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> numbers<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                 <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n             <span class=\"token punctuation\">}</span>\n         <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>执行用时：444 ms, 在所有 JavaScript 提交中击败了5.30%的用户</p>\n<p>内存消耗：38 MB, 在所有 JavaScript 提交中击败了10.00%的用户</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">提交时间</th>\n<th align=\"left\">提交结果</th>\n<th align=\"left\">运行时间</th>\n<th align=\"left\">内存消耗</th>\n<th align=\"left\">语言</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">几秒前</td>\n<td align=\"left\">通过</td>\n<td align=\"left\">444 ms</td>\n<td align=\"left\">38 MB</td>\n<td align=\"left\">Javascript</td>\n</tr>\n</tbody>\n</table>\n<p>该方案基础上可以做点优化，排除非法值。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 把上面的实现，领出来作为一个函数</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">base</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">numbers<span class=\"token punctuation\">,</span> target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span>length\n     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n             <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> numbers<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                 <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n             <span class=\"token punctuation\">}</span>\n         <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span>\n\n     <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 这里加一层过滤。</span>\n<span class=\"token comment\">// 过滤不合法的值，因为Numbers 是已排序的数组，所以 numbers[0] 肯定是最小的</span>\n<span class=\"token comment\">// 通过和这个数相加如果大于 target 那肯定是不满足条件的元素，可以直接排除</span>\n<span class=\"token comment\">// 时间复杂度依旧是 O(n^2)</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">twoSum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">numbers<span class=\"token punctuation\">,</span> target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span>length\n    <span class=\"token comment\">// 过滤掉不合法的值，比如：> target</span>\n    <span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> min <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> min <span class=\"token operator\">></span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            n <span class=\"token operator\">=</span> i\n            <span class=\"token keyword\">break</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        numbers <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">base</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span></code></pre></div>\n<p>这种优化只针对后面又大量的比 target 大的值的元素情况，否则几乎没任何改善。</p>\n<p>执行用时：200 ms, 在所有 JavaScript 提交中击败了23.08%的用户</p>\n<p>内存消耗：37.9 MB, 在所有 JavaScript 提交中击败了10.00%的用户</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">提交时间</th>\n<th align=\"left\">提交结果</th>\n<th align=\"left\">运行时间</th>\n<th align=\"left\">内存消耗</th>\n<th align=\"left\">语言</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">几秒前</td>\n<td align=\"left\">通过</td>\n<td align=\"left\">200 ms</td>\n<td align=\"left\">37.9 MB</td>\n<td align=\"left\">Javascript</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"span-idarray-02-plan-2span方案二-排除--二分onsup2sup-o1\" style=\"position:relative;\"><a href=\"#span-idarray-02-plan-2span%E6%96%B9%E6%A1%88%E4%BA%8C-%E6%8E%92%E9%99%A4--%E4%BA%8C%E5%88%86onsup2sup-o1\" aria-label=\"span idarray 02 plan 2span方案二 排除  二分onsup2sup o1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><span id=\"array-02-plan-2\"></span>方案二: 排除 + 二分(<em>O(n<sup>2</sup>), O(1)</em>)</h3>\n<blockquote>\n<p>优化后的代码，依旧需要找出 midIdx，经过两次循环，时间复杂度为 O(n<sup>2</sup>)，过程中不需要开辟新的数组，完全是在索引上进行操作的，因此空间复杂度是 O(1)</p>\n</blockquote>\n<p>这个方案是基于<a href=\"#array-02-plan-1\">方案一</a>实现，在它的基础上将数组二分之后做加法比较，因为遍历的是有序数组，在排除不合法的值之后(<code class=\"language-text\">min + max &gt; target</code>的最大值)有效数字的索引是不会发生改变的。</p>\n<p><font color=\"blue\">这个方案的重点在于二分，减少遍历的次数，最坏的情况是排除的时候没任何变化，即数组元素都是有效数字，且较小值在左侧末尾，较大值也在左侧末尾，这样会导致双层遍历都需要走完才能找到有效两个值。</font></p>\n<p>比如：[-1, 2, 3, 10, 12, 13] -> 16 经过两步</p>\n<ol>\n<li>排除较大值无变化</li>\n<li>二分数组成: <code class=\"language-text\">[-1, 2, 3]</code> 和 <code class=\"language-text\">[10, 12, 13]</code> 即要找到 3 + 13 = 16 就得将两个数组遍历到最后(3x3=9次)。</li>\n</ol>\n<p><em>写到这里会发现其实每次遍历并不需要都遍历完，考虑下将右边数字倒序遍历，那么就会有如果 leftval + rightval &#x3C; target 的时候那么它之后的数都不可能等于 target 便可以退出本次循环，减少比较次数。</em></p>\n<p>比如： left = -1, right = 13 相加 &#x3C; 16 那么 -1 + 12/10/… 都不可能等于 target 因此可以直接排除掉。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 取中间值，然后搜索左值和右值，需要开辟 两个数组空间总大小最大为 numbers.length</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">twoSum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">numbers<span class=\"token punctuation\">,</span> target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  numbers <span class=\"token operator\">=</span> <span class=\"token function\">filterLarger</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> len <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">const</span> min <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    max <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">[</span>len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n  <span class=\"token comment\">// 目标的中间值作为基准，分割出左右小-大两个数组元素区</span>\n  <span class=\"token keyword\">const</span> mid <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> midIdx <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n  <span class=\"token comment\">// 找出大值起始索引</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> val <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">></span> mid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      midIdx <span class=\"token operator\">=</span> i\n      <span class=\"token keyword\">break</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">===</span> mid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      midIdx <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">//console.log({ mid, midIdx }, numbers)</span>\n  <span class=\"token comment\">// 如果 midIdx === -1 说明有两种情况：</span>\n  <span class=\"token comment\">// 1. 余下的元素都是比 mid 小的数，这种情况就不会存在两个数相加等于 target</span>\n  <span class=\"token comment\">// 2. 余下的元素都是等于 mid 的数，这个时候可能性只有 mid 为 0情况</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>midIdx <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// q2</span>\n      <span class=\"token comment\">// 这种情况只要找出两个值为 0 的元素索引</span>\n      <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> res\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// q1</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 到这里说明 midIdx > -1，两边都有值且一大一小</span>\n\n  <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> midIdx<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 较小数</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> midIdx<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">++</span>count\n      <span class=\"token comment\">// 较大数</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> numbers<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">,</span> <span class=\"token string\">\"two sum 1\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面示例提交结果：</p>\n<blockquote>\n<p>执行用时：96 ms, 在所有 JavaScript 提交中击败了28.05%的用户</p>\n<p>内存消耗：38.3 MB, 在所有 JavaScript 提交中击败了10.00%的用户</p>\n</blockquote>\n<p>根据上面的分析，进一步优化，使第二个 for 倒序遍历，减少遍历次数：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 取中间值，然后搜索左值和右值，需要开辟 两个数组空间总大小最大为 numbers.length</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">twoSum2</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">numbers<span class=\"token punctuation\">,</span> target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  numbers <span class=\"token operator\">=</span> <span class=\"token function\">filterLarger</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> len <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">const</span> min <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    max <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">[</span>len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n  <span class=\"token comment\">// 目标的中间值作为基准，分割出左右小-大两个数组元素区</span>\n  <span class=\"token keyword\">const</span> mid <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> midIdx <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n  <span class=\"token comment\">// 找出大值起始索引</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> val <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">></span> mid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      midIdx <span class=\"token operator\">=</span> i\n      <span class=\"token keyword\">break</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">===</span> mid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      midIdx <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">//console.log({ mid, midIdx }, numbers)</span>\n  <span class=\"token comment\">// 如果 midIdx === -1 说明有两种情况：</span>\n  <span class=\"token comment\">// 1. 余下的元素都是比 mid 小的数，这种情况就不会存在两个数相加等于 target</span>\n  <span class=\"token comment\">// 2. 余下的元素都是等于 mid 的数，这个时候可能性只有 mid 为 0情况</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>midIdx <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// q2</span>\n      <span class=\"token comment\">// 这种情况只要找出两个值为 0 的元素索引</span>\n      <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> res\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// q1</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 到这里说明 midIdx > -1，两边都有值且一大一小</span>\n\n  <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> midIdx<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 较小数</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> midIdx<span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> lval <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        rval <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n      <span class=\"token operator\">++</span>count\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lval <span class=\"token operator\">+</span> rval <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 直接退出 j 循环</span>\n        <span class=\"token keyword\">break</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// 较大数</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lval <span class=\"token operator\">+</span> rval <span class=\"token operator\">===</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">,</span> <span class=\"token string\">\"two sum 2\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>测试：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"result1\"</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">twoSum2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"result2\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 输出结果:</span>\n➜  algo git<span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ node test<span class=\"token punctuation\">.</span>js\nnode test<span class=\"token punctuation\">.</span>js\n<span class=\"token number\">9</span> two sum <span class=\"token number\">1</span>\n<span class=\"token punctuation\">[</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">]</span> result1\n<span class=\"token number\">3</span> two sum <span class=\"token number\">2</span>\n<span class=\"token punctuation\">[</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">]</span> result2\n➜  algo git<span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ </code></pre></div>\n<p>从上结果看出，优化之前 count = 9，优化之后 count = 3，很明显大大减少了遍历次数。</p>\n<p>提交结果1：</p>\n<blockquote>\n<p>执行用时：96 ms, 在所有 JavaScript 提交中击败了28.05%的用户</p>\n<p>内存消耗：38.1 MB, 在所有 JavaScript 提交中击败了10.00%的用户</p>\n</blockquote>\n<p>提交结果2：</p>\n<blockquote>\n<p>执行用时：76 ms, 在所有 JavaScript 提交中击败了51.90%的用户</p>\n<p>内存消耗：38.1 MB, 在所有 JavaScript 提交中击败了10.00%的用户</p>\n</blockquote>\n<p>提交多次后的结果：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">提交时间</th>\n<th align=\"left\">提交结果</th>\n<th align=\"left\">运行时间</th>\n<th align=\"left\">内存消耗</th>\n<th align=\"left\">语言</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">几秒前</td>\n<td align=\"left\">通过</td>\n<td align=\"left\">76 ms</td>\n<td align=\"left\">38.5 MB</td>\n<td align=\"left\">Javascript</td>\n</tr>\n<tr>\n<td align=\"left\">几秒前</td>\n<td align=\"left\">通过</td>\n<td align=\"left\">92 ms</td>\n<td align=\"left\">38.1 MB</td>\n<td align=\"left\">Javascript</td>\n</tr>\n<tr>\n<td align=\"left\">1 分钟前</td>\n<td align=\"left\">通过</td>\n<td align=\"left\">76 ms</td>\n<td align=\"left\">38.1 MB</td>\n<td align=\"left\">Javascript</td>\n</tr>\n<tr>\n<td align=\"left\">1 分钟前</td>\n<td align=\"left\">通过</td>\n<td align=\"left\">96 ms</td>\n<td align=\"left\">38.1 MB</td>\n<td align=\"left\">Javascript</td>\n</tr>\n<tr>\n<td align=\"left\">26 分钟前</td>\n<td align=\"left\">通过</td>\n<td align=\"left\">96 ms</td>\n<td align=\"left\">38.3 MB</td>\n<td align=\"left\">Javascript</td>\n</tr>\n</tbody>\n</table>\n<p>PS：结果好像并没什么改善，使用双层循环始终不完美，能否只是用一个层循环就能解决问题呢？？？</p>\n<h3 id=\"span-idarray-02-plan-3span方案三：计算，存储差值方式on-on\" style=\"position:relative;\"><a href=\"#span-idarray-02-plan-3span%E6%96%B9%E6%A1%88%E4%B8%89%EF%BC%9A%E8%AE%A1%E7%AE%97%EF%BC%8C%E5%AD%98%E5%82%A8%E5%B7%AE%E5%80%BC%E6%96%B9%E5%BC%8Fon-on\" aria-label=\"span idarray 02 plan 3span方案三：计算，存储差值方式on on permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><span id=\"array-02-plan-3\"></span>方案三：计算，存储差值方式(<em>O(n), O(n)</em>)</h3>\n<p>差值计算原理</p>\n<ol>\n<li>缓存不满足条件的值(作为索引)，其索引作为值，用来待查询</li>\n<li>使用插值作为索引去取值，能取到说明这个值被遍历且被存储去，属于有\n效值，最终返回其作为索引对应的值(即它的索引值)，和当前的值索引，即\n最后满足条件的两个值的索引</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">twoSum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">numbers<span class=\"token punctuation\">,</span> target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 这里可以左一层过滤，过滤掉非法的值</span>\n  <span class=\"token comment\">// numbers = filterLarger(numbers, target)</span>\n\n  <span class=\"token keyword\">const</span> deltas <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> len <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> val <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token comment\">// 记录当前的值 </span>\n    <span class=\"token keyword\">const</span> delta <span class=\"token operator\">=</span> target <span class=\"token operator\">-</span> numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token comment\">// 计算差值</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>deltas<span class=\"token punctuation\">[</span>delta<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token keyword\">void</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 进入这里说明当前值的差值在 deltas 中存在过</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>deltas<span class=\"token punctuation\">[</span>delta<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 保存当前值和它的索引</span>\n    <span class=\"token comment\">// 这里保存的目的是为了使用上面的 delta 走位索引来找差值</span>\n    <span class=\"token comment\">// 到这里说明并没有找到对应的差值</span>\n    deltas<span class=\"token punctuation\">[</span>val<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i \n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">//console.log(deltas, \"0\")</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>使用数组存储遍历过待比较的值会有个问题，如果这些值很大的时候，会创建一个长度很大的里面有很多空置的数组，也就是说会创建一个包含很多无意义元素的数组，在某种情况下对浪费巨大的内存。</p>\n<p><font color=\"blue\">搞清楚我们要存储的内容，其实最主要的是满足条件的两个值的索引，而又需要很方便的找到这个值，其实可以考虑使用 <code class=\"language-text\">Map</code> 来实现。</font></p>\n<p>比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 插值 + map 减少空间浪费</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">twoSum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">numbers<span class=\"token punctuation\">,</span> target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 可以过滤一层不合法值</span>\n  <span class=\"token comment\">// numbers = filterLarger(numbers, target)</span>\n\n  <span class=\"token keyword\">const</span> deltas <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> len <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> val <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">const</span> delta <span class=\"token operator\">=</span> target <span class=\"token operator\">-</span> numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>deltas<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>delta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>deltas<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>delta<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 保存当前值和它的索引</span>\n    deltas<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// console.log(deltas, \"0\")</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>执行结果：好像也不怎么理想</strong></p>\n<p>执行用时：84 ms, 在所有 JavaScript 提交中击败了36.05%的用户</p>\n<p>内存消耗：38.1 MB, 在所有 JavaScript 提交中击败了10.00%的用户</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">提交时间</th>\n<th align=\"left\">提交结果</th>\n<th align=\"left\">运行时间</th>\n<th align=\"left\">内存消耗</th>\n<th align=\"left\">语言</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">几秒前</td>\n<td align=\"left\">通过</td>\n<td align=\"left\">84 ms</td>\n<td align=\"left\">38.1 MB</td>\n<td align=\"left\">Javascript</td>\n</tr>\n<tr>\n<td align=\"left\">1 分钟前</td>\n<td align=\"left\">通过</td>\n<td align=\"left\">92 ms</td>\n<td align=\"left\">38.1 MB</td>\n<td align=\"left\">Javascript</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"span-idarray-02-plan-4span方案四-对撞双指针\" style=\"position:relative;\"><a href=\"#span-idarray-02-plan-4span%E6%96%B9%E6%A1%88%E5%9B%9B-%E5%AF%B9%E6%92%9E%E5%8F%8C%E6%8C%87%E9%92%88\" aria-label=\"span idarray 02 plan 4span方案四 对撞双指针 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><span id=\"array-02-plan-4\"></span>方案四: 对撞双指针</h3>\n<p>这种方案是在 leetcode 解题答案中看到的，这位作者说是击败 80%，但实际我试过几次结果其实并不理想，</p>\n<blockquote>\n<p>执行用时：92 ms, 在所有 JavaScript 提交中击败了29.67%的用户</p>\n<p>内存消耗：37.9 MB, 在所有 JavaScript 提交中击败了10.00%的用户</p>\n</blockquote>\n<p>上代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 对撞双指针</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">twoSum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">numbers<span class=\"token punctuation\">,</span> target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    j <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n  <span class=\"token keyword\">let</span> lval <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    rval <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span>lval <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>rval <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lval <span class=\"token operator\">+</span> rval <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      i<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lval <span class=\"token operator\">+</span> rval <span class=\"token operator\">></span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      j<span class=\"token operator\">--</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这种方案还是比较好理解的，因为是有序数组，所以：</p>\n<ol>\n<li>只要两个数小于 target 说明需要增加值大小，由于 j 是从最右边开始没有可加空间了，那么只能 i++ 取新的更大的值去弥补空缺。</li>\n<li>只要两个数大于 target 说明需要减小和的值，但由于在此时左边的值也没减小的空间了，因此只能 j— 取新的更小的值去剔除多余的值</li>\n</ol>\n<h3 id=\"官方方案\" style=\"position:relative;\"><a href=\"#%E5%AE%98%E6%96%B9%E6%96%B9%E6%A1%88\" aria-label=\"官方方案 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>官方方案</h3>\n<h4 id=\"span-idarray-02-plan-5span二分查找onlogn-o1\" style=\"position:relative;\"><a href=\"#span-idarray-02-plan-5span%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BEonlogn-o1\" aria-label=\"span idarray 02 plan 5span二分查找onlogn o1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><span id=\"array-02-plan-5\"></span>二分查找(O(nlogn), O(1))</h4>\n<p>先用第一层的 for 固定第一个数，然后在 for 里面使用 while 二分查找第二个数，第一个for 是 O(n) 第二个 while 是 logn 因此最后的时间复杂度是 (O(nlogn))。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 二分法[官方]</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">twoSum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">numbers<span class=\"token punctuation\">,</span> target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span>length\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> first <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">let</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      right <span class=\"token operator\">=</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 取中间的那个索引值</span>\n      <span class=\"token keyword\">const</span> mid <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> left\n\n      <span class=\"token keyword\">const</span> val <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        delta <span class=\"token operator\">=</span> target <span class=\"token operator\">-</span> first\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">===</span> delta<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">></span> delta<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 如果值大了，排除 mid 右边的所有元素值</span>\n        right <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 如果小了，排除 mid 左边的所有元素值</span>\n        left <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这种方案，不需要另开辟空间，while 里面是 logn 是因为将第一个数右边的所有数通过不断二分排除左边或右边一系列不合法的值。</p>\n<p>实测结果：</p>\n<blockquote>\n<p>执行用时：80 ms, 在所有 JavaScript 提交中击败了41.01%的用户</p>\n<p>内存消耗：38 MB, 在所有 JavaScript 提交中击败了10.00%的用户</p>\n</blockquote>\n<h4 id=\"span-idarray-02-plan-6span对撞双指针法on-o1\" style=\"position:relative;\"><a href=\"#span-idarray-02-plan-6span%E5%AF%B9%E6%92%9E%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95on-o1\" aria-label=\"span idarray 02 plan 6span对撞双指针法on o1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><span id=\"array-02-plan-6\"></span><a href=\"#array-02-plan-4\">对撞双指针法</a>(O(n), O(1))</h4>\n<p>如：<a href=\"#array-02-plan-4\">方案四</a>，采用两端指针分别右移和左移方式来定位唯一解，这种方案在位移过程中不会出现过滤掉唯一解的情况，因为头端右移的前提是 value &#x3C; target，需要补值(就算尾端先达到条件，只要值小尾端就不会发生位移)，尾端左移前提是 value > target ，需要减值(就算头端先达到条件，只要值大尾端就不会发生位移)，因此保证了左右两端任一一端先达到符合条件的值该值都不会被过滤掉，从而当两端值都满足条件的时候退出循环。</p>\n<h2 id=\"03supfont-colorred-size2每日fontsup-剑指-offer-11-旋转数组的最小数字\" style=\"position:relative;\"><a href=\"#03supfont-colorred-size2%E6%AF%8F%E6%97%A5fontsup-%E5%89%91%E6%8C%87-offer-11-%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97\" aria-label=\"03supfont colorred size2每日fontsup 剑指 offer 11 旋转数组的最小数字 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>03<sup><font color=\"red\" size=\"2\">每日</font></sup>. <a href=\"https://leetcode-cn.com/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/\">剑指 Offer 11. 旋转数组的最小数字</a></h2>\n<p>审题：</p>\n<p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如，数组 [3,4,5,1,2] 为 [1,2,3,4,5] 的一个旋转，该数组的最小值为1。  </p>\n<p>假设目标值为 target，那么在 target 之前的数组元素都是按照增序排列的，我们要找出的就是比这些数小的第一个数。</p>\n<h3 id=\"方案一：for-循环直接遍历查找on-o1\" style=\"position:relative;\"><a href=\"#%E6%96%B9%E6%A1%88%E4%B8%80%EF%BC%9Afor-%E5%BE%AA%E7%8E%AF%E7%9B%B4%E6%8E%A5%E9%81%8D%E5%8E%86%E6%9F%A5%E6%89%BEon-o1\" aria-label=\"方案一：for 循环直接遍历查找on o1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>方案一：for 循环直接遍历查找(O(n), O(1))</h3>\n<p>明确问题含义之后，最简单的方法就是通过遍历找到比前面更小的数即可。</p>\n<p>问题?：<font color=\"red\">既然 target 前面的数都是升序列表，说明我们只要比较目标值和数组第一个数就可以了，第一个数到目标值之间的数的比较其实都是多余的。</font></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @param {number[]} numbers\n * @return {number}\n */</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">minArray</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">numbers</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> min <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span>length\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> min\n  \t\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> val <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">&lt;</span> min<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> val\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> min\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>结果：</p>\n<blockquote>\n<p>执行用时：92 ms, 在所有 JavaScript 提交中击败了12.99%的用户</p>\n<p>内存消耗：38 MB, 在所有 JavaScript 提交中击败了100.00%的用户</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"left\">提交时间</th>\n<th align=\"left\">提交结果</th>\n<th align=\"left\">运行时间</th>\n<th align=\"left\">内存消耗</th>\n<th align=\"left\">语言</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">几秒前</td>\n<td align=\"left\">通过</td>\n<td align=\"left\">92 ms</td>\n<td align=\"left\">38 MB</td>\n<td align=\"left\">Javascript</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"方案二supfont-colorred-size2官方fontsup：二分法ologn\" style=\"position:relative;\"><a href=\"#%E6%96%B9%E6%A1%88%E4%BA%8Csupfont-colorred-size2%E5%AE%98%E6%96%B9fontsup%EF%BC%9A%E4%BA%8C%E5%88%86%E6%B3%95ologn\" aria-label=\"方案二supfont colorred size2官方fontsup：二分法ologn permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>方案二<sup><font color=\"red\" size=\"2\">官方</font></sup>：二分法(O(logn))</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 二分法</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">minArray</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">numbers</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> numbers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> numbers<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> numbers<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> lVal <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> rVal <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">let</span> mid <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">-</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">,</span>\n        midVal <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span>\n        <span class=\"token comment\">// 中间值比右边的值大，说明在旋转的数组范围内，左侧指针右移</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>midVal <span class=\"token operator\">></span> rVal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n            i <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>midVal <span class=\"token operator\">&lt;</span> rVal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// 中间值比右边值小，说明在非旋转数组范围内，右侧指针左移</span>\n          <span class=\"token comment\">// 但是为了不过滤掉目标值，这里不能 mid - 1，因为我要找的值</span>\n          <span class=\"token comment\">// 肯定是在非旋转的数组范围内的</span>\n            j <span class=\"token operator\">=</span> mid\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// 这里指针一步一步左移，是为了应对相同值的情况，即 midVal === rVal 的时候</span>\n          <span class=\"token comment\">// 这里为何不需要考虑 i++ 的情况???</span>\n          <span class=\"token comment\">// ----> 因为low指针右移的前提是 midVal > rVal，即此时的 midVal 一定是在</span>\n          <span class=\"token comment\">// 旋转数组范围内，只要进行 mid + 1 将左侧的值全部过滤掉，就算有相同的值，那一定</span>\n          <span class=\"token comment\">// 都还是在旋转数组范围内，因此直接过滤即可。</span>\n            j<span class=\"token operator\">--</span>\n        <span class=\"token punctuation\">}</span>\n        \n    <span class=\"token punctuation\">}</span>\n  \t<span class=\"token comment\">// 最后循环结束的时候，肯定就是最小值的位置</span>\n    <span class=\"token keyword\">return</span> numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n   \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>执行用时：112 ms, 在所有 JavaScript 提交中击败了6.90%的用户</p>\n<p>内存消耗：38.1 MB, 在所有 JavaScript 提交中击败了100.00%的用户</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">提交时间</th>\n<th align=\"left\">提交结果</th>\n<th align=\"left\">运行时间</th>\n<th align=\"left\">内存消耗</th>\n<th align=\"left\">语言</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">几秒前</td>\n<td align=\"left\">通过</td>\n<td align=\"left\">112 ms</td>\n<td align=\"left\">38.1 MB</td>\n<td align=\"left\">Javascript</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"04-两数之和\" style=\"position:relative;\"><a href=\"#04-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C\" aria-label=\"04 两数之和 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>04. <a href=\"https://leetcode-cn.com/problems/two-sum/\">两数之和</a></h2>\n<p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p>\n<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p>\n<p>这一题和 <a href=\"#array-02\">02. 两数之和 II - 输入有序数组</a> 解法相差不大，唯一不同的是02中是输入的有序数组，这里的数组顺序是未知的，可能有序可能乱序。</p>\n<p>因此解法上的差异从4个方案+两个官方方案来分析的话会有如下结果：</p>\n<ol>\n<li><a href=\"#array-02-plan-1\">方案一</a> 两个 for 循环，不需要改动啥，暴力解法不在乎是否有序</li>\n<li><a href=\"#array-02-plan-2\">方案二</a> 二分法，会根据有序数组进行排除，因此在这里不适用，但二分法依旧有用</li>\n<li><a href=\"#array-02-plan-3\">方案三</a> 差值法，依旧适用，该方案不区分是否有序</li>\n<li><a href=\"#array-02-plan-4\">方案四</a> 对撞法，依旧适用</li>\n<li>… 官方方案二分查找采用了有序数组过滤类似方案二，对撞法就是方案三。</li>\n</ol>\n<h1 id=\"字符串分类\" style=\"position:relative;\"><a href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%86%E7%B1%BB\" aria-label=\"字符串分类 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>字符串分类</h1>\n<h2 id=\"删除字符串中重复的字符\" style=\"position:relative;\"><a href=\"#%E5%88%A0%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%97%E7%AC%A6\" aria-label=\"删除字符串中重复的字符 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>删除字符串中重复的字符</h2>\n<p><a href=\"https://leetcode.com/articles/remove-all-adjacent-duplicates-in-string/\">https://leetcode.com/articles/remove-all-adjacent-duplicates-in-string/</a></p>\n<p>题解：删除靠着的重复字符，然后对删除后的字符执行同样的操作，直到没有紧靠着的重复字符为止。</p>\n<p>  比如： abbaca => del, bb => aaca => del, aa => ca</p>\n<p>  最终 =abbaca= 经过处理得到 =ca= 。</p>\n<h3 id=\"while-循环版本\" style=\"position:relative;\"><a href=\"#while-%E5%BE%AA%E7%8E%AF%E7%89%88%E6%9C%AC\" aria-label=\"while 循环版本 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>while</em> 循环版本</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">del</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">str</span> <span class=\"token operator\">=></span> str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/([a-z])\\1{1,}/gi</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">rmDupsWithWhile</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">current</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">let</span> last <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>last <span class=\"token operator\">!==</span> current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\nlast <span class=\"token operator\">=</span> current\ncurrent <span class=\"token operator\">=</span> <span class=\"token function\">del</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">return</span> current\n<span class=\"token punctuation\">}</span>\n\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Time'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'result:'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">rmDupsWithWhile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abbaca'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Time'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>执行结果：</p>\n<blockquote>\n<p>: result: ca\n: Time: 3.740ms\n: undefined</p>\n</blockquote>\n<p>原理含简单，就是不断的使用正则去重复替换掉重复的连续字符，直到最后 ~last === current~ 为止，</p>\n<p>因为一旦没有重复连续字符了， =replace= 的结果都最终一样。</p>\n<h3 id=\"正则递归版本尾调用未优化\" style=\"position:relative;\"><a href=\"#%E6%AD%A3%E5%88%99%E9%80%92%E5%BD%92%E7%89%88%E6%9C%AC%E5%B0%BE%E8%B0%83%E7%94%A8%E6%9C%AA%E4%BC%98%E5%8C%96\" aria-label=\"正则递归版本尾调用未优化 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>正则递归版本(尾调用未优化)</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'abbaca'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">del</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">s</span> <span class=\"token operator\">=></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/([a-z])\\1{1,}/gi</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">rmDupsWithRecursionNoOptimized</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">current<span class=\"token punctuation\">,</span> last</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>last <span class=\"token operator\">==</span> current<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> current\n\n  last <span class=\"token operator\">=</span> current\n  current <span class=\"token operator\">=</span> <span class=\"token function\">del</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token function\">rmDupsWithRecursionNoOptimized</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">,</span> last<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 不满足尾调用优化：未立即返回执行结果，非最后一个语句</span>\n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Time'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token function\">rmDupsWithRecursionNoOptimized</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Time'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></code></pre></div>\n<p>结果：</p>\n<blockquote>\n<p>: Time: 0.446ms\n: ca\n: undefined</p>\n</blockquote>\n<h3 id=\"正则递归版本尾调用优化\" style=\"position:relative;\"><a href=\"#%E6%AD%A3%E5%88%99%E9%80%92%E5%BD%92%E7%89%88%E6%9C%AC%E5%B0%BE%E8%B0%83%E7%94%A8%E4%BC%98%E5%8C%96\" aria-label=\"正则递归版本尾调用优化 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>正则递归版本(尾调用优化)</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'abbaca'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">del</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">s</span> <span class=\"token operator\">=></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/([a-z])\\1{1,}/gi</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">rmDupsWithRecursionOptimized</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">current<span class=\"token punctuation\">,</span> last</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>last <span class=\"token operator\">==</span> current<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> current\n\n  last <span class=\"token operator\">=</span> current\n  current <span class=\"token operator\">=</span> <span class=\"token function\">del</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 尾调用优化条件： 1. 立即返回结果，2. 无变量引用，3. 最后一行</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">rmDupsWithRecursionOptimized</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">,</span> last<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Time'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token function\">rmDupsWithRecursionOptimized</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Time'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></code></pre></div>\n<p>结果：</p>\n<blockquote>\n<p>: Time: 0.463ms\n: ca\n: undefined</p>\n</blockquote>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%E6%95%B0%E7%BB%84%E5%88%86%E7%B1%BB\">数组分类</a></p>\n<ul>\n<li><a href=\"#01-%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97\">01. 数组中重复的数字</a></li>\n<li><a href=\"#span-idarray-02span02-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C-ii---%E8%BE%93%E5%85%A5%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84\"><span id=\"array-02\"></span>02. 两数之和 II - 输入有序数组</a></li>\n<li><a href=\"#03supfont-colorred-size2%E6%AF%8F%E6%97%A5fontsup-%E5%89%91%E6%8C%87-offer-11-%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97\">03<sup><font color=\"red\" size=\"2\">每日</font></sup>. 剑指 Offer 11. 旋转数组的最小数字</a></li>\n<li><a href=\"#04-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C\">04. 两数之和</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%86%E7%B1%BB\">字符串分类</a></p>\n<ul>\n<li><a href=\"#%E5%88%A0%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%97%E7%AC%A6\">删除字符串中重复的字符</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Algorithm on leetcode easy level【DOING】","date":"June 16, 2020","description":"leetcode practices logs."}}},"pageContext":{"slug":"/algo/leetcode-easy/","previous":{"fields":{"slug":"/vue3/reactivity/"},"frontmatter":{"title":"Vue3.0 源码系列 01 -- Reactivity"}},"next":{"fields":{"slug":"/vue3/compiler-core/"},"frontmatter":{"title":"Vue3.0 源码系列 02 -- Compiler-core【DOING】"}}}}}