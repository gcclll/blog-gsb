{"componentChunkName":"component---src-templates-blog-post-js","path":"/vue3/reactivity/","result":{"data":{"site":{"siteMetadata":{"title":"若叶知秋"}},"markdownRemark":{"id":"bce3055e-1b57-5204-bda2-9e6ed1f6d6d4","excerpt":"该系列文章，均以测试用例通过为基准一步步实现一个 vue3 源码副本(学习)。 简介  是 vue next 里面通过  +  实现的响应式模块。 源码路径：  入口文件： 疑问点解答：  相当于浅复制，只针对对象的一级 reactive，嵌套的对象不会 reactive 参考：测试代码 reactive.spec…","html":"<blockquote>\n<p>该系列文章，均以测试用例通过为基准一步步实现一个 vue3 源码副本(学习)。</p>\n</blockquote>\n<h1 id=\"简介\" style=\"position:relative;\"><a href=\"#%E7%AE%80%E4%BB%8B\" aria-label=\"简介 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>简介</h1>\n<p><code class=\"language-text\">reactivity</code> 是 vue next 里面通过 <code class=\"language-text\">proxy</code> + <code class=\"language-text\">reflect</code> 实现的响应式模块。</p>\n<p>源码路径： <code class=\"language-text\">packages/reactivity</code></p>\n<p>入口文件：<code class=\"language-text\">packages/reactivity/src/index.ts</code></p>\n<p>疑问点解答：</p>\n<ol>\n<li>\n<p><code class=\"language-text\">shallowReactive</code> 相当于浅复制，只针对对象的一级 reactive，嵌套的对象不会 reactive</p>\n<p>参考：测试代码 reactive.spec.ts</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should keep reactive properties reactive'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">const</span> props<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token function\">shallowReactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> n<span class=\"token operator\">:</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> foo<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n     props<span class=\"token punctuation\">.</span>n <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> foo<span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n     <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">isReactive</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ol>\n<p><a href=\"https://github.com/gcclll/vue-next-code-read/tree/master/bakups/reactive_over\">完整的 reactivity 模块代码链接。</a></p>\n<h2 id=\"阶段代码链接\" style=\"position:relative;\"><a href=\"#%E9%98%B6%E6%AE%B5%E4%BB%A3%E7%A0%81%E9%93%BE%E6%8E%A5\" aria-label=\"阶段代码链接 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>阶段代码链接</h2>\n<ol>\n<li><a href=\"#code1\">测试用例 <code class=\"language-text\">reactive.spec.ts</code> 通过后的代码链接</a></li>\n<li><a href=\"#code2\">测试用例 <code class=\"language-text\">effect.spec.ts</code>通过后的代码链接</a></li>\n<li><a href=\"#file-0521\">05-21号 git pull 后的更新合 并之后的 reactive.js</a></li>\n<li><a href=\"https://github.com/gcclll/vue-next-code-read/tree/master/bakups/reactive_files_v\">将 reactive.js 拆分成 effect.js + baseHandlers.js</a></li>\n<li><a href=\"https://github.com/gcclll/vue-next-code-read/tree/master/bakups/reactive_collection_get_set\">完成 collection handlers(set + get)</a></li>\n<li><a href=\"https://github.com/gcclll/vue-next-code-read/tree/master/bakups/reactive_collection_map_set\">完成 collection Map, Set 支持</a></li>\n<li><a href=\"https://github.com/gcclll/vue-next-code-read/tree/master/bakups/reactive_ref\">支持 Ref 类型</a></li>\n<li><a href=\"https://github.com/gcclll/vue-next-code-read/tree/master/bakups/reactive_computed\">支持 computed 属性</a></li>\n</ol>\n<h2 id=\"文中重点链接\" style=\"position:relative;\"><a href=\"#%E6%96%87%E4%B8%AD%E9%87%8D%E7%82%B9%E9%93%BE%E6%8E%A5\" aria-label=\"文中重点链接 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>文中重点链接</h2>\n<ol>\n<li><a href=\"#test-case-rloops\">vue 中是如何防止在 effect(fn) 的 fn 中防止 ob.prop++ 导致栈溢出的？</a></li>\n<li><a href=\"#test-case-json\">vue 中为何能对 JSON.parse(JSON.stringify({})) 起作用的？</a></li>\n<li><a href=\"#question-this\">集合 handlers 的 get 函数实现 this 问题</a></li>\n<li><a href=\"#question-raw-key\">Key 和 rawKey 的问题(get 中)，为什么要两次 track:get？</a></li>\n<li><a href=\"#question-key1-key11\">为什么 key1 和 toReactive(key1) 后的 key11 前后 set 会改变 key1 对应的值？？？</a></li>\n<li><a href=\"#reactive-nest-ref\">如果 Ref 类型放在一个对象中 reactive 化会有什么结果？？？</a></li>\n<li><a href=\"#test-case-computed-chained\">计算属性的链式嵌套使用输出结果详细分析过程(想要透彻computed请看这里！！！)</a></li>\n</ol>\n<h2 id=\"遗留问题\" style=\"position:relative;\"><a href=\"#%E9%81%97%E7%95%99%E9%97%AE%E9%A2%98\" aria-label=\"遗留问题 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>遗留问题</h2>\n<ol>\n<li><strong><font color=\"green\">DONE</font></strong> <code class=\"language-text\">ownKeys</code> 代理收集的依赖不能被触发。</li>\n<li><font color=\"red\">TODO</font> <a href=\"#question-ref-++\">Ref:a 类型在对象中执行 obj.a++ 之后依旧是 Ref 类型的 a ???</a></li>\n</ol>\n<h2 id=\"更新\" style=\"position:relative;\"><a href=\"#%E6%9B%B4%E6%96%B0\" aria-label=\"更新 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>更新</h2>\n<h3 id=\"2020-05-21-211907-git-pull\" style=\"position:relative;\"><a href=\"#2020-05-21-211907-git-pull\" aria-label=\"2020 05 21 211907 git pull permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2020-05-21 21:19:07 git pull</h3>\n<h1 id=\"模块结构\" style=\"position:relative;\"><a href=\"#%E6%A8%A1%E5%9D%97%E7%BB%93%E6%9E%84\" aria-label=\"模块结构 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>模块结构</h1>\n<ol>\n<li><code class=\"language-text\">__tests__/</code> 测试代码目录</li>\n<li><code class=\"language-text\">src/</code> 主要代码目录</li>\n</ol>\n<p><code class=\"language-text\">src</code> 目录下的文件：</p>\n<ol>\n<li><code class=\"language-text\">baseHandler.ts</code> 传入给代理的对象，代理 <code class=\"language-text\">Object/Array</code> 时使用的 Handlers。</li>\n<li><code class=\"language-text\">collectionHandlers.ts</code> 传入给代理的对象，代理 <code class=\"language-text\">[Week]Set/Map</code>类型时使用的 Handlers。</li>\n<li><code class=\"language-text\">computed.ts</code> 计算属性代码</li>\n<li><code class=\"language-text\">effect.ts</code></li>\n<li><code class=\"language-text\">operations.ts</code> 操作类型枚举</li>\n<li><code class=\"language-text\">reactive.ts</code> 主要代码</li>\n<li><code class=\"language-text\">ref.ts</code> </li>\n</ol>\n<!-- more -->\n<h1 id=\"proxy-和-reflect-回顾\" style=\"position:relative;\"><a href=\"#proxy-%E5%92%8C-reflect-%E5%9B%9E%E9%A1%BE\" aria-label=\"proxy 和 reflect 回顾 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proxy 和 Reflect 回顾</h1>\n<p>将 reactive -> createReactiveObject 简化合并：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> toProxy<span class=\"token punctuation\">,</span> toRaw<span class=\"token punctuation\">,</span> baseHandlers<span class=\"token punctuation\">,</span> collectionHandlers</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ... 必须是对象 return</span>\n\n  <span class=\"token comment\">// ... 已经设置过代理了</span>\n  <span class=\"token keyword\">let</span> observed <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n\n  <span class=\"token comment\">// ... 本身就是代理</span>\n\n  <span class=\"token comment\">// ... 白名单检测</span>\n\n  <span class=\"token comment\">// ... handlers</span>\n\n  <span class=\"token comment\">// new 代理</span>\n  <span class=\"token keyword\">let</span> handlers <span class=\"token operator\">=</span> baseHandlers <span class=\"token operator\">||</span> collectionHandlers <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// ...</span>\n  observed <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> handlers<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 缓存代理设置结果到 toProxy, toRaw</span>\n\n  <span class=\"token keyword\">return</span> observed\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>增加一个 reactive 对象：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'vuejs'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> observed <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">,</span> receiver</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">,</span> receiver <span class=\"token operator\">===</span> observed<span class=\"token punctuation\">,</span> <span class=\"token string\">'get'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> observed<span class=\"token punctuation\">)</span>\n\t</code></pre></div>\n<p>输出结果：</p>\n<blockquote>\n<p>{name: “vuejs”} Proxy {name: “vuejs”}</p>\n<p>=> original.name\n“vuejs”\n=> observed.name\nindex.js:28 true “name” true “get”\nundefined\n=> observed === original\nfalse</p>\n</blockquote>\n<p>访问 target, observed 的属性 name 结果如上，<code class=\"language-text\">observed</code> 是被代理之后的对象。</p>\n<ol>\n<li>Observed.name 输出结果是 handler.get 执行之后的结果，因为没任何返回所以是 <code class=\"language-text\">undefined</code></li>\n<li>\n<p><code class=\"language-text\">get(target, prop, receiver)</code> 有三个参数，分别代表</p>\n<ul>\n<li>target: 被代理的对象，即原始的那个 target 对象</li>\n<li>prop: 要获取对象的属性值的 key</li>\n<li>receiver: 代理之后的对象，即 <code class=\"language-text\">observed</code></li>\n</ul>\n</li>\n</ol>\n<p><strong>其他主要几个代理方法</strong>：</p>\n<ol>\n<li><code class=\"language-text\">set</code> 赋值的时候触发，对应 <code class=\"language-text\">Reflect.set(target, prop, value)</code></li>\n<li><code class=\"language-text\">get</code> 取值的时候触发，对应 <code class=\"language-text\">Reflect.get(target, prop, reciver)</code></li>\n<li><code class=\"language-text\">ownKeys</code> 使用 <code class=\"language-text\">for...in</code> 时触发，对应 <code class=\"language-text\">Reflect.ownKeys(target)</code></li>\n<li><code class=\"language-text\">has</code> 使用 <code class=\"language-text\">prop in obj</code> 时触发，对应语法 ： <code class=\"language-text\">... in ...</code></li>\n<li><code class=\"language-text\">deleteProperty</code> 使用 <code class=\"language-text\">delete obj.name</code> 触发，对应 <code class=\"language-text\">delete obj.name</code></li>\n<li><code class=\"language-text\">apply</code> 被代理对象是函数的时候，通过 <code class=\"language-text\">fn.apply()</code> 时触发，handler 里对应 <code class=\"language-text\">fn()</code></li>\n<li><code class=\"language-text\">construct</code> 构造器，<code class=\"language-text\">new target()</code> 时触发</li>\n<li><code class=\"language-text\">getPrototypeOf</code> 调用 <code class=\"language-text\">Object.getPrototypeOf(target)</code> 触发，返回对象 或 null</li>\n<li><code class=\"language-text\">setPrototypeOf</code> 设置对象原型时触发，如： <code class=\"language-text\">obj.prototype = xxx</code></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> original <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'vuejs'</span><span class=\"token punctuation\">,</span>\n  foo<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n\noriginal <span class=\"token operator\">=</span> test\n\n<span class=\"token keyword\">const</span> observed <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">,</span> receiver</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">===</span> original<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">,</span> receiver <span class=\"token operator\">===</span> observed<span class=\"token punctuation\">,</span> <span class=\"token string\">'get'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token string\">'set'</span><span class=\"token punctuation\">)</span>\n    Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">ownKeys</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get own keys...'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ownKeys</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">has</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'has proxy handler...'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> key <span class=\"token keyword\">in</span> target\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">deleteProperty</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">+</span> <span class=\"token string\">'deleted from '</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">delete</span> target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 适用于被代理对象是函数类型的</span>\n  <span class=\"token function-variable function\">apply</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> thisArg<span class=\"token punctuation\">,</span> argList</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apply...'</span><span class=\"token punctuation\">,</span> argList<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">target</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>argList<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">construct</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'proxy construct ... '</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">target</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 必须返回一个对象或者 null，代理 Object.getPrototypeOf 取对象原型</span>\n  <span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'proxy getPrototypeOf...'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> proto</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'proxy setPrototypeOf...'</span><span class=\"token punctuation\">,</span> proto<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>observed<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// -> true \"name\" true \"get\"</span>\nobserved<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'xxx'</span> <span class=\"token comment\">// -> name xxx set</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> prop <span class=\"token keyword\">in</span> observed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">// -> get own keys...</span>\n<span class=\"token string\">'name'</span> <span class=\"token keyword\">in</span> observed <span class=\"token comment\">// -> has proxy handler</span>\n<span class=\"token keyword\">delete</span> observed<span class=\"token punctuation\">.</span>foo <span class=\"token comment\">// foo deleted from { name: 'xxx', foo: 1 }</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">'test apply'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">observed</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// apply... (3) [1, 2, 3]</span>\n<span class=\"token comment\">// 注意点：proxy-construct 的第二个参数是传入构造函数时的参数列表</span>\n<span class=\"token comment\">// 就算是以下面方式一个个传递的</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">observed</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// proxy construct ...  (3) [1, 2, 3]</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>observed<span class=\"token punctuation\">)</span> <span class=\"token comment\">// proxy getPrototypeOf...</span>\nobserved<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  bar<span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// prototype {bar: 2} set</span>\n<span class=\"token comment\">// index.js:31 true \"prototype\" true \"get\"</span>\n<span class=\"token comment\">// index.js:90 {bar: 2}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>observed<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span></code></pre></div>\n<p>需要注意的点：</p>\n<ol>\n<li><code class=\"language-text\">construct</code> 的代理 <code class=\"language-text\">handler</code> 中的第二个参数是一个参数列表数组。</li>\n<li><code class=\"language-text\">getPrototypeOf</code> 代理里面返回一个正常的对象 或 <code class=\"language-text\">null</code>表示失败。 </li>\n</ol>\n<h1 id=\"reactive-函数\" style=\"position:relative;\"><a href=\"#reactive-%E5%87%BD%E6%95%B0\" aria-label=\"reactive 函数 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>reactive 函数</h1>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token operator\">:</span> object</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// if trying to observe a readonly proxy, return the readonly version.</span>\n  <span class=\"token comment\">// 这里对只读的对象进行判断，因为只读的对象不允许修改值</span>\n  <span class=\"token comment\">// 只要曾经被代理过的就会被存到 readonlyToRaw 这个 WeakMap 里面</span>\n  <span class=\"token comment\">// 直接返回只读版本</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>readonlyToRaw<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> target\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">createReactiveObject</span><span class=\"token punctuation\">(</span>\n    target<span class=\"token punctuation\">,</span>\n    rawToReactive<span class=\"token punctuation\">,</span>\n    reactiveToRaw<span class=\"token punctuation\">,</span>\n    mutableHandlers<span class=\"token punctuation\">,</span>\n    mutableCollectionHandlers\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>传入一个 <code class=\"language-text\">target</code> 返回代理对象。</p>\n<h1 id=\"createreactiveobject\" style=\"position:relative;\"><a href=\"#createreactiveobject\" aria-label=\"createreactiveobject permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>createReactiveObject</h1>\n<p>真正执行代理的是这个函数里面。</p>\n<h2 id=\"参数列表\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8\" aria-label=\"参数列表 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参数列表</h2>\n<ol>\n<li><code class=\"language-text\">target</code> 被代理的对象</li>\n<li><code class=\"language-text\">toProxy</code> 一个 <code class=\"language-text\">WeakMap</code> 里面存储了 <code class=\"language-text\">target -&gt; observed</code> </li>\n<li><code class=\"language-text\">toRaw</code> 和 <code class=\"language-text\">toProxy</code> 刚好相反的一个 <code class=\"language-text\">WeakMap</code> 存储了 <code class=\"language-text\">observed -&gt; target</code></li>\n<li><code class=\"language-text\">baseHandlers</code> 代理时传递给 <code class=\"language-text\">Proxy</code> 的第二个参数</li>\n<li><code class=\"language-text\">collectionHandlers</code> 代理时传递给 <code class=\"language-text\">Proxy</code> 的第二个参数(一个包含四种集合类型的 <code class=\"language-text\">Set</code>)</li>\n</ol>\n<h2 id=\"函数体\" style=\"position:relative;\"><a href=\"#%E5%87%BD%E6%95%B0%E4%BD%93\" aria-label=\"函数体 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>函数体</h2>\n<p>下面是将 <code class=\"language-text\">reactive</code> 和 <code class=\"language-text\">createReactiveObject</code> 进行合并的代码。</p>\n<p>事先声明的变量列表：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 集合类型的构造函数，用来检测 target 是使用 baseHandlers</span>\n<span class=\"token comment\">// 还是 collectionHandlers</span>\n<span class=\"token keyword\">const</span> collectionTypes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>Set<span class=\"token punctuation\">,</span> Map<span class=\"token punctuation\">,</span> WeakMap<span class=\"token punctuation\">,</span> WeakSet<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 只读对象的 map，只读对象代理时候直接返回原始对象</span>\n<span class=\"token keyword\">const</span> readonlyToRaw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 存储一些只读或无法代理的值</span>\n<span class=\"token keyword\">const</span> rawValues <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>合并后的 <code class=\"language-text\">reactive(target, toProxy, toRaw, basehandlers, collectionHandlers)</code> 函数</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> toProxy<span class=\"token punctuation\">,</span> toRaw<span class=\"token punctuation\">,</span> baseHandlers<span class=\"token punctuation\">,</span> collectionHandlers</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 只读的对象</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>readonlyToRaw<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> target\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ... 必须是对象 return</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> target <span class=\"token operator\">!==</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'不是对象，不能被代理。。。'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> target\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// toProxy 是一个 WeakMap ，存储了 observed -> target</span>\n  <span class=\"token comment\">// 因此这里检测是不是已经代理过了避免重复代理情况</span>\n  <span class=\"token keyword\">let</span> observed <span class=\"token operator\">=</span> toProxy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>observed <span class=\"token operator\">!==</span> <span class=\"token keyword\">void</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'target 已经设置过代理了'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> observed\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ... 本身就是代理</span>\n  <span class=\"token comment\">// toRaw 也是一个 WeakMap 存储了 target -> observed</span>\n  <span class=\"token comment\">// 这里判断这个，可能是为了防止，将曾经被代理之后的 observed 传进来再代理的情况</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>toRaw<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'target 本身已经是代理'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> target\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...... 这里省略非法对象的判断，放在后面展示 ......</span>\n\n  <span class=\"token comment\">// 根据 target 类型决定使用哪个 handlers</span>\n  <span class=\"token comment\">// `Set, Map, WeakSet, SeakMap` 四种类型使用 collectionHandlers 集合类型的 handlers</span>\n  <span class=\"token comment\">// `Object, Array` 使用 basehandlers</span>\n  <span class=\"token keyword\">const</span> handlers <span class=\"token operator\">=</span> collectionTypes<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">?</span> collectionHandlers\n    <span class=\"token operator\">:</span> baseHandlers\n\n  <span class=\"token comment\">// new 代理</span>\n  observed <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> handlers<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 缓存代理设置结果到 toProxy, toRaw</span>\n  toProxy<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>observed<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span>\n  toRaw<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> observed<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> observed\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol>\n<li><code class=\"language-text\">readonlyToRaw.has(target)</code> 检测是否是只读对象，直接返回该对象</li>\n<li>检测 <code class=\"language-text\">target</code>是引用类型还是普通类型，只有引用类型才能被代理</li>\n<li><code class=\"language-text\">toProxy</code> 中存储了 <code class=\"language-text\">target-&gt;observed</code> 内容，检测 <code class=\"language-text\">target</code> 是不是已经有代理了</li>\n<li><code class=\"language-text\">toRaw</code> 中存储了 <code class=\"language-text\">observed-&gt;target</code> 检测是否已经是代理了</li>\n<li>\n<p>五种不合法的对象类型，不能作为代理源</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ... 白名单检测，源码中调用的是 `canObserve` 这里一个个拆分来检测</span>\n <span class=\"token comment\">// 1. Vue 实例本身不能被代理</span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>_isVue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'target 是 vue 实例，不能被代理'</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span> target\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token comment\">// 2. Vue 的虚拟节点，其实就是一堆包含模板字符串的对象解构</span>\n <span class=\"token comment\">// 这个是用来生成 render 构建 DOM 的，不能用来被代理</span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>_isVNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'target 是虚拟节点，不能被代理'</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span> targtet\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token comment\">// 限定了只能被代理的一些对象： 'Object, Array, Map, Set, WeakMap, WeakSet`</span>\n <span class=\"token comment\">// Object.prototype.toString.call(target) => [object Object] 取 (-1, 8)</span>\n <span class=\"token comment\">// 其实 `Object` 构造函数字符串</span>\n <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toRawType</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n   <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n   <span class=\"token operator\">!</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Object'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Array'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Map'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Set'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'WeakMap'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'WeakSet'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>\n     <span class=\"token function\">toRawType</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n     <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">target 不是可代理范围对象('Object', 'Array', 'Map', 'Set', 'WeakMap', 'WeakSet')</span><span class=\"token template-punctuation string\">`</span></span>\n   <span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span> target\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token comment\">// 那些被标记为只读或者非响应式的WeakSets的值</span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rawValues<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> target\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token comment\">// 被冻结的对象，是不允许任何修改操作的，不可用作响应式对象</span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">isFrozen</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> target\n <span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>根据 target 的类型检测采用哪种类型的 <code class=\"language-text\">handlers</code>，集合类型使用 <code class=\"language-text\">collectionhandlers</code>，对象类型采用 <code class=\"language-text\">baseHandlers</code></li>\n<li>创建代理 <code class=\"language-text\">new Proxy(target, handlers)</code></li>\n<li>缓存代理源及代理结果到 <code class=\"language-text\">toProxy, toRaw</code> 避免出现重复代理的情况</li>\n<li>返回代理对象 <code class=\"language-text\">observed</code>。</li>\n</ol>\n<h2 id=\"使用-reactive\" style=\"position:relative;\"><a href=\"#%E4%BD%BF%E7%94%A8-reactive\" aria-label=\"使用 reactive permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用 <code class=\"language-text\">reactive</code></h2>\n<p>为了区分两种代理类型(集合类型，普通对象(对象和数组))，这里使用两个对象(<code class=\"language-text\">setTarget</code>, <code class=\"language-text\">objTarget</code>)，创建两个代理(<code class=\"language-text\">setObserved</code>, <code class=\"language-text\">objObserved</code>)，分别传入不同的代理 <code class=\"language-text\">handlers</code>，代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> toProxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> toRaw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> setTarget <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> objTarget <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  foo<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  bar<span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> setObserved <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>setTarget<span class=\"token punctuation\">,</span> toProxy<span class=\"token punctuation\">,</span> toRaw<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">,</span> receiver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">,</span> <span class=\"token string\">'set get...'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// return Reflect.get(target, prop, receiver)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// set/map 集合类型</span>\n  <span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> prop</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> ret <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">)</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">,</span> <span class=\"token string\">'set has...'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> ret\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> objObserved <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>\n  objTarget<span class=\"token punctuation\">,</span>\n  toProxy<span class=\"token punctuation\">,</span>\n  toRaw<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// object/arary, 普通类型</span>\n    <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">,</span> receiver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">,</span> <span class=\"token string\">'object/array get...'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">,</span> receiver<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>输出代理的结果对象如下：<code class=\"language-text\">console.log(setObserved, objObserved)</code></p>\n<p>结果：<code class=\"language-text\">Proxy {1, 2, 3} Proxy {foo: 1, bar: 2}</code></p>\n<p>然后出现了错误，当我试图调用 <code class=\"language-text\">setObserved.has(1)</code> 的时候<span id=\"error-map\">报错了</span>：</p>\n<p><img src=\"http://qiniu.ii6g.com/1589614203.png?imageMogr2/thumbnail/!100p\"></p>\n<p>获取 <code class=\"language-text\">setObserved.size</code> 属性报错，不同的是 <code class=\"language-text\">set proxy handler</code> 有被调用，这里应该是调用 <code class=\"language-text\">Reflect.get()</code> 时候报错了：</p>\n<p><img src=\"http://qiniu.ii6g.com/1589614685.png?imageMogr2/thumbnail/!100p\"></p>\n<p><a href=\"https://medium.com/the-non-traditional-developer/safely-extending-the-javascript-set-object-using-proxies-3ce25702b8c3\">google 之后这里有篇文章里给出了问题原因和解决方案</a></p>\n<p>解决方法，在 <code class=\"language-text\">get proxy handler</code> 里面加上判断，如果是函数就使用 <code class=\"language-text\">target</code>去调用：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> setObserved <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>setTarget<span class=\"token punctuation\">,</span> toProxy<span class=\"token punctuation\">,</span> toRaw<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">,</span> receiver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 如果是函数，经过代理之后会丢失作用域问题，所以要</span>\n        <span class=\"token comment\">// 重新给他绑定下作用域</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">,</span> <span class=\"token string\">'get...'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> target<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span>\n          <span class=\"token operator\">?</span> target<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n          <span class=\"token operator\">:</span> target<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n </code></pre></div>\n<p>结果：</p>\n<blockquote>\n<p>Proxy {1, 2, 3} Proxy {foo: 1, bar: 2}\n-> setObserved.has(1)\nhas get…\ntrue</p>\n</blockquote>\n<h1 id=\"basehandlersts\" style=\"position:relative;\"><a href=\"#basehandlersts\" aria-label=\"basehandlersts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>baseHandlers.ts</h1>\n<p>这个文件模块出现了几个 handlers 是需要弄清楚的，比如：</p>\n<p><code class=\"language-text\">baseHandlers.ts</code> 里面和 <strong>Array</strong>, <strong>Object</strong> 有关的四个：</p>\n<ol>\n<li><code class=\"language-text\">mutableHandlers</code></li>\n<li><code class=\"language-text\">readonlyHandlers</code></li>\n<li><code class=\"language-text\">shallowReactiveHandlers</code>, </li>\n<li><code class=\"language-text\">shallowReadonlyHandlers</code></li>\n</ol>\n<p><code class=\"language-text\">collectionHandlers.ts</code> 里和集合相关的两个：</p>\n<ol>\n<li><code class=\"language-text\">mutableCollectionHandlers</code></li>\n<li><code class=\"language-text\">readonlyCollectionHandlers</code></li>\n</ol>\n<p>在上一节讲过 <code class=\"language-text\">createReactiveObject</code> 需要给出两个 handlers 作为参数，一个是针对数组和普通对象的，另一个是针对集合类型的。</p>\n<p>下面分别来看看两个文件中分别都干了什么？？？</p>\n<h2 id=\"列出文件中相关的函数和属性：\" style=\"position:relative;\"><a href=\"#%E5%88%97%E5%87%BA%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9B%B8%E5%85%B3%E7%9A%84%E5%87%BD%E6%95%B0%E5%92%8C%E5%B1%9E%E6%80%A7%EF%BC%9A\" aria-label=\"列出文件中相关的函数和属性： permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>列出文件中相关的函数和属性：</h2>\n<p>属性:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 符号集合</span>\n<span class=\"token keyword\">const</span> builtInSymbols <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 四个通过 createGetter 生成的 get 函数</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">get</span> <span class=\"token operator\">=</span> <span class=\"token comment\">/*#__PURE__*/</span> <span class=\"token function\">createGetter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> shallowGet <span class=\"token operator\">=</span> <span class=\"token comment\">/*#__PURE__*/</span> <span class=\"token function\">createGetter</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> readonlyGet <span class=\"token operator\">=</span> <span class=\"token comment\">/*#__PURE__*/</span> <span class=\"token function\">createGetter</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> shallowReadonlyGet <span class=\"token operator\">=</span> <span class=\"token comment\">/*#__PURE__*/</span> <span class=\"token function\">createGetter</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 三个数组函数 'includes', 'indexOf', 'lastIndexOf'</span>\n<span class=\"token keyword\">const</span> arrayInstrumentations<span class=\"token operator\">:</span> Record<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> Function<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// setter</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">set</span> <span class=\"token operator\">=</span> <span class=\"token comment\">/*#__PURE__*/</span> <span class=\"token function\">createSetter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> shallowSet <span class=\"token operator\">=</span> <span class=\"token comment\">/*#__PURE__*/</span> <span class=\"token function\">createSetter</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 创建 getter 函数的函数</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">createGetter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">isReadonly <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> shallow <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 创建 setter 函数的函数</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">createSetter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">shallow <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// delete obj.name 原子操作</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">deleteProperty</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token operator\">:</span> object<span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">symbol</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">{</span> \t<span class=\"token comment\">/*...*/</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 原子操作 key in obj</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token operator\">:</span> object<span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">symbol</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Object.keys(target) 操作，取对象 key</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">ownKeys</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token operator\">:</span> object</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">symbol</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  <span class=\"token punctuation\">{</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>四个要被导出的 <code class=\"language-text\">handlers</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> mutableHandlers<span class=\"token operator\">:</span> ProxyHandler<span class=\"token operator\">&lt;</span>object<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> readonlyHandlers<span class=\"token operator\">:</span> ProxyHandler<span class=\"token operator\">&lt;</span>object<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> shallowReactiveHandlers<span class=\"token operator\">:</span> ProxyHandler<span class=\"token operator\">&lt;</span>object<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> shallowReadonlyHandlers<span class=\"token operator\">:</span> ProxyHandler<span class=\"token operator\">&lt;</span>object<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>接下来一个个来分析分析，看看每个都有什么作用？？？</p>\n<p>先从 <code class=\"language-text\">createGetter</code> 说起吧 -> </p>\n<p>为了下面方便调试，对上面的 <code class=\"language-text\">reactive()</code> 进行了简化，只保留了与 handlers 有关的部分：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> collectionTypes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>Set<span class=\"token punctuation\">,</span> Map<span class=\"token punctuation\">,</span> WeakMap<span class=\"token punctuation\">,</span> WeakSet<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> toProxy<span class=\"token punctuation\">,</span> toRaw<span class=\"token punctuation\">,</span> baseHandlers<span class=\"token punctuation\">,</span> collectionHandlers</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 简化</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> target <span class=\"token operator\">!==</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> target\n\n  <span class=\"token comment\">//... isVue, VNode...</span>\n\n  <span class=\"token keyword\">let</span> observed <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n\n  <span class=\"token keyword\">const</span> handlers <span class=\"token operator\">=</span> collectionTypes<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">?</span> collectionHandlers\n    <span class=\"token operator\">:</span> baseHandlers\n\n  observed <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> handlers<span class=\"token punctuation\">)</span>\n  toProxy<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> observed<span class=\"token punctuation\">)</span>\n  toRaw<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>observed<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> observed\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> toProxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  toRaw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"creategetterisreadonly--false-shallow--false\" style=\"position:relative;\"><a href=\"#creategetterisreadonly--false-shallow--false\" aria-label=\"creategetterisreadonly  false shallow  false permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>createGetter(isReadonly = false, shallow = false)</h2>\n<p>参数： </p>\n<ol>\n<li><code class=\"language-text\">isReadonly = false</code></li>\n<li><code class=\"language-text\">shallow = false</code></li>\n</ol>\n<p>简化之后的 <code class=\"language-text\">createGetter</code>，先用它来创建一个 <code class=\"language-text\">get</code> 然后创建一个 <code class=\"language-text\">baseHandler: mutableHandlers</code> 可变的 <code class=\"language-text\">handlers</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 很明显这个 proxy handler get, 简化之后...</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> receiver</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// ... 省略1，如果是数组，且是 includes, indexOf, lastIndexOf 操作</span>\n    <span class=\"token comment\">// 直接返回它对应的 res</span>\n    <span class=\"token comment\">// ... 省略2，如果是符号属性，直接返回 res</span>\n\n    <span class=\"token comment\">// ... 省略3, 浅 reactive，不支持嵌套</span>\n\n    <span class=\"token comment\">// ... 省略4，isRef 类型，判断是数组还是对象，数组执行 track(...), 对象返回 res.value</span>\n\n    <span class=\"token comment\">// 非只读属性，执行 track()，收集依赖</span>\n    <span class=\"token operator\">!</span>isReadonly <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">track</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token string\">'get...'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// return res</span>\n    <span class=\"token comment\">// 非对象直接返回原结果，如果是对象区分只读与否</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> res <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">&amp;&amp;</span> res <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span>\n      <span class=\"token operator\">?</span> isReadonly\n        <span class=\"token operator\">?</span> <span class=\"token comment\">// need to lazy access readonly and reactive here to avoid</span>\n          <span class=\"token comment\">// circular dependency</span>\n          res <span class=\"token comment\">// ... readonly(res)</span>\n        <span class=\"token operator\">:</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> toProxy<span class=\"token punctuation\">,</span> toRaw<span class=\"token punctuation\">,</span> mutableHandlers<span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">:</span> res\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面我们省略了暂时不关心的是哪个部分：</p>\n<ol>\n<li>数组类型且 key 是 <code class=\"language-text\">[&#39;includes&#39;, &#39;indexOf&#39;, &#39;lastIndexOf&#39;]</code> 其中任一一个</li>\n<li>符号属性处理</li>\n<li><code class=\"language-text\">ref</code> 类型处理</li>\n</ol>\n<p>目前我们只关心如何创建 <code class=\"language-text\">get</code> 和一个最简单的 <code class=\"language-text\">basehandler: mutableHandler</code></p>\n<p>使用 <code class=\"language-text\">createGetter: get</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 示例 1</span>\n<span class=\"token keyword\">const</span> objTarget <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  foo<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  bar<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> \n    name<span class=\"token operator\">:</span> <span class=\"token string\">'bar'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 将 createGetter 生成的 get -> mutableHandlers 传入 reactive</span>\n<span class=\"token keyword\">const</span> objObserved <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>objTarget<span class=\"token punctuation\">,</span> toProxy<span class=\"token punctuation\">,</span> toRaw<span class=\"token punctuation\">,</span> mutableHandlers<span class=\"token punctuation\">)</span></code></pre></div>\n<p>这里 <code class=\"language-text\">get</code> 我认为只有两个目的：</p>\n<h2 id=\"递归-reactive，就在最后返回的时候检测-res-结果时候\" style=\"position:relative;\"><a href=\"#%E9%80%92%E5%BD%92-reactive%EF%BC%8C%E5%B0%B1%E5%9C%A8%E6%9C%80%E5%90%8E%E8%BF%94%E5%9B%9E%E7%9A%84%E6%97%B6%E5%80%99%E6%A3%80%E6%B5%8B-res-%E7%BB%93%E6%9E%9C%E6%97%B6%E5%80%99\" aria-label=\"递归 reactive，就在最后返回的时候检测 res 结果时候 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>递归 <code class=\"language-text\">reactive</code>，就在最后返回的时候检测 <code class=\"language-text\">res</code> 结果时候</h2>\n<p>这里我们首先来验证下递归 <code class=\"language-text\">reactive</code> 问题，即当我们访问对象中嵌套对象里面的属性时候，实际上是不会触发 <code class=\"language-text\">get</code> 的，我们在 <code class=\"language-text\">createGetter</code> 的 <code class=\"language-text\">return</code> 前面加上一句 <code class=\"language-text\">return res</code> 。</p>\n<p>也就是说不检测结果是不是对象，而直接返回当前取值的结果：</p>\n<blockquote>\n<p>=> objObserved.foo\n“foo” “get…”\n1\n=> objObserved.bar\n{name: “bar”} “bar” “get…”\n{name: “bar”}\n{name: “bar”} “bar” “get…”\n=> objObserved.bar.name\n{name: “bar”} “bar” “get…”\n“bar”\n=> const bar = objObserved.bar\n{name: “bar”} “bar” “get…”\nundefined\n=> bar.name\n“bar”</p>\n</blockquote>\n<p>分析上面的测试结果：</p>\n<ul>\n<li><code class=\"language-text\">objObserved.foo</code> 直接取对象的成员值，触发了 <code class=\"language-text\">proxy get</code></li>\n<li><code class=\"language-text\">objObserved.bar</code> 取对象的对象成员，触发了 <code class=\"language-text\">proxy get</code></li>\n<li><code class=\"language-text\">objObserved.bar.name</code> 取嵌套对象的成员，触发了 <code class=\"language-text\">proxy get</code>但请注意实际上触发 <code class=\"language-text\">get</code> 的是 <code class=\"language-text\">objObserved.bar</code> 得取值过程，因为输出的 <code class=\"language-text\">res</code> 是 <code class=\"language-text\">{name: &quot;bar&quot;}</code>，也就是说取 <code class=\"language-text\">bar.name</code> 的<code class=\"language-text\">name</code>时候实际并没有触发 <code class=\"language-text\">proxy get</code>，这说明 <code class=\"language-text\">proxy get</code> 只能代理一级。</li>\n<li>为了证明代理只能代理一级，下面通过 <code class=\"language-text\">bar = objObserved.bar</code> 再去取 <code class=\"language-text\">bar.name</code> 就很明显并没有触发 <code class=\"language-text\">proxy get</code></li>\n</ul>\n<p>通过上面的分析，这也就是为什么要在 <code class=\"language-text\">return</code> 的时候去检测是不是对象，如果是对象需要进行递归 <code class=\"language-text\">reactive</code>的动作。</p>\n<p>那么，我们将 <code class=\"language-text\">return res</code> 注释掉再来看看结果如何：</p>\n<blockquote>\n<p>=> objObserved.foo\n1 “foo” “get…”\n1\n=> objObserved.bar\n{name: “bar”} “bar” “get…”\nProxy {name: “bar”}\n=> objObserved.bar.name\n{name: “bar”} “bar” “get…”\nbar name get…\n“bar”\n=> const bar = objObserved.bar\n{name: “bar”} “bar” “get…”\nbar.name\n=> bar name get…\n“bar”</p>\n</blockquote>\n<p>看到差异没，首先从 <code class=\"language-text\">objObserved.bar.name</code> 就可看出差异了，这里首先触发的实际是 <code class=\"language-text\">objObserved.bar</code> 的 <code class=\"language-text\">proxy get</code>，此时 <code class=\"language-text\">return</code> 的时候发现结果是个对象，因此将 <code class=\"language-text\">bar</code> 传入 <code class=\"language-text\">reactive(bar)</code> 进一步代理，完成之后取 <code class=\"language-text\">bar.name</code> 的时候 <code class=\"language-text\">bar</code> 已经是 reactive 对象了，因此就在 <strong>{name: “bar”} “bar” “get…”</strong> 后面紧跟着出现了<strong>bar name get…</strong> 输出。</p>\n<p>此时，无论后面是赋值到变量 <code class=\"language-text\">bar</code> 再取 <code class=\"language-text\">bar.name</code> 结果一样会触发对应的 <code class=\"language-text\">proxy get</code>，毕竟对象是引用类型，类似指针一样，新增了一个变量指向它，它依旧在哪里。</p>\n<p>到此，最基本的 <code class=\"language-text\">proxy get</code> 响应式也完成了，并且能做到嵌套对象的 reactive 化，感觉相比 vue3 之前的通过 <code class=\"language-text\">defineProperty</code> 实现更加清晰容易理解。</p>\n<h2 id=\"收集依赖track\" style=\"position:relative;\"><a href=\"#%E6%94%B6%E9%9B%86%E4%BE%9D%E8%B5%96track\" aria-label=\"收集依赖track permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>收集依赖(<code class=\"language-text\">track</code>)</h2>\n<p>既然有了响应式数据，那么接下来的重点就是如果利用其特性为我们做点事情，但是它又如何知道为我们做什么的，这个时候就有了所谓的“收集依赖”。</p>\n<p>“收集依赖”就是在 <code class=\"language-text\">get</code> 取值期间发生的，也就是 <code class=\"language-text\">createGetter</code> 中的 <code class=\"language-text\">track()</code> 调用时触发了依赖收集动作。</p>\n<p><code class=\"language-text\">track()</code> 相关的代码在 <code class=\"language-text\">effect.ts</code> 中：</p>\n<p>函数定义： </p>\n<p><code class=\"language-text\">export function track(target: object, type: TrackOpTypes, key: unknown){}</code></p>\n<p>有三个参数：</p>\n<ol>\n<li>target：proxy get 时候传递给 proxy 的那个对象</li>\n<li>type: 要 track 的类型，有三种： <code class=\"language-text\">get</code>, <code class=\"language-text\">has</code>,<code class=\"language-text\">iterate</code>，分别是取值，检测属性存在性，以及迭代时。</li>\n<li>Key: 针对 target 对象里面的属性，收集依赖到 <code class=\"language-text\">targetMap -&gt; depsMap -&gt; dep:Set</code> 中</li>\n</ol>\n<p>简化 <code class=\"language-text\">track(target, type)</code>代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// trackType -> get, has, iterate</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">track</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...省略1 检测 shouldTrack 和 activeEffect 标记</span>\n\n  <span class=\"token comment\">// 取 target 自己的依赖 map ，如果没有说明是首次，需要给它创建一个</span>\n  <span class=\"token comment\">// 空的集合，这里使用 Map 而不是 WeakMap，为的是强引用，它涉及到</span>\n  <span class=\"token comment\">// 数据的更新触发 UI 渲染，因此不该使用 WeakMap，否则可能会导致依赖丢失问题</span>\n  <span class=\"token keyword\">let</span> depsMap <span class=\"token operator\">=</span> targetMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>depsMap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    targetMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>depsMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 接下来对 key 取其依赖</span>\n  <span class=\"token comment\">// 如果属性的依赖不存在，说明该对象是首次使用，需要创建其依赖库</span>\n  <span class=\"token comment\">// 且这里使用了 `Set` 是为了避免重复注册依赖情况，避免数据的更新导致重复触发</span>\n  <span class=\"token comment\">// 同一个 update 情况</span>\n  <span class=\"token keyword\">let</span> dep <span class=\"token operator\">=</span> depsMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dep<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    depsMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>dep <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 注册实际的 update: activeEffect 操作</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dep<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>activeEffect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    dep<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>activeEffect<span class=\"token punctuation\">)</span>\n    activeEffect<span class=\"token punctuation\">.</span>deps<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>dep<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>代码实现主要有三个过程：</p>\n<ol>\n<li>检测全局的 <code class=\"language-text\">targetMap</code> 中是不是有 <code class=\"language-text\">target</code> 自己的依赖仓库(<code class=\"language-text\">Map</code>)</li>\n<li>检测 <code class=\"language-text\">depsMap = targetMap.get(target)</code> 中是不是有取值 <code class=\"language-text\">key</code> 对应的依赖集合 <code class=\"language-text\">dep</code></li>\n<li>注册 <code class=\"language-text\">activeEffect</code>对象，然后将当前 target-key-dep 注册到 activeEffect，然后发现每个 <code class=\"language-text\">activeEffect</code>会有自己的 <code class=\"language-text\">deps</code> 保存了所有对象 <code class=\"language-text\">key</code> 的依赖。 </li>\n</ol>\n<p>收集依赖的过程如图：，执行取值 <code class=\"language-text\">activeEffect.deps</code> 中就会新增一个 <code class=\"language-text\">Set</code></p>\n<p><img src=\"http://qiniu.ii6g.com/1589694976.png?imageMogr2/thumbnail/!100p\"></p>\n<p>到这里，依赖收集算是完成，但并不是很明白 <code class=\"language-text\">activeEffect</code> 具体是做什么的???</p>\n<p>既然依赖收集，要搞明白 <code class=\"language-text\">activeEffect</code> 是做什么的，估计的从 <code class=\"language-text\">set</code> 入手了，下面来实现 <code class=\"language-text\">set</code> 从而完成一个完整的 <code class=\"language-text\">get -&gt; dep -&gt; set -&gt; update</code> 的过程。</p>\n<p>go on…</p>\n<h2 id=\"createsettershallow--false\" style=\"position:relative;\"><a href=\"#createsettershallow--false\" aria-label=\"createsettershallow  false permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>createSetter(shallow = false)</h2>\n<p>源码简化版：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">createSetter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">shallow <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 标准的 proxy set</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> receiver</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 取旧值</span>\n    <span class=\"token keyword\">const</span> oldValue <span class=\"token operator\">=</span> target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\">// 先不管 shallow mode</span>\n\n    <span class=\"token comment\">// 还记得 reactive 里面的 toRaw啊，对象这里就是取出</span>\n    <span class=\"token comment\">// value 的原始对象 target，前提是它有 reactive() 过</span>\n    <span class=\"token comment\">// 才会被存入到 toRaw: observed -> target 中</span>\n    <span class=\"token comment\">// 暂时简化成： toRaw.get(value)</span>\n    value <span class=\"token operator\">=</span> toRaw<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// ... 省略，ref 检测</span>\n\n    <span class=\"token keyword\">const</span> hadKey <span class=\"token operator\">=</span> <span class=\"token function\">hasOwn</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 先执行设置原子操作</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> receiver<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 只有对象是它自身的时候，才触发 dep-update(排除原型链)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">===</span> <span class=\"token function\">toRaw</span><span class=\"token punctuation\">(</span>receiver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hadKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 新增属性操作</span>\n        <span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">hasChanged</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 值改变操作,排除 NaN !== NaN 情况</span>\n        <span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">'set'</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> result\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里主要有几个操作：</p>\n<ol>\n<li>shallow mode 检测，已省略。</li>\n<li><code class=\"language-text\">value = toRaw(value)</code> 如果 value 是 observed，那么可以通过 toRaw 取出被代理之前的对象 target，还记得 <code class=\"language-text\">reactive()</code> 里面的那个 toRaw, toProxy 缓存操作吧。</li>\n<li>调用 <code class=\"language-text\">Reflect.set()</code> 先将值设置下去，然后再考虑是否触发依赖</li>\n<li>检测对象原型链，只有当对象是自身的时候才触发依赖</li>\n<li>触发的行为只有两种要么是新增属性(<code class=\"language-text\">add</code>)，要么是更改值(<code class=\"language-text\">set</code>, 值不变的情况不触发)</li>\n</ol>\n<p>这里有个与 <code class=\"language-text\">createGetter</code> 里面收集依赖 (<code class=\"language-text\">track()</code>)对应的触发依赖函数： <code class=\"language-text\">trigger</code>。</p>\n<p>接下来就是要看看 <code class=\"language-text\">trigger()</code> 里面都做了啥。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">,</span> oldTarget</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// step1: 检测是否被 track 过，没有根本就没有依赖</span>\n  <span class=\"token keyword\">const</span> depsMap <span class=\"token operator\">=</span> targetMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>depsMap<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n\n  <span class=\"token comment\">// step2: 将 dep 加入到 effects</span>\n  <span class=\"token comment\">// 创建两个 effects, 一个普通的，一个计算属性</span>\n  <span class=\"token keyword\">const</span> effects <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> computedRunners <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 根据 effect 的选项 computed 决定是添加到那个 Set 中</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">effectsToAdd</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    effectsToAdd<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\">effect</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token punctuation\">(</span>effect <span class=\"token operator\">!==</span> activeEffect <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>shouldTrack<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n        <span class=\"token punctuation\">(</span>effect<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>computed\n          <span class=\"token operator\">?</span> computedRunners<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>effect<span class=\"token punctuation\">)</span>\n          <span class=\"token operator\">:</span> effects<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>effect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// if ... clear</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// TODO 清空动作，触发所有依赖</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 数组长度变化</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// TODO 触发更长度变化有关的所有依赖</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 例如： SET | ADD | DELETE 操作</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">!==</span> <span class=\"token keyword\">void</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>depsMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> isAddOrDelete <span class=\"token operator\">=</span>\n      type <span class=\"token operator\">===</span> <span class=\"token string\">'add'</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'delete'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isAddOrDelete <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'set'</span> <span class=\"token operator\">&amp;&amp;</span> target <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 删除或添加操作，或者 map 的设置操作</span>\n      <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>depsMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">'length'</span> <span class=\"token operator\">:</span> <span class=\"token constant\">ITERATE_KEY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Map 的添加或删除操作</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isAddOrDelete <span class=\"token operator\">&amp;&amp;</span> target <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>depsMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token constant\">MAP_KEY_ITERATE_KEY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// step3: 执行 effects 中所有的 dep</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">run</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">effect</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 选项提供了自己的调度器，执行自己的</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>effect<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>scheduler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      effect<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span><span class=\"token function\">scheduler</span><span class=\"token punctuation\">(</span>effect<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 触发应该触发的依赖</span>\n  computedRunners<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>run<span class=\"token punctuation\">)</span>\n  effects<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>run<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>主要有三个步骤：</p>\n<ul>\n<li>step1: 检测是否收集过依赖，如果没有说明可能没有被用过，没什么可触发的</li>\n<li>step2: 主要是过滤收集到依赖，针对当前更改操作的所有依赖触发(add)</li>\n<li>step2: 经过第二步的依赖过滤之后，触发所有的依赖(run)</li>\n</ul>\n<p>这里面有两个重要的属性(<code class=\"language-text\">effects</code>,<code class=\"language-text\">computedRunners</code>)和两个函数(<code class=\"language-text\">add</code>,<code class=\"language-text\">run</code>)</p>\n<p><em>add: 过滤，run: 执行。</em></p>\n<p>很明显，到这里，我们还是没有解决，依赖对应的 <code class=\"language-text\">update</code> 是如何收集的问题，因为 <code class=\"language-text\">set</code> 也只是将已经收集好 <code class=\"language-text\">dep</code> 执行而已。</p>\n<h1 id=\"effectts\" style=\"position:relative;\"><a href=\"#effectts\" aria-label=\"effectts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>effect.ts</h1>\n<p>该文件中主要包含三个重要函数:</p>\n<ol>\n<li><code class=\"language-text\">trigger(target, type, key?, newValue?, oldValue?, oldTarget?)</code> 触发依赖函数</li>\n<li><code class=\"language-text\">effect-&gt;createReactiveEffect(fn, options)</code> 转换依赖函数成ReactiveEffect类型，并且立即执行它。</li>\n<li><code class=\"language-text\">track(target, type, key)</code></li>\n</ol>\n<p>以及一些辅助函数：</p>\n<ol>\n<li><code class=\"language-text\">isEffect()</code> 检测是不是 <code class=\"language-text\">ReactiveEffect</code> 类型\n<code class=\"language-text\">isEffect = fn =&gt; fn?._isEffect === true</code></li>\n<li>\n<p><code class=\"language-text\">stop(effect: ReactiveEffect)</code>\n停止 effect ，如果选项中提供了 onStop 监听该动作，执行它，重置 effect.active。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">effect<span class=\"token operator\">:</span> ReactiveEffect</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>effect<span class=\"token punctuation\">.</span>active<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">cleanup</span><span class=\"token punctuation\">(</span>effect<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>effect<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>onStop<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     effect<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span><span class=\"token function\">onStop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span>\n   effect<span class=\"token punctuation\">.</span>active <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">cleanup(effect: ReactiveEffect)</code></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 在 track 的时候，加入 effect 时，对其做一次清理工作</span>\n<span class=\"token comment\">// 保证 effect.deps 干净</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">cleanup</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">effect<span class=\"token operator\">:</span> ReactiveEffect</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> deps <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> effect\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>deps<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> deps<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     deps<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span>effect<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span>\n   deps<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">pauseTracking()</code></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 暂停 track 动作</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">pauseTracking</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n trackStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>shouldTrack<span class=\"token punctuation\">)</span>\n shouldTrack <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">enableTracking()</code></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 恢复 track 动作</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">enableTracking</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n trackStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>shouldTrack<span class=\"token punctuation\">)</span>\n shouldTrack <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">resetTracking()</code></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 重置 track，可能 fn 执行失败了，try ... finally ... 丢弃 fn:effect 时候调用</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">resetTracking</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> last <span class=\"token operator\">=</span> trackStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n shouldTrack <span class=\"token operator\">=</span> last <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> last\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<p>包含的属性变量：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 保存着 target 对象的所有依赖的 Map &lt;target, dep&lt;Set>></span>\n<span class=\"token comment\">// target -> Map&lt;key, dep[]></span>\n<span class=\"token keyword\">const</span> targetMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakMap</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> KeyToDepMap<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// effect 栈，保存所有的 fn->effect</span>\n<span class=\"token keyword\">const</span> effectStack<span class=\"token operator\">:</span> ReactiveEffect<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// 当前激活状态的 effect</span>\n<span class=\"token keyword\">let</span> activeEffect<span class=\"token operator\">:</span> ReactiveEffect <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">ITERATE_KEY</span> <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span>__DEV__ <span class=\"token operator\">?</span> <span class=\"token string\">'iterate'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">MAP_KEY_ITERATE_KEY</span> <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span>__DEV__ <span class=\"token operator\">?</span> <span class=\"token string\">'Map key iterate'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 执行 effect 时，uid++，即每个 effect 都会有自己的唯一的 uid</span>\n<span class=\"token keyword\">let</span> uid <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token comment\">// 记录当前 effect 的状态，</span>\n<span class=\"token keyword\">let</span> shouldTrack <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token comment\">// 当前 effect -> shouldTack</span>\n<span class=\"token comment\">// 每增加一个 effect 记录 shouldTrack = true, push 到 trackStack</span>\n<span class=\"token comment\">// 如果 effect.raw&lt;fn> 执行异常会 pop 掉，还原 shouldTrack -> last, </span>\n<span class=\"token comment\">// pop trackStack</span>\n<span class=\"token keyword\">const</span> trackStack<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>一直到这里我们基本完成了 <code class=\"language-text\">reactive-&gt;get-&gt;set-&gt;track-&gt;trigger-&gt;effect</code> 一系列动作，</p>\n<p>也该我们测试的时候了，按正常应该会有我们想要的结果，响应式->注册fn:update->取值收集依赖-> 设置触发 fn:udpate 调用 </p>\n<p>=>>>>>>>>></p>\n<p>比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">r</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> toProxy<span class=\"token punctuation\">,</span> toRaw<span class=\"token punctuation\">,</span> mutableHandlers<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'effect fn'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token function\">effect</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'after effect'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> dummy\n<span class=\"token keyword\">const</span> counter <span class=\"token operator\">=</span> <span class=\"token function\">r</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> num<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>dummy <span class=\"token operator\">=</span> counter<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">,</span> <span class=\"token string\">'before'</span><span class=\"token punctuation\">)</span>\ncounter<span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> <span class=\"token number\">7</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">,</span> <span class=\"token string\">'after'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>上面的例子运行之后，并没有得到我们想要的结果！！！</p>\n<blockquote>\n<p>effect fn\n[“id”, “_isEffect”, “active”, “raw”, “deps”, “options”] “after effect”\n0 “num” “get…”\n0 “before”\n0 “after”</p>\n</blockquote>\n<p>按照我们的实现，理论上 after 的结果应该是 7 才对，但结果显示依然是 0，这说明了我们调用 <code class=\"language-text\">effect(fn)</code> 并没有与上面的 <code class=\"language-text\">r({ num: 0 })</code> 发生任何联系，即 fn 并没有被收集到 <code class=\"language-text\">counter.num</code> 的依赖 deps 中去，那这是为什么呢？？？</p>\n<hr>\n<p>我们来回顾分析下之前所作工作的整个过程(<code class=\"language-text\">reactive-&gt;get-&gt;set-&gt;track-&gt;trigger-&gt;effect</code>):</p>\n<ul>\n<li><code class=\"language-text\">reactive</code> 将数据通过 <code class=\"language-text\">proxy</code> 转成响应式</li>\n<li><code class=\"language-text\">get-&gt;track</code> 收集依赖，相关属性：targetMap, depsMap, dep, activeEffect, activeEffect.deps。</li>\n<li><code class=\"language-text\">set-&gt;trigger</code> 触发依赖 update 函数，涉及到的 targetMap, depsMap,  add, run</li>\n<li><code class=\"language-text\">effect</code> 将 update 函数，转换成 ReactiveEffect 类型</li>\n</ul>\n<p>纵观这整个过程，尤其是 <code class=\"language-text\">get-&gt;track</code> ， <code class=\"language-text\">set-&gt;trigger -&gt; effect</code> 收集，触发和 effect 三个过程，唯一有可能让他们发生联系的应该就是这个 <code class=\"language-text\">activeEffect</code> 模块域里的变量，标识着当前处于激活状态的 effect，它的使用几乎贯穿了整个过程(track->trigger->effect，这三个函数也都在 <em>effect.ts</em> 中实现)。</p>\n<p>那么接下来…</p>\n<p>前面都是简化之后的，现在看看完整的这三个函数实现：</p>\n<h2 id=\"tracktarget-type-key\" style=\"position:relative;\"><a href=\"#tracktarget-type-key\" aria-label=\"tracktarget type key permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>track(target, type, key)</h2>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">track</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token operator\">:</span> object<span class=\"token punctuation\">,</span> <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> TrackOpTypes<span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>shouldTrack <span class=\"token operator\">||</span> activeEffect <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">let</span> depsMap <span class=\"token operator\">=</span> targetMap<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>depsMap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    targetMap<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>depsMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">let</span> dep <span class=\"token operator\">=</span> depsMap<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dep<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    depsMap<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>dep <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dep<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>activeEffect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    dep<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>activeEffect<span class=\"token punctuation\">)</span>\n    activeEffect<span class=\"token punctuation\">.</span>deps<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>dep<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__DEV__ <span class=\"token operator\">&amp;&amp;</span> activeEffect<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>onTrack<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      activeEffect<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span><span class=\"token function\">onTrack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        effect<span class=\"token operator\">:</span> activeEffect<span class=\"token punctuation\">,</span>\n        target<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">type</span><span class=\"token punctuation\">,</span>\n        key\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"trigger\" style=\"position:relative;\"><a href=\"#trigger\" aria-label=\"trigger permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>trigger(…)</h2>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">target<span class=\"token operator\">:</span> object<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> TriggerOpTypes<span class=\"token punctuation\">,</span>\n  key<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">,</span>\n  newValue<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">,</span>\n  oldValue<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">,</span>\n  oldTarget<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Map<span class=\"token operator\">&lt;</span><span class=\"token builtin\">unknown</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">unknown</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> Set<span class=\"token operator\">&lt;</span><span class=\"token builtin\">unknown</span><span class=\"token operator\">></span></span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> depsMap <span class=\"token operator\">=</span> targetMap<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>depsMap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// never been tracked</span>\n    <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> effects <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token operator\">&lt;</span>ReactiveEffect<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> computedRunners <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token operator\">&lt;</span>ReactiveEffect<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">effectsToAdd<span class=\"token operator\">:</span> Set<span class=\"token operator\">&lt;</span>ReactiveEffect<span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>effectsToAdd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      effectsToAdd<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">effect</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>effect <span class=\"token operator\">!==</span> activeEffect <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>shouldTrack<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>effect<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>computed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            computedRunners<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>effect<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            effects<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>effect<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// the effect mutated its own dependency during its execution.</span>\n          <span class=\"token comment\">// this can be caused by operations like foo.value++</span>\n          <span class=\"token comment\">// do not trigger or we end in an infinite loop</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span> <span class=\"token operator\">===</span> TriggerOpTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">CLEAR</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// collection being cleared</span>\n    <span class=\"token comment\">// trigger all effects for target</span>\n    depsMap<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">===</span> <span class=\"token string\">'length'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    depsMap<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dep<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">===</span> <span class=\"token string\">'length'</span> <span class=\"token operator\">||</span> key <span class=\"token operator\">>=</span> <span class=\"token punctuation\">(</span>newValue <span class=\"token keyword\">as</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>dep<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// schedule runs for SET | ADD | DELETE</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">!==</span> <span class=\"token keyword\">void</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>depsMap<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// also run for iteration key on ADD | DELETE | Map.SET</span>\n    <span class=\"token keyword\">const</span> isAddOrDelete <span class=\"token operator\">=</span>\n      <span class=\"token keyword\">type</span> <span class=\"token operator\">===</span> TriggerOpTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">ADD</span> <span class=\"token operator\">||</span>\n      <span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span> <span class=\"token operator\">===</span> TriggerOpTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">DELETE</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n      isAddOrDelete <span class=\"token operator\">||</span>\n      <span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span> <span class=\"token operator\">===</span> TriggerOpTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">SET</span> <span class=\"token operator\">&amp;&amp;</span> target <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>depsMap<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">'length'</span> <span class=\"token operator\">:</span> <span class=\"token constant\">ITERATE_KEY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isAddOrDelete <span class=\"token operator\">&amp;&amp;</span> target <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>depsMap<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token constant\">MAP_KEY_ITERATE_KEY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">run</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">effect<span class=\"token operator\">:</span> ReactiveEffect</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__DEV__ <span class=\"token operator\">&amp;&amp;</span> effect<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>onTrigger<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      effect<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span><span class=\"token function\">onTrigger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        effect<span class=\"token punctuation\">,</span>\n        target<span class=\"token punctuation\">,</span>\n        key<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">type</span><span class=\"token punctuation\">,</span>\n        newValue<span class=\"token punctuation\">,</span>\n        oldValue<span class=\"token punctuation\">,</span>\n        oldTarget\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>effect<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>scheduler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      effect<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span><span class=\"token function\">scheduler</span><span class=\"token punctuation\">(</span>effect<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Important: computed effects must be run first so that computed getters</span>\n  <span class=\"token comment\">// can be invalidated before any normal effects that depend on them are run.</span>\n  computedRunners<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>run<span class=\"token punctuation\">)</span>\n  effects<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>run<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"effectfn-options\" style=\"position:relative;\"><a href=\"#effectfn-options\" aria-label=\"effectfn options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>effect(fn, options)</h2>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> effect<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n  <span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span>\n  options<span class=\"token operator\">:</span> ReactiveEffectOptions <span class=\"token operator\">=</span> <span class=\"token constant\">EMPTY_OBJ</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ReactiveEffect<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isEffect</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fn <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">.</span>raw\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> effect <span class=\"token operator\">=</span> <span class=\"token function\">createReactiveEffect</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>options<span class=\"token punctuation\">.</span>lazy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> effect\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">function</span> createReactiveEffect<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n  <span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span>\n  options<span class=\"token operator\">:</span> ReactiveEffectOptions\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ReactiveEffect<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">effect</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">reactiveEffect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>effect<span class=\"token punctuation\">.</span>active<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> options<span class=\"token punctuation\">.</span>scheduler <span class=\"token operator\">?</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">:</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>effectStack<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>effect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">cleanup</span><span class=\"token punctuation\">(</span>effect<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">enableTracking</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        effectStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>effect<span class=\"token punctuation\">)</span>\n        activeEffect <span class=\"token operator\">=</span> effect\n        <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n        effectStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">resetTracking</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        activeEffect <span class=\"token operator\">=</span> effectStack<span class=\"token punctuation\">[</span>effectStack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> ReactiveEffect\n  effect<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> uid<span class=\"token operator\">++</span>\n  effect<span class=\"token punctuation\">.</span>_isEffect <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n  effect<span class=\"token punctuation\">.</span>active <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n  effect<span class=\"token punctuation\">.</span>raw <span class=\"token operator\">=</span> fn\n  effect<span class=\"token punctuation\">.</span>deps <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  effect<span class=\"token punctuation\">.</span>options <span class=\"token operator\">=</span> options\n  <span class=\"token keyword\">return</span> effect\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"对比三个函数\" style=\"position:relative;\"><a href=\"#%E5%AF%B9%E6%AF%94%E4%B8%89%E4%B8%AA%E5%87%BD%E6%95%B0\" aria-label=\"对比三个函数 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>对比三个函数</h2>\n<table>\n<thead>\n<tr>\n<th>过程</th>\n<th>shouldTrack/activeEffect</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">track</code></td>\n<td><font color=\"blue\">if (!shouldTrack || activeEffect === undefined) return</font></td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">trigger</code></td>\n<td>add 里面有个判断：<font color=\"blue\">if (!shouldTrack || effect !== activeEffect)`</font>才会继续往下执行添加操作</td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">effect</code></td>\n<td><code class=\"language-text\">effectStack.push(effect)</code><br /><code class=\"language-text\">activeEffect = effect</code><br />// enable tracking<br /><code class=\"language-text\">trackStack.push(shouldTrack)</code><br /><code class=\"language-text\">shouldTrack = true</code></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>对下面测试代码逐行分析：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> dummy\n<span class=\"token keyword\">const</span> counter <span class=\"token operator\">=</span> <span class=\"token function\">r</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> num<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>dummy <span class=\"token operator\">=</span> counter<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">,</span> counter<span class=\"token punctuation\">,</span> <span class=\"token string\">'before'</span><span class=\"token punctuation\">)</span>\ncounter<span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> <span class=\"token number\">7</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">,</span> <span class=\"token string\">'after'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ol>\n<li><code class=\"language-text\">const counter = r({sum: 0})</code>\n这里将 { sum: 0 } reactive 代理之后赋值给了  <code class=\"language-text\">counter</code> 也就是说这个 <code class=\"language-text\">counter</code> 是个 <code class=\"language-text\">Proxy</code>：<img src=\"http://qiniu.ii6g.com/1589705626.png?imageMogr2/thumbnail/!100p\"></li>\n<li>\n<p><code class=\"language-text\">effect(() =&gt; (dummy = counter.num))</code>\n在这里调用 <code class=\"language-text\">effect(fn)</code> 注册了一个 updater，里面用到了 <code class=\"language-text\">counter.num</code> 那么就会触发 <code class=\"language-text\">counter.num</code> 的 <code class=\"language-text\">proxy get</code>，然后会触发 <code class=\"language-text\">track()</code> 收集依赖:\n<img src=\"http://qiniu.ii6g.com/1589705890.png?imageMogr2/thumbnail/!100p\">\n并且我们从图中结果可知， fn 实际被立即执行了一次，这是 <code class=\"language-text\">effect</code> 函数里面的操作。\n按预期，这里的 fn 应该会被收集到 counter.num 的 deps 中。\n我们在 <code class=\"language-text\">track()</code> 最后加上打印</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dep<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>activeEffect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   dep<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>activeEffect<span class=\"token punctuation\">)</span>\n   activeEffect<span class=\"token operator\">?.</span>deps<span class=\"token operator\">?.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>dep<span class=\"token punctuation\">)</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dep<span class=\"token punctuation\">,</span> activeEffect<span class=\"token punctuation\">.</span>deps<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span></code></pre></div>\n<p>结果：<img src=\"http://qiniu.ii6g.com/1589706174.png?imageMogr2/thumbnail/!100p\"></p>\n<p>即，activeEffect.deps 以及收集到了 <code class=\"language-text\">counter.num</code> 的依赖: <code class=\"language-text\">Map(1) {&quot;num&quot; =&gt; Set(1)}</code>。\n<img src=\"http://qiniu.ii6g.com/1589706408.png?imageMogr2/thumbnail/!100p\"></p>\n</li>\n<li><code class=\"language-text\">console.log(dummy, counter, &#39;before&#39;)</code>\n经过上面的结果分析，在第2步的时候，确实已经收集到了 counter.num 的 fn:updater，且存放到了 <code class=\"language-text\">targetMap -&gt; despMap -&gt; num:Set(1)</code> 中。\n因此这里的输出内容是： <strong>0 “num” “get…”</strong> 没什么毛病，那继续往下，问题或许处在设置的时候???</li>\n<li><code class=\"language-text\">counter.num = 7</code>\n最后发现问题所在，原始是个超级低级的问题(捂脸<del>，没脸见人</del>~)。\n没有创建 <code class=\"language-text\">set handler</code> 并添加到 mutableHandlers 里面。\n只要添加两句：\n<code class=\"language-text\">const set = createSetter()</code>\n然后：\n<code class=\"language-text\">const mutableHandlers = { get, set }</code>\n就能得到我们想要的结果。</li>\n<li>\n<p><code class=\"language-text\">console.log(dummy, &#39;after&#39;)</code>\n最后看下最终输出：<img src=\"http://qiniu.ii6g.com/1589707939.png?imageMogr2/thumbnail/!100p\"></p>\n<p>1 <code class=\"language-text\">effect(() =&gt; (dummy = counter.num))</code>取值时 proxy get 里面的输出</p>\n<p>2： 设置值为 7 之前的输出</p>\n<p>3： 设置值当中的输出\n4： 最后一个log取值 proxy get 的输出\n5： 最后 log 的输出内容</p>\n</li>\n</ol>\n<p>虽然犯了个非常低级的错误，但也正因为这个低级错误，促使自己一步步的去跟踪 <code class=\"language-text\">get-&gt;track</code>, <code class=\"language-text\">set-&gt;trigger</code>, <code class=\"language-text\">effect</code> 整个过程，从而了解了依赖收集，updater 触发原理。</p>\n<h1 id=\"小结-1\" style=\"position:relative;\"><a href=\"#%E5%B0%8F%E7%BB%93-1\" aria-label=\"小结 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>小结 1</h1>\n<p>到此一个比较完整的响应式代码也算告一段落，这里贴一下简化后可运行的完整代码(<a href=\"https://github.com/gcclll/vue-next-code-read/blob/master/packages/reactive.js\">reactive.js</a>)如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">hasChanged</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> oldValue</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  value <span class=\"token operator\">!==</span> oldValue <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">===</span> value <span class=\"token operator\">||</span> oldValue <span class=\"token operator\">===</span> oldValue<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> __DEV__ <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n<span class=\"token keyword\">let</span> shouldTrack <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">ITERATE_KEY</span> <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span>__DEV__ <span class=\"token operator\">?</span> <span class=\"token string\">'iterate'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">MAP_KEY_ITERATE_KEY</span> <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span>__DEV__ <span class=\"token operator\">?</span> <span class=\"token string\">'Map key iterate'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> effectStack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> trackStack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> uid <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">const</span> reactiveToRaw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> rawToReactive <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// baseHandlers.ts start</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">get</span> <span class=\"token operator\">=</span> <span class=\"token function\">createGetter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">set</span> <span class=\"token operator\">=</span> <span class=\"token function\">createSetter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 存放目标依赖的 map： target -> depsMap</span>\n<span class=\"token comment\">// 一个目标，有自己的一个 map 存放依赖</span>\n<span class=\"token keyword\">const</span> targetMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> activeEffect <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  _isEffect<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  id<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  active<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  raw<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  deps<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">toRaw</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">observed</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> reactiveToRaw<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>observed<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> observed\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 如果是个 activeEffect 类型，那么其执行函数应该是 fn.raw</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fn<span class=\"token operator\">?.</span>_isEffect <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fn <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">.</span>raw\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 接下来要创建一个 effect</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">_effect</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">reactiveEffect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_effect<span class=\"token punctuation\">.</span>active<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 非激活状态</span>\n      <span class=\"token keyword\">return</span> options<span class=\"token punctuation\">.</span>scheduler <span class=\"token operator\">?</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">:</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>effectStack<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>_effect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 如果栈中不包含当前的 effect，即没有注册过该 effect</span>\n      <span class=\"token comment\">// 注册过就不需要重复注册了</span>\n      <span class=\"token comment\">// 添加前先执行清理工作 cleanup -> effect.deps[i].delete(effect)</span>\n\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        shouldTrack <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n        effectStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>_effect<span class=\"token punctuation\">)</span>\n        activeEffect <span class=\"token operator\">=</span> _effect\n        <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// fn 执行异常了，移除对应的 effect</span>\n        effectStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">const</span> last <span class=\"token operator\">=</span> trackStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// 还原状态值</span>\n        shouldTrack <span class=\"token operator\">=</span> last <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> last\n        <span class=\"token comment\">// 还原当前激活的 effect</span>\n        activeEffect <span class=\"token operator\">=</span> effectStack<span class=\"token punctuation\">[</span>effectStack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  _effect<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> uid<span class=\"token operator\">++</span>\n  _effect<span class=\"token punctuation\">.</span>_isEffect <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n  _effect<span class=\"token punctuation\">.</span>active <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n  _effect<span class=\"token punctuation\">.</span>raw <span class=\"token operator\">=</span> fn\n  _effect<span class=\"token punctuation\">.</span>deps <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  _effect<span class=\"token punctuation\">.</span>options <span class=\"token operator\">=</span> options\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>options<span class=\"token punctuation\">.</span>lazy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">_effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> _effect\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">,</span> oldTarget</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// step1: 检测是否被 track 过，没有根本就没有依赖</span>\n  <span class=\"token keyword\">const</span> depsMap <span class=\"token operator\">=</span> targetMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>depsMap<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n\n  <span class=\"token comment\">// step2: 将 dep 加入到 effects</span>\n  <span class=\"token comment\">// 创建两个 effects, 一个普通的，一个计算属性</span>\n  <span class=\"token keyword\">const</span> effects <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> computedRunners <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 根据 effect 的选项 computed 决定是添加到那个 Set 中</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">effectsToAdd</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    effectsToAdd<span class=\"token operator\">?.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\">effect</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token punctuation\">(</span>effect <span class=\"token operator\">!==</span> activeEffect <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>shouldTrack<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n        <span class=\"token punctuation\">(</span>effect<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>computed\n          <span class=\"token operator\">?</span> computedRunners<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>effect<span class=\"token punctuation\">)</span>\n          <span class=\"token operator\">:</span> effects<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>effect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// if ... clear</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// TODO 清空动作，触发所有依赖</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 数组长度变化</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// TODO 触发更长度变化有关的所有依赖</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 例如： SET | ADD | DELETE 操作</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">!==</span> <span class=\"token keyword\">void</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>depsMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> isAddOrDelete <span class=\"token operator\">=</span>\n      type <span class=\"token operator\">===</span> <span class=\"token string\">'add'</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'delete'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isAddOrDelete <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'set'</span> <span class=\"token operator\">&amp;&amp;</span> target <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 删除或添加操作，或者 map 的设置操作</span>\n      <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>depsMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">'length'</span> <span class=\"token operator\">:</span> <span class=\"token constant\">ITERATE_KEY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Map 的添加或删除操作</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isAddOrDelete <span class=\"token operator\">&amp;&amp;</span> target <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>depsMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token constant\">MAP_KEY_ITERATE_KEY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// step3: 执行 effects 中所有的 dep</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">run</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">effect</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 选项提供了自己的调度器，执行自己的</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>effect<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>scheduler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      effect<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span><span class=\"token function\">scheduler</span><span class=\"token punctuation\">(</span>effect<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 触发应该触发的依赖</span>\n  computedRunners<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>run<span class=\"token punctuation\">)</span>\n  effects<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>run<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// trackType -> get, has, iterate</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">track</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>shouldTrack <span class=\"token operator\">||</span> activeEffect <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n  <span class=\"token comment\">// ...省略1 检测 shouldTrack 和 activeEffect 标记</span>\n\n  <span class=\"token comment\">// 取 target 自己的依赖 map ，如果没有说明是首次，需要给它创建一个</span>\n  <span class=\"token comment\">// 空的集合，这里使用 Map 而不是 WeakMap，为的是强引用，它涉及到</span>\n  <span class=\"token comment\">// 数据的更新触发 UI 渲染，因此不该使用 WeakMap，否则可能会导致依赖丢失问题</span>\n  <span class=\"token keyword\">let</span> depsMap <span class=\"token operator\">=</span> targetMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>depsMap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    targetMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>depsMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 接下来对 key 取其依赖</span>\n  <span class=\"token comment\">// 如果属性的依赖不存在，说明该对象是首次使用，需要创建其依赖库</span>\n  <span class=\"token comment\">// 且这里使用了 `Set` 是为了避免重复注册依赖情况，避免数据的更新导致重复触发</span>\n  <span class=\"token comment\">// 同一个 update 情况</span>\n  <span class=\"token keyword\">let</span> dep <span class=\"token operator\">=</span> depsMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dep<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    depsMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>dep <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 注册实际的 update: activeEffect 操作</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dep<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>activeEffect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    dep<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>activeEffect<span class=\"token punctuation\">)</span>\n    activeEffect<span class=\"token operator\">?.</span>deps<span class=\"token operator\">?.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>dep<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">createGetter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">isReadonly <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> shallow <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 很明显这个 proxy handler get, 简化之后...</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> receiver</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// ... 省略1，如果是数组，且是 includes, indexOf, lastIndexOf 操作</span>\n    <span class=\"token comment\">// 直接返回它对应的 res</span>\n    <span class=\"token comment\">// ... 省略2，如果是符号属性，直接返回 res</span>\n\n    <span class=\"token comment\">// ... 省略3, 浅 reactive，不支持嵌套</span>\n\n    <span class=\"token comment\">// ... 省略4，isRef 类型，判断是数组还是对象，数组执行 track(...), 对象返回 res.value</span>\n\n    <span class=\"token comment\">// 非只读属性，执行 track()，收集依赖</span>\n    <span class=\"token operator\">!</span>isReadonly <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">track</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token string\">'get...'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// return res</span>\n    <span class=\"token comment\">// 非对象直接返回原结果，如果是对象区分只读与否</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> res <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">&amp;&amp;</span> res <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span>\n      <span class=\"token operator\">?</span> isReadonly\n        <span class=\"token operator\">?</span> <span class=\"token comment\">// need to lazy access readonly and reactive here to avoid</span>\n          <span class=\"token comment\">// circular dependency</span>\n          res <span class=\"token comment\">// ... readonly(res)</span>\n        <span class=\"token operator\">:</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> toProxy<span class=\"token punctuation\">,</span> toRaw<span class=\"token punctuation\">,</span> mutableHandlers<span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">:</span> res\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createSetter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">shallow <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 标准的 proxy set</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> receiver</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 取旧值</span>\n    <span class=\"token keyword\">const</span> oldValue <span class=\"token operator\">=</span> target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\">// 先不管 shallow mode</span>\n\n    <span class=\"token comment\">// 还记得 reactive 里面的 toRaw啊，对象这里就是取出</span>\n    <span class=\"token comment\">// value 的原始对象 target，前提是它有 reactive() 过</span>\n    <span class=\"token comment\">// 才会被存入到 toRaw: observed -> target 中</span>\n    <span class=\"token comment\">// 暂时简化成： toRaw.get(value)</span>\n    value <span class=\"token operator\">=</span> <span class=\"token function\">toRaw</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// ... 省略，ref 检测</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> reactiveToRaw<span class=\"token punctuation\">,</span> <span class=\"token string\">'set'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> hadKey <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 先执行设置原子操作</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> receiver<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 只有对象是它自身的时候，才触发 dep-update(排除原型链)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">===</span> <span class=\"token function\">toRaw</span><span class=\"token punctuation\">(</span>receiver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hadKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 新增属性操作</span>\n        <span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">hasChanged</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 值改变操作,排除 NaN !== NaN 情况</span>\n        <span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">'set'</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> result\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> mutableHandlers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">get</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">set</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// baseHandlers.ts end</span>\n\n<span class=\"token keyword\">const</span> collectionTypes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>Set<span class=\"token punctuation\">,</span> Map<span class=\"token punctuation\">,</span> WeakMap<span class=\"token punctuation\">,</span> WeakSet<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> toProxy<span class=\"token punctuation\">,</span> toRaw<span class=\"token punctuation\">,</span> baseHandlers<span class=\"token punctuation\">,</span> collectionHandlers</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 简化</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> target <span class=\"token operator\">!==</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> target\n\n  <span class=\"token comment\">//... isVue, VNode...</span>\n\n  <span class=\"token keyword\">let</span> observed <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n\n  <span class=\"token keyword\">const</span> handlers <span class=\"token operator\">=</span> collectionTypes<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">?</span> collectionHandlers\n    <span class=\"token operator\">:</span> baseHandlers\n\n  observed <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> handlers<span class=\"token punctuation\">)</span>\n  toProxy<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> observed<span class=\"token punctuation\">)</span>\n  toRaw<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>observed<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> observed\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">r</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> rawToReactive<span class=\"token punctuation\">,</span> reactiveToRaw<span class=\"token punctuation\">,</span> mutableHandlers<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'effect fn'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token function\">effect</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'after effect'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 使用示例</span>\n<span class=\"token keyword\">let</span> dummy\n<span class=\"token keyword\">const</span> counter <span class=\"token operator\">=</span> <span class=\"token function\">r</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> num<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>dummy <span class=\"token operator\">=</span> counter<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">,</span> counter<span class=\"token punctuation\">,</span> <span class=\"token string\">'before'</span><span class=\"token punctuation\">)</span>\ncounter<span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> <span class=\"token number\">7</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">,</span> counter<span class=\"token punctuation\">,</span> <span class=\"token string\">'after'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>核心函数：</p>\n<table>\n<thead>\n<tr>\n<th>函数名</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">createGetter-&gt;get</code></td>\n<td>创建 proxy 的 get handler，里面会调用 track 收集依赖</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">createSetter-&gt;set</code></td>\n<td>创建 proxy 的 set handler，里面会调用 trigger 触发 targetMap>depsMap>dep:Set依赖执行</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">track(target, type, key)</code></td>\n<td>收集 target 对象或 target[key] 属性的依赖</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">trigger(target, type, key?, newValue?, oldValue?, oldTarget?)</code></td>\n<td>触发 target 对象的依赖调用</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">effect(fn, options)</code></td>\n<td>注册reactive属性的updater</td>\n</tr>\n</tbody>\n</table>\n<p>涉及到的核心属性：</p>\n<p>ReactiveEffect 类型定义：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ReactiveEffect</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span>\n  _isEffect<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  active<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span>\n  <span class=\"token function-variable function\">raw</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">T</span>\n  deps<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>Dep<span class=\"token operator\">></span>\n  options<span class=\"token operator\">:</span> ReactiveEffectOptions\n<span class=\"token punctuation\">}</span></code></pre></div>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>类型</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">activeEffect</code></td>\n<td><code class=\"language-text\">ReactiveEffect</code></td>\n<td>记录当前的 effect，在 <code class=\"language-text\">effect()</code>注册updater的时候置为当前的 RE，在 <code class=\"language-text\">get-&gt;track</code> 里面添加到 targetMap->depsMap->dep 中，且同时更新自己的 <code class=\"language-text\">activeEffect.deps.push(dep)</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">effectStack</code></td>\n<td><code class=\"language-text\">Array&lt;ReactiveEffect&gt;</code></td>\n<td>存放所有的 <code class=\"language-text\">ReactiveEffect</code> 的数组，也就是说页面中所有的 <code class=\"language-text\">updater&lt;ReactiveEffect&gt;</code> 都是存在这里面。但是每个 updater 执行完之后就会被移出 <code class=\"language-text\">effectStack</code>，因为 <code class=\"language-text\">efffect()</code>调用里面有个 <code class=\"language-text\">try...finally</code> 无论结果如何都会被 pop 掉。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">shouldTrack</code></td>\n<td><code class=\"language-text\">Boolean</code></td>\n<td>用来追踪当前 effect->activeEffect 的状态</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">trackStack</code></td>\n<td><code class=\"language-text\">Array&lt;Boolean&gt;</code></td>\n<td>用来存放当前 effect 的 shouldTrack 状态值</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">targetMap</code></td>\n<td><code class=\"language-text\">WeakMap</code></td>\n<td>存放被 reactive 对象依赖的 Map，即：每个 target 在 targetMap 里面有自己的一个 depsMap，里面以 target => &#x3C;key, Set> 形式存在，key 表示 target 上的一个属性键，Set 存放了该 key 的所有依赖 dep。<img src=\"http://qiniu.ii6g.com/1589709260.png?imageMogr2/thumbnail/!100p\">层级关系：targetMap:WeakMap -> depsMap:Map -> dep:Set</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">depsMap</code></td>\n<td><code class=\"language-text\">Map</code></td>\n<td>target 对象里所有属性和其依赖对应的关系集合，如：counter.num 的依赖： <code class=\"language-text\">{ &quot;num&quot; =&gt; Set(1) }</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">reactiveToRaw</code></td>\n<td><code class=\"language-text\">WeakMap</code></td>\n<td>作为 reactive 的第三个参数 toRaw，保存了 observed->target 关系的 WeakMap。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">rawToReactive</code></td>\n<td><code class=\"language-text\">WeakMap</code></td>\n<td>作为 reactive 的第二个参数 toProxy，保存了 target->observed 关系的 WeakMap，和 <code class=\"language-text\">reactiveToRaw</code> 刚好相反。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">uid</code></td>\n<td><code class=\"language-text\">Number</code></td>\n<td>每个 effect 都有一个唯一的 id，一直递增。</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"支持数组-reactive\" style=\"position:relative;\"><a href=\"#%E6%94%AF%E6%8C%81%E6%95%B0%E7%BB%84-reactive\" aria-label=\"支持数组 reactive permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>支持数组 reactive</h1>\n<p>在这之前都是在对象基础上做的测试，并没有增加数组的支持，比如：jest(所有测试用例都来自官方仓库) -></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'嵌套的 reactives'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> original <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      nested<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        foo<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      array<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> bar<span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> observed <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">isReactive</span><span class=\"token punctuation\">(</span>observed<span class=\"token punctuation\">.</span>nested<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">isReactive</span><span class=\"token punctuation\">(</span>observed<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">isReactive</span><span class=\"token punctuation\">(</span>observed<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>测试结果：</p>\n<p><img src=\"http://qiniu.ii6g.com/1589852337.png?imageMogr2/thumbnail/!100p\"></p>\n<p>也就是说做到现在，并不支持数组的 reactive，这也是这节将要完善的点。</p>\n<ol>\n<li>\n<p>数组三个方法(<code class=\"language-text\">includes, indexOf, lastIndexOf</code>)的依赖收集：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 数组三个方法的处理</span>\n<span class=\"token keyword\">const</span> arrayInstrumentations <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 兼容数组三个索引方法，收集他们相关的依赖</span>\n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">[</span><span class=\"token string\">'includes'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'indexOf'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'lastIndexOf'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n arrayInstrumentations<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> arra <span class=\"token operator\">=</span> <span class=\"token function\">toRaw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> l <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> l<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token function\">track</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token comment\">// 使用原始方法执行一次(有可能是 reactive 的)</span>\n   <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> res <span class=\"token operator\">===</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\">// 如果结果失败，使用原始方法再执行一次</span>\n     <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>toRaw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">return</span> res\n   <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">createGetter -&gt; get</code> 的时候增加数组支持：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">createGetter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">isReadonly <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> shallow <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> receiver</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> targetIsArray <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>targetIsArray <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">hasOwn</span><span class=\"token punctuation\">(</span>arrayInstrumentations<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">return</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>arrayInstrumentations<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> receiver<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token comment\">// ...省略</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>到这里，我们已经可以正常收集到数组的依赖了，测试代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n   <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> reactive<span class=\"token punctuation\">,</span> effect<span class=\"token punctuation\">,</span> targetMap <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./packages/reactive.js'</span>\n   <span class=\"token keyword\">let</span> n\n   <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'vue'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'reactive'</span><span class=\"token punctuation\">]</span>\n   <span class=\"token keyword\">const</span> observed <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n   <span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> observed<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n \t<span class=\"token comment\">// 这里还可以添加多个依赖，比如：effect(() => (m = observed[0]))</span>\n \t<span class=\"token comment\">// 这样，targetMap>depsMap:arr>dep 里面就会有两个了 [f, f]</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>n<span class=\"token punctuation\">,</span> targetMap<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>输出结果：</p>\n<p><img src=\"/Users/simon/Library/Application%20Support/typora-user-images/image-20200519095740412.png\" alt=\"image-20200519095740412\"></p>\n<ul>\n<li><code class=\"language-text\">effect(() =&gt; (n = observed[0]))</code>会执行一次 <code class=\"language-text\">fn</code> ，即取了一次数组的 <code class=\"language-text\">0</code> 下标值，触发了 <code class=\"language-text\">get</code></li>\n<li>检测到是数组进入数组依赖收集程序<code class=\"language-text\">arrayInstrumentations</code> ，触发 <code class=\"language-text\">track</code> 收集依赖</li>\n</ul>\n<p>🙆‍♂️，依赖咱收集到了，第三步就是如何去触发它们了 >>>></p>\n</li>\n<li>\n<p>数组的 set->trigger 实际上已经支持了</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 触发 updater</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">,</span> oldTarget</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">// ...</span>\n\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'clear'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// ...</span>\n <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">===</span> <span class=\"token string\">'length'</span> <span class=\"token operator\">&amp;&amp;</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// ...</span>\n <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// 如果是数组，传入 key 是索引值，会进入这个 if 进行依赖收集</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">!==</span> <span class=\"token keyword\">void</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\">// 对象属性 deps</span>\n     <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>depsMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// ...</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>所以下面的示例：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n   <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> reactive<span class=\"token punctuation\">,</span> effect<span class=\"token punctuation\">,</span> targetMap <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./packages/reactive.js'</span>\n   <span class=\"token keyword\">let</span> n<span class=\"token punctuation\">,</span> m\n   <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'vue'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'reactive'</span><span class=\"token punctuation\">]</span>\n   <span class=\"token keyword\">const</span> observed <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n   <span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> observed<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">=</span> observed<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   observed<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'setter n'</span>\n   observed<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'setter m'</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> targetMap<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>输出结果(set 数组元素值的时候出发了 dep 更新 n, m 的值)：</p>\n</li>\n</ol>\n<p><img src=\"http://qiniu.ii6g.com/1589858380.png?imageMogr2/thumbnail/!100p\"></p>\n<ol start=\"4\">\n<li>\n<p>最后 jest 测试结果(失败…):\n原因是之前的 <code class=\"language-text\">createGetter</code>代码又有个问题，返回的时候检测结果的时候，递归 reactive 传递了 target，应该是 res 才对：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">return</span> res <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> res <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span>\n     <span class=\"token operator\">?</span> isReadonly\n       <span class=\"token operator\">?</span> <span class=\"token function\">readonly</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 修正：target -> res</span>\n       <span class=\"token operator\">:</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 修正：target -> res</span>\n     <span class=\"token operator\">:</span> res</code></pre></div>\n<p>修正之后 jest 结果(:perfect)：</p>\n<blockquote>\n<p>☁  vue-next-code-read [master] ⚡  jest\nPASS  packages/<strong>tests</strong>/reactive/reactive.spec.js\nreactivity/reactive\n✓ Object (4 ms)\n✓ 嵌套的 reactives (1 ms)</p>\n<p>Test Suites: 1 passed, 1 total\nTests:       2 passed, 2 total\nSnapshots:   0 total\nTime:        7.547 s\nRan all test suites.\n☁  vue-next-code-read [master] ⚡</p>\n</blockquote>\n</li>\n</ol>\n<p>OK，数组的 reactive 完成。</p>\n<hr>\n<h2 id=\"jest-测试：\" style=\"position:relative;\"><a href=\"#jest-%E6%B5%8B%E8%AF%95%EF%BC%9A\" aria-label=\"jest 测试： permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>jest 测试：</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">☁  vue-next-code-read [master] ⚡  jest\nFAIL  packages/__tests__/reactive/reactive.spec.js\nreactivity/reactive\n✓ Object (5 ms)\n✓ 嵌套的 reactives (1 ms)\n✓ observed value should proxy mutations to original (Object) (1 ms)\n✓ setting a property with an unobserved value should wrap with reactive (1 ms)\n✕ observing already observed value should return same Proxy (4 ms)\n✕ should not pollute original object with Proxies (2 ms)\n✕ unwrap\n✓ should not unwrap Ref&lt;T&gt;\n✓ should unwrap computed refs\n✕ non-observable values (36 ms)\n✕ markRaw\n✕ should not observe frozen objects (1 ms)\nshallowReactive\n✕ should not make non-reactive properties reactive\n✕ should keep reactive properties reactive</code></pre></div>\n<ol>\n<li>\n<p><font color=\"red\">✕ observing already observed value should return same Proxy (4 ms)</font>\n这个是因为 <code class=\"language-text\">createReactiveObject()</code>里面判断的时候判断错误：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>toRaw<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>observed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 修正成：target</span>\n <span class=\"token keyword\">return</span> target\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>修改后测试通过。</p>\n</li>\n<li>\n<p><font color=\"red\">✕ should not pollute original object with Proxies (5 ms)</font>\n修改：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">createSetter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">shallow <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> receiver</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// 新增判断，如果是递归 reactive 设置的时候取原始值去传递给 reflect</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>shallow<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\">// 比如：value 如果是 Observed，那么从 reactiveToRaw 中取 proxy </span>\n     <span class=\"token comment\">// 之前的那个 target 出来，给 reflect</span>\n     value <span class=\"token operator\">=</span> <span class=\"token function\">toRaw</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n     <span class=\"token comment\">// TODO !shallow is ref</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token comment\">// const res = Reflect.set(...arguments)</span>\n   <span class=\"token comment\">// 这里就不能直接 ...arguments 了，都将最新的 value 传递下去</span>\n   <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> receiver<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>修改后测试通过。</p>\n</li>\n<li><font color=\"red\">✕ unwrap</font>\n是因为没有导出 <code class=\"language-text\">toRaw</code> 函数导致的，导入下就好了。</li>\n<li>\n<p><font color=\"red\">✕ non-observable values (8 ms)</font>\n需要改些下测试用例：源码里面加了 expect -> toHaveBeenWarnedLast 为了更友好的提示。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/// 修改后：</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> s <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li><font color=\"red\"> ✕ markRaw</font>\n在 <code class=\"language-text\">createReactiveObject()</code> 中增加 <code class=\"language-text\">canObserve(target)</code> 检测解决，因为检测中就有一项 <code class=\"language-text\">rawValues.has(value)</code></li>\n<li><font color=\"red\">✕ should not observe frozen objects (1 ms)</font>\n在 <code class=\"language-text\">createReactiveObject()</code> 中增加 <code class=\"language-text\">canObserve(target)</code> 检测解决。</li>\n<li><font color=\"red\">✕ should not make non-reactive properties reactive</font>\n没导出 <code class=\"language-text\">shallowReactive</code>。</li>\n<li>\n<p><font color=\"red\">✕ should keep reactive properties reactive</font></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 粗心的锅，这个写反了</span>\n<span class=\"token keyword\">const</span> shallowSet <span class=\"token operator\">=</span> <span class=\"token function\">createGetter</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> shallowGet <span class=\"token operator\">=</span> <span class=\"token function\">createSetter</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 修正：</span>\n<span class=\"token keyword\">const</span> shallowSet <span class=\"token operator\">=</span> <span class=\"token function\">createSetter</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> shallowGet <span class=\"token operator\">=</span> <span class=\"token function\">createSetter</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ol>\n<p>修正上述问题之后 jest 结果：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">vue-next-code-read [master] ⚡  jest\nPASS  packages/__tests__/reactive/reactive.spec.js\nreactivity/reactive\n✓ Object (6 ms)\n✓ 嵌套的 reactives\n✓ observed value should proxy mutations to original (Object) (1 ms)\n✓ setting a property with an unobserved value should wrap with reactive (1 ms)\n✓ observing already observed value should return same Proxy\n✓ should not pollute original object with Proxies (1 ms)\n✓ unwrap\n✓ should not unwrap Ref&lt;T&gt; (1 ms)\n✓ should unwrap computed refs\n✓ non-observable values (2 ms)\n✓ markRaw (1 ms)\n✓ should not observe frozen objects (1 ms)\nshallowReactive\n✓ should not make non-reactive properties reactive\n✓ should keep reactive properties reactive\n\nTest Suites: 1 passed, 1 total\nTests:       14 passed, 14 total\nSnapshots:   0 total\nTime:        6.436 s\nRan all test suites.</code></pre></div>\n<p><span id=\"code1\">阶段代码链接 <a href=\"https://github.com/gcclll/vue-next-code-read/blob/master/bakups/reactive_with_array.js\">reactive<em>with</em>array.js</a>  代码</span></p>\n<h1 id=\"handlers续basehandlers-的-delete-has-ownkeys\" style=\"position:relative;\"><a href=\"#handlers%E7%BB%ADbasehandlers-%E7%9A%84-delete-has-ownkeys\" aria-label=\"handlers续basehandlers 的 delete has ownkeys permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>handlers续(baseHandlers 的 delete, has, ownKeys)</h1>\n<p>前面完成了 <code class=\"language-text\">proxy-set</code> 和 <code class=\"language-text\">proxy-get</code>，这节继续完成其他的 <code class=\"language-text\">proxy</code>，包含：</p>\n<ol>\n<li><code class=\"language-text\">deleteProperty(target, key)</code></li>\n<li><code class=\"language-text\">ownKeys(target)</code></li>\n<li><code class=\"language-text\">has(target, key)</code></li>\n</ol>\n<h2 id=\"delete\" style=\"position:relative;\"><a href=\"#delete\" aria-label=\"delete permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>delete</h2>\n<p>在之前实现的基础上 <a href=\"https://github.com/gcclll/vue-next-code-read/blob/master/bakups/reactive_with_array.js\">reactive.js</a> 增加 delete proxy，这之前先来看下现有的功能是否支持 delete 操作。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> foo<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> bar<span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> n <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> dum\n<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'updating...'</span><span class=\"token punctuation\">)</span>\ndum <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span>bar\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">/* console.log(targetMap.get(target), dum, 'map') */</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dum <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'before'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">delete</span> n<span class=\"token punctuation\">.</span>bar  <span class=\"token comment\">// code 1</span>\n<span class=\"token comment\">// n.bar = 3 // code2</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dum <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'after'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这里先注册一个 updater，后面通过更新 <code class=\"language-text\">n.bar</code> 值，来触发 updater，结果：</p>\n<blockquote>\n<p>updating…\n{dum: 2} “before”\nupdating…\n{dum: 3} “after”</p>\n</blockquote>\n<p>结果如我们所料，然后把 code1 放开，注释掉 code2，理论上也会触发 updater：</p>\n<blockquote>\n<p>updating…\n{dum: 2} “before”\n{dum: 2} “after”</p>\n</blockquote>\n<p>实际结果非我们所料，因为还没实现…</p>\n<p>接下来看下要实现 delete proxy 需要哪些步骤 >>>>>></p>\n<ol>\n<li>\n<p>声明  delete proxy handler : <code class=\"language-text\">deleteProperty</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// delete proxy</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">deleteProperty</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> hadKey <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">const</span> oldValue <span class=\"token operator\">=</span> target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n <span class=\"token comment\">// 操作先执行下去</span>\n <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">deleteProperty</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n <span class=\"token comment\">// 如果执行成功且自身存在该属性，排除原型链操作</span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">&amp;&amp;</span> hadKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// 直接触发 updaters</span>\n   <span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">'delete'</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">return</span> result <span class=\"token comment\">// 不能丢，必须反馈删除结果 boolean</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>加入到<code class=\"language-text\">mutableHandlers</code> </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> mutableHandlers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">get</span><span class=\"token punctuation\">,</span>\n <span class=\"token keyword\">set</span><span class=\"token punctuation\">,</span>\n deleteProperty\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<p>只要经过上面简单的两步就实现了 <code class=\"language-text\">delete</code> 操作代理，但执行结果却报错了(明明和源码一样啊，悲催〒▽〒!!!)</p>\n<p><img src=\"http://qiniu.ii6g.com/1590046965.png?imageMogr2/thumbnail/!100p\"></p>\n<p>从输出可以看到， delete 操作确实触发了 updater，最后 <code class=\"language-text\">dum: undefined</code> 也证明了这点。</p>\n<p>至于报错…，(⊙o⊙)…，(⊙o⊙)…，少了个 <code class=\"language-text\">return result</code> 将删除操作结果返回。</p>\n<h2 id=\"has\" style=\"position:relative;\"><a href=\"#has\" aria-label=\"has permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>has</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">track</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">'has'</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>更新 mutableHandlers:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> mutableHandlers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">get</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">set</span><span class=\"token punctuation\">,</span>\n  deleteProperty<span class=\"token punctuation\">,</span>\n  has\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>测试：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> foo<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> bar<span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> n <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> dum<span class=\"token punctuation\">,</span> has\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">updater</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'updating...'</span><span class=\"token punctuation\">)</span>\n  dum <span class=\"token operator\">=</span> <span class=\"token string\">'bar'</span> <span class=\"token keyword\">in</span> n\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span>updater<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> dep <span class=\"token operator\">=</span> targetMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> fn <span class=\"token keyword\">of</span> dep<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">.</span>raw <span class=\"token operator\">===</span> updater<span class=\"token punctuation\">,</span> <span class=\"token string\">'deps'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dum <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'before'</span><span class=\"token punctuation\">)</span>\nn<span class=\"token punctuation\">.</span>bar <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dum <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'after'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>结果：</p>\n<ol>\n<li><code class=\"language-text\">&#39;bar&#39; in n</code> 收集依赖 <code class=\"language-text\">updater</code></li>\n<li><code class=\"language-text\">n.bar = 3</code> 触发 <code class=\"language-text\">ownKeys</code> 收集到的 <code class=\"language-text\">updater</code></li>\n</ol>\n<blockquote>\n<p>updating…\n() => {\nconsole.log(‘updating…’)\ndum = ‘bar’ in n\n} true “deps”\n{dum: true} “before”\nupdating…\n{dum: true} “after”</p>\n</blockquote>\n<h2 id=\"ownkeys\" style=\"position:relative;\"><a href=\"#ownkeys\" aria-label=\"ownkeys permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ownKeys</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">ownKeys</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">track</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">'iterate'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">ITERATE_KEY</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ownKeys</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>更新 mutableHandlers:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> mutableHandlers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">get</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">set</span><span class=\"token punctuation\">,</span>\n  deleteProperty<span class=\"token punctuation\">,</span>\n  has<span class=\"token punctuation\">,</span>\n  ownKeys\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>注意 <code class=\"language-text\">ownKeys</code> 的实现里使用到 了一个 Symbol: ITERATE<em>KEY，开始一直不明白 <code class=\"language-text\">trigger</code> 里为啥会用到这个去 `depsMap.get(ITERRATE</em>KEY)<code class=\"language-text\">，这里应该明白是怎么回事了，就是针对对象的迭代器操作的时候，使用到</code>ownKeys<code class=\"language-text\">，需要对该操作收集依赖，那么就需要有个唯一的 key 去设置</code>targetMap, depsMap<code class=\"language-text\">，这里的</code>ITERATE_KEY` 就是这个作用，用它来收集(track)对象迭代操作的所有依赖，然后通过 trigger 里面查找这个符号值去取所有 updaters。</p>\n<p>测试：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> foo<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> bar<span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> n <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> dum<span class=\"token punctuation\">,</span> has\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">updater</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'updating...'</span><span class=\"token punctuation\">)</span>\n  dum <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 触发依赖收集</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span>updater<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> dep <span class=\"token operator\">=</span> targetMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ITERATE_KEY</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> it <span class=\"token keyword\">of</span> dep<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">,</span> it<span class=\"token punctuation\">.</span>raw <span class=\"token operator\">===</span> updater<span class=\"token punctuation\">,</span> <span class=\"token string\">'deps'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dum<span class=\"token punctuation\">,</span> <span class=\"token string\">'before'</span><span class=\"token punctuation\">)</span>\nn<span class=\"token punctuation\">.</span>bar <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token comment\">// 触发 updaters</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dum<span class=\"token punctuation\">,</span> <span class=\"token string\">'after'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>结果：</p>\n<blockquote>\n<p>updating…\n{foo: 1, bar: 2} “own keys”\n() => {\nconsole.log(‘updating…’)\ndum = Object.keys(n)\n} true “deps”\n(2) [“foo”, “bar”] “before”\n(2) [“foo”, “bar”] “after”</p>\n</blockquote>\n<p>但是发现并没有触发 updaters。</p>\n<p>trigger 里面加打印结果：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 非数组的删除或添加操作</span>\n<span class=\"token keyword\">const</span> isAddOrDelete <span class=\"token operator\">=</span>\n      type <span class=\"token operator\">===</span> <span class=\"token string\">'add'</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'delete'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">,</span> key <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> target <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 对象的属性的新增和删除，或者 Map 类型的 set 操作</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isAddOrDelete <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'set'</span> <span class=\"token operator\">&amp;&amp;</span> target <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>depsMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">'length'</span> <span class=\"token operator\">:</span> <span class=\"token constant\">ITERATE_KEY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>输出 <code class=\"language-text\">{type: &quot;set&quot;, key: &quot;foo&quot;} false</code> 说明确实有触发 <code class=\"language-text\">trigger</code>，但是条件：</p>\n<p><code class=\"language-text\">if (isAddOrDelete || (type === &#39;set&#39; &amp;&amp; target instanceof Map))</code></p>\n<p>阻止了它进入 <code class=\"language-text\">add</code> 收集 <code class=\"language-text\">ITERATE_KEY</code> 对应的依赖，因为 target 不是 Map 类型。</p>\n<p><strong>TODO 为啥会这样？？？？？？？</strong></p>\n<h2 id=\"jest-测试\" style=\"position:relative;\"><a href=\"#jest-%E6%B5%8B%E8%AF%95\" aria-label=\"jest 测试 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>jest 测试</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">☁  vue-next-code-read [master] ⚡  jest\nPASS  packages/__tests__/reactive/reactive.spec.js\nFAIL  packages/__tests__/reactive/effect.spec.js\n● reactivity/effect › should observe iteration\n\nexpect(received).toBe(expected) // Object.is equality\n\nExpected: &quot;Hello World!&quot;\nReceived: &quot;Hello&quot;\n\n161 |     expect(dummy).toBe(&#39;Hello&#39;)\n162 |     list.push(&#39;World!&#39;)\n\n  &gt; 163 |     expect(dummy).toBe(&#39;Hello World!&#39;)\n  &gt;  |                   ^\n  &gt; 164 |     list.shift()\n  &gt; 165 |     expect(dummy).toBe(&#39;World!&#39;)\n  &gt; 166 |   })\n\n    at Object.&lt;anonymous&gt; (packages/__tests__/reactive/effect.spec.js:163:19)\n\n● reactivity/effect › should observe implicit array length changes\n\n  expect(received).toBe(expected) // Object.is equality\n\n  Expected: &quot;Hello World!&quot;\n  Received: &quot;Hello&quot;\n\n    173 |     expect(dummy).toBe(&#39;Hello&#39;)\n    174 |     list[1] = &#39;World!&#39;\n\n  &gt; 175 |     expect(dummy).toBe(&#39;Hello World!&#39;)\n  &gt;  |                   ^\n  &gt; 176 |     list[3] = &#39;Hello!&#39;\n  &gt; 177 |     expect(dummy).toBe(&#39;Hello World!  Hello!&#39;)\n  &gt; 178 |   })\n\n    at Object.&lt;anonymous&gt; (packages/__tests__/reactive/effect.spec.js:175:19)\n\n● reactivity/effect › should observe enumeration\n\n  expect(received).toBe(expected) // Object.is equality\n\n  Expected: 7\n  Received: 3\n\n    203 |     expect(dummy).toBe(3)\n    204 |     numbers.num2 = 4\n\n  &gt; 205 |     expect(dummy).toBe(7)\n  &gt;  |                   ^\n  &gt; 206 |     delete numbers.num1\n  &gt; 207 |     expect(dummy).toBe(4)\n  &gt; 208 |   })\n\n    at Object.&lt;anonymous&gt; (packages/__tests__/reactive/effect.spec.js:205:19)\n\n● reactivity/effect › should not observe well-known symbol keyed properties\n\n  expect(received).toBe(expected) // Object.is equality\n\n  Expected: undefined\n  Received: true\n\n    234 |     array[key] = true\n    235 |     expect(array[key]).toBe(true)\n\n  &gt; 236 |     expect(dummy).toBe(undefined)\n  &gt;  |                   ^\n  &gt; 237 |   })\n  &gt; 238 |\n  &gt; 239 |   it(&#39;should observe function valued properties&#39;, () =&gt; {\n\n    at Object.&lt;anonymous&gt; (packages/__tests__/reactive/effect.spec.js:236:19)\n\n● reactivity/effect › should observe json methods\n\n  expect(received).toBe(expected) // Object.is equality\n\n  Expected: 1\n  Received: undefined\n\n    523 |     })\n    524 |     obj.a = 1\n\n  &gt; 525 |     expect(dummy.a).toBe(1)\n  &gt;  |                     ^\n  &gt; 526 |   })\n  &gt; 527 |\n  &gt; 528 |   it(&#39;should observe class method invocations&#39;, () =&gt; {\n\n    at Object.&lt;anonymous&gt; (packages/__tests__/reactive/effect.spec.js:525:21)\n\n● reactivity/effect › scheduler\n\n  expect(jest.fn()).toHaveBeenCalledTimes(expected)\n\n  Expected number of calls: 1\n  Received number of calls: 0\n\n    573 |     // should be called on first trigger\n    574 |     obj.foo++\n\n  &gt; 575 |     expect(scheduler).toHaveBeenCalledTimes(1)\n  &gt;  |                       ^\n  &gt; 576 |     // should not run yet\n  &gt; 577 |     expect(dummy).toBe(1)\n  &gt; 578 |     // manually run\n\n    at Object.&lt;anonymous&gt; (packages/__tests__/reactive/effect.spec.js:575:23)\n\n● reactivity/effect › events: onTrack\n\n  expect(jest.fn()).toHaveBeenCalledTimes(expected)\n\n  Expected number of calls: 3\n  Received number of calls: 0\n\n    598 |     )\n    599 |     expect(dummy).toEqual([&#39;foo&#39;, &#39;bar&#39;])\n\n  &gt; 600 |     expect(onTrack).toHaveBeenCalledTimes(3)\n  &gt;  |                     ^\n  &gt; 601 |     expect(events).toEqual([\n  &gt; 602 |       {\n  &gt; 603 |         effect: runner,\n\n    at Object.&lt;anonymous&gt; (packages/__tests__/reactive/effect.spec.js:600:21)\n\n● reactivity/effect › events: onTrigger\n\n  expect(jest.fn()).toHaveBeenCalledTimes(expected)\n\n  Expected number of calls: 1\n  Received number of calls: 0\n\n    637 |     obj.foo++\n    638 |     expect(dummy).toBe(2)\n\n  &gt; 639 |     expect(onTrigger).toHaveBeenCalledTimes(1)\n  &gt;  |                       ^\n  &gt; 640 |     expect(events[0]).toEqual({\n  &gt; 641 |       effect: runner,\n  &gt; 642 |       target: toRaw(obj),\n\n    at Object.&lt;anonymous&gt; (packages/__tests__/reactive/effect.spec.js:639:23)\n\n● reactivity/effect › stop\n\n  TypeError: (0 , _reactive2.stop) is not a function\n\n    667 |     obj.prop = 2\n    668 |     expect(dummy).toBe(2)\n\n  &gt; 669 |     stop(runner)\n  &gt;  |     ^\n  &gt; 670 |     obj.prop = 3\n  &gt; 671 |     expect(dummy).toBe(2)\n  &gt; 672 |\n\n    at Object.&lt;anonymous&gt; (packages/__tests__/reactive/effect.spec.js:669:5)\n\n● reactivity/effect › stop with scheduler\n\n  expect(received).toBe(expected) // Object.is equality\n\n  Expected: 1\n  Received: 2\n\n    689 |     )\n    690 |     obj.prop = 2\n\n  &gt; 691 |     expect(dummy).toBe(1)\n  &gt;  |                   ^\n  &gt; 692 |     expect(queue.length).toBe(1)\n  &gt; 693 |     stop(runner)\n  &gt; 694 |\n\n    at Object.&lt;anonymous&gt; (packages/__tests__/reactive/effect.spec.js:691:19)\n\n● reactivity/effect › events: onStop\n\n  TypeError: (0 , _reactive2.stop) is not a function\n\n    704 |     })\n    705 |\n\n  &gt; 706 |     stop(runner)\n  &gt;  |     ^\n  &gt; 707 |     expect(onStop).toHaveBeenCalled()\n  &gt; 708 |   })\n  &gt; 709 |\n\n    at Object.&lt;anonymous&gt; (packages/__tests__/reactive/effect.spec.js:706:5)\n\n● reactivity/effect › stop: a stopped effect is nested in a normal effect\n\n  TypeError: (0 , _reactive2.stop) is not a function\n\n    714 |       dummy = obj.prop\n    715 |     })\n\n  &gt; 716 |     stop(runner)\n  &gt;  |     ^\n  &gt; 717 |     obj.prop = 2\n  &gt; 718 |     expect(dummy).toBe(1)\n  &gt; 719 |\n\n    at Object.&lt;anonymous&gt; (packages/__tests__/reactive/effect.spec.js:716:5)\n\n● reactivity/effect › should trigger all effects when array length is set 0\n\n  expect(received).toBe(expected) // Object.is equality\n\n  Expected: 3\n  Received: 1\n\n    773 |\n    774 |     observed.unshift(3)\n\n  &gt; 775 |     expect(dummy).toBe(3)\n  &gt;  |                   ^\n  &gt; 776 |     expect(record).toBe(3)\n  &gt; 777 |\n  &gt; 778 |     observed.length = 0\n\n    at Object.&lt;anonymous&gt; (packages/__tests__/reactive/effect.spec.js:775:19)\n\nTest Suites: 1 failed, 1 passed, 2 total\nTests:       13 failed, 49 passed, 62 total\nSnapshots:   0 total\nTime:        2.917 s, estimated 3 s\nRan all test suites.</code></pre></div>\n<p>全是失败啊！！！</p>\n<p>还是老老实实的一个个来解决吧…</p>\n<ol>\n<li>\n<p><font color=\"red\">● reactivity/effect › should observe iteration</font></p>\n<p>数组操作失败，push 的时候没有触发 updater。</p>\n<p>示例：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> dummy\n<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'updating....'</span><span class=\"token punctuation\">)</span>\n dummy <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>targetMap<span class=\"token punctuation\">,</span> <span class=\"token string\">'dep'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>\nlist<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span>\n<span class=\"token comment\">/* list.push('World!') */</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>结果(直接索引赋值是生效的，那么为啥 push 没用？？？)：</p>\n<blockquote>\n<p>updating…\ntest.html:20 WeakMap {Array(1) => Map(3)} “dep”\ntest.html:21 Hello 1\ntest.html:17 updating…\ntest.html:24 hello 2</p>\n</blockquote>\n<p>在 <code class=\"language-text\">list.push(&#39;World!&#39;)</code> 处打个断点：</p>\n<p>先触发的是<code class=\"language-text\">list</code> 的 get push :</p>\n<p><img src=\"http://qiniu.ii6g.com/1590068611.png?imageMogr2/thumbnail/!100p\"></p>\n<p>然后再是触发的 length get</p>\n<p><img src=\"http://qiniu.ii6g.com/1590068464.png?imageMogr2/thumbnail/!100p\"></p>\n<p>触发 key: 1 的 updater，但最后没有任何依赖被发现？？？</p>\n<p><img src=\"http://qiniu.ii6g.com/1590068984.png?imageMogr2/thumbnail/!100p\"></p>\n<p><img src=\"http://qiniu.ii6g.com/1590069039.png?imageMogr2/thumbnail/!100p\"></p>\n<p>看最后的图发现问题，首先，数组就一个元素，长度为1，最大索引为0，在 push 之后，长度为2，最大索引为1，也就是说这个新的索引即新的 key，属于新增属性操作，应该要走到 trigger:add ，但是实际走了 trigger:set 里面去了。</p>\n<p>问题就在 <code class=\"language-text\">if(!target.hasOwnProperty(key))</code> 这一行，它不应该取 <code class=\"language-text\">Reflect.set(...)</code> 之后的 target 因为这是更新之后的，肯定有 key: 1了。</p>\n<p>修改： </p>\n<p>在 <code class=\"language-text\">Reflect.set(...)</code> 之前先 <code class=\"language-text\">hadKey = target.hasOwnProperty(key)</code> 然后使用缓存的 <code class=\"language-text\">hadKey</code> 进行判断 <code class=\"language-text\">if(!hadKey) {...}</code>。</p>\n<p>修改之后测试通过：</p>\n<blockquote>\n<p>☁  vue-next-code-read [master] ⚡  jest\nPASS  packages/<strong>tests</strong>/reactive/reactive.spec.js\nPASS  packages/<strong>tests</strong>/reactive/effect.spec.js</p>\n<p>Test Suites: 2 passed, 2 total\nTests:       26 passed, 26 total\nSnapshots:   0 total\nTime:        7.645 s\nRan all test suites.</p>\n</blockquote>\n</li>\n<li>\n<p><font color=\"red\">● reactivity/effect › should not observe well-known symbol keyed properties</font></p>\n<p>js 内置的符号属性，不能被 observe，这是因为 <code class=\"language-text\">createGetter</code> 里面还没完成 <code class=\"language-text\">Symbol</code> 类型的检测，下面加上就OK了。</p>\n<p>需要增加以下内容：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 1. 符号类型检测</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isSymbol</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">typeof</span> val <span class=\"token operator\">===</span> <span class=\"token string\">'symbol'</span>\n\n<span class=\"token comment\">// 2. Symbol 上的所有符号属性</span>\n<span class=\"token keyword\">const</span> builtInSymbols <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>\n Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span>Symbol<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>Symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>isSymbol<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 3. createGetter中增加判断</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">createGetter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">// ...</span>\n \n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isSymbol</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> builtInSymbols<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> key <span class=\"token operator\">===</span> <span class=\"token string\">'__proto__'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> res\n <span class=\"token punctuation\">}</span>  \n \n <span class=\"token comment\">// ....</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>重测 jest 通过。</p>\n</li>\n<li>\n<p><font color=\"red\">● reactivity/effect › scheduler</font>\n真怀疑当时自己是故意的，尽是些地级错误（捂脸，🤦‍♀️，(<em>/ω＼</em>)）！！！</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 修改前：</span>\n<span class=\"token comment\">// if (effect.options &amp;&amp; effect.options.shecduler) {</span>\n<span class=\"token comment\">// 修改后：</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>effect<span class=\"token punctuation\">.</span>options <span class=\"token operator\">&amp;&amp;</span> effect<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>scheduler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></code></pre></div>\n</li>\n<li><font color=\"red\">● reactivity/effect › events: onTrack</font></li>\n<li>\n<p><font color=\"red\">● reactivity/effect › events: onTrigger</font></p>\n<p>两个是在 <strong>DEV</strong> 模式下才会执行的，没有完成，现在给加上去吧。</p>\n<p>Track 里面，在 if dep.has 最后面增加统计事件 onTrack：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">track</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// ...</span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dep<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>activeEffect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// ...</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__DEV__ <span class=\"token operator\">&amp;&amp;</span> activeEffect<span class=\"token punctuation\">.</span>options <span class=\"token operator\">&amp;&amp;</span> activeEffect<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>onTrack<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     activeEffect<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span><span class=\"token function\">onTrack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n       effect<span class=\"token operator\">:</span> activeEffect<span class=\"token punctuation\">,</span>\n       target<span class=\"token punctuation\">,</span>\n       type<span class=\"token punctuation\">,</span>\n       key\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Trigger 里面，在执行 updaters 的开头增加 onTrigger 事件：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">,</span> oldTarget</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">// ...</span>\n\n <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">run</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">effect</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> hasOpt <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>effect<span class=\"token punctuation\">.</span>options\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__DEV__ <span class=\"token operator\">&amp;&amp;</span> hasOpt <span class=\"token operator\">&amp;&amp;</span> effect<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>onTrigger<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     effect<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span><span class=\"token function\">onTrigger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n       effect<span class=\"token punctuation\">,</span>\n       target<span class=\"token punctuation\">,</span>\n       key<span class=\"token punctuation\">,</span>\n       type<span class=\"token punctuation\">,</span>\n       newValue<span class=\"token punctuation\">,</span>\n       oldValue<span class=\"token punctuation\">,</span>\n       oldTarget\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token comment\">// ...</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>加完，jest 通过。</p>\n</li>\n<li>\n<p><font color=\"red\">● stop</font>\n增加 stop 函数，停止 effect 行为，主要通过 effect.active，清理 effect.deps 来控制，阻止触发 deps。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">effect</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>effect<span class=\"token punctuation\">.</span>active<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">cleanup</span><span class=\"token punctuation\">(</span>effect<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>effect<span class=\"token punctuation\">.</span>options <span class=\"token operator\">&amp;&amp;</span> effect<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>onStop<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     effect<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span><span class=\"token function\">onStop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span>\n   effect<span class=\"token punctuation\">.</span>active <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<p>到此 <code class=\"language-text\">effect.spec.ts</code> 中除了 <code class=\"language-text\">ref</code> 有关的测试用例全部测试通过，</p>\n<p><img src=\"http://qiniu.ii6g.com/1590139513.png?imageMogr2/thumbnail/!100p\"></p>\n<p>下面来逐个分析 >>> go go go…</p>\n<h2 id=\"测试用例结果分析\" style=\"position:relative;\"><a href=\"#%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%BB%93%E6%9E%9C%E5%88%86%E6%9E%90\" aria-label=\"测试用例结果分析 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>测试用例结果分析</h2>\n<p>通过运行 <code class=\"language-text\">jest --verbose</code> 将所有用例测试结果列出：</p>\n<ul>\n<li>\n<p><font color=\"green\">✓ should run the passed function once (wrapped by a effect) (4 ms)</font></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should run the passed function once (wrapped by a effect)'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> fnSpy <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">effect</span><span class=\"token punctuation\">(</span>fnSpy<span class=\"token punctuation\">)</span> <span class=\"token comment\">// effect() 实现里面，如果没有传 options.lazy 就会立即执行一次</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>fnSpy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 因此这里 fnSpy 会被调用一次</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p><font color=\"green\">✓ should observe basic properties (1 ms)</font></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should observe basic properties'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> dummy\n  <span class=\"token keyword\">const</span> counter <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> num<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// updater: dummy = counter.num</span>\n  <span class=\"token comment\">// 被立即调用， dummy = 0</span>\n  <span class=\"token comment\">// 由于 counter.num 触发 trigger:get ，收集dep: 'num'->Set(1): updater</span>\n  <span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>dummy <span class=\"token operator\">=</span> counter<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n  counter<span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> <span class=\"token number\">7</span> <span class=\"token comment\">// 赋值，trigger: set 触发 updater，赋值 dummy</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p><font color=\"green\">✓ should observe multiple properties</font></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should observe multiple properties'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> dummy\n  <span class=\"token comment\">// obj ={num1: 0, num2: 0}</span>\n  <span class=\"token keyword\">const</span> counter <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> num1<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> num2<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// updater: ...</span>\n  <span class=\"token comment\">// updater 被立即调用，counter 的 num1, num2 被访问，分别触发他们的 trigger:get</span>\n  <span class=\"token comment\">// 收集依赖，三次访问，三次收集同一个 updater</span>\n  <span class=\"token comment\">// 由于 targetMap -> depsMap -> dep: new Set() 是个集合类型</span>\n  <span class=\"token comment\">// 因此虽然是三次访问，但收集的都是 updater，因此每个 dep 里面保存的是同一个 updater</span>\n  <span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>dummy <span class=\"token operator\">=</span> counter<span class=\"token punctuation\">.</span>num1 <span class=\"token operator\">+</span> counter<span class=\"token punctuation\">.</span>num1 <span class=\"token operator\">+</span> counter<span class=\"token punctuation\">.</span>num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 首次调用 updater 时候赋值了 0 + 0 + 0 = 0</span>\n\t<span class=\"token comment\">// 这里先后赋值了 num1, num2，触发了两次 updater</span>\n\t<span class=\"token comment\">// first: 0 + 0 + 7</span>\n\t<span class=\"token comment\">// second: 7 + 7 + 7 = 21</span>\n\t<span class=\"token comment\">// 测试如下面的示例代码</span>\n  counter<span class=\"token punctuation\">.</span>num1 <span class=\"token operator\">=</span> counter<span class=\"token punctuation\">.</span>num2 <span class=\"token operator\">=</span> <span class=\"token number\">7</span> \n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>  </code></pre></div>\n<p>测试代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> dummy<span class=\"token punctuation\">,</span>\n  n <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">const</span> counter <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> num1<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> num2<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>dummy <span class=\"token operator\">=</span> counter<span class=\"token punctuation\">.</span>num1 <span class=\"token operator\">+</span> counter<span class=\"token punctuation\">.</span>num1 <span class=\"token operator\">+</span> counter<span class=\"token punctuation\">.</span>num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dummy<span class=\"token punctuation\">,</span> n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\ncounter<span class=\"token punctuation\">.</span>num1 <span class=\"token operator\">=</span> counter<span class=\"token punctuation\">.</span>num2 <span class=\"token operator\">=</span> <span class=\"token number\">7</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dummy<span class=\"token punctuation\">,</span> n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>结果图示：</p>\n<p><img src=\"http://qiniu.ii6g.com/1590139770.png?imageMogr2/thumbnail/!100p\"></p>\n<ol>\n<li>depsMap 有两个 map，分别是 num1, num2，</li>\n<li>trigger: set 触发了两次，且 num2 先触发 num1 紧随其后，因为赋值操作是从右到左的顺序进行。    </li>\n</ol>\n</li>\n<li>\n<p><font color=\"green\">✓ should handle multiple effects (1 ms)</font></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should handle multiple effects'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">let</span> dummy1<span class=\"token punctuation\">,</span> dummy2\n<span class=\"token keyword\">const</span> counter <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> num<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>dummy1 <span class=\"token operator\">=</span> counter<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 收集 updater1，执行一次，dummy1  = 0</span>\n<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>dummy2 <span class=\"token operator\">=</span> counter<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 收集 updater2, 执行一次，dummy2 = 0</span>\n\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>dummy1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true </span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>dummy2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n<span class=\"token comment\">// trigger:set 取出 targetMap-depsMap-num:dep:Set(2) 即 updater1, updater2</span>\n<span class=\"token comment\">// 执行 updaters 之后，重新复制dummy1, dummy2 = 1</span>\ncounter<span class=\"token punctuation\">.</span>num<span class=\"token operator\">++</span> \n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>dummy1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>dummy2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p><font color=\"green\"> ✓ should observe nested properties (1 ms) </font></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should observe nested properties'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">let</span> dummy\n<span class=\"token comment\">// 嵌套的 reactive 是在 createReativeObject 里面完成的</span>\n<span class=\"token comment\">// 在最后 return 结果的时候检测了是否是 isObject ，如果是进一步检测</span>\n<span class=\"token comment\">// isReadonly 与否，非只读返回 reactive(res) 对结果递归调用一次</span>\n<span class=\"token comment\">// 前提是没有设置shallow 标志，该标识表明只对目前的对象只做浅reactive</span>\n<span class=\"token comment\">// 即只做对象的一级响应式，里面嵌套的对象原样返回。</span>\n<span class=\"token comment\">// 这里调用的是 reactive 显然是递归 reactive 的。</span>\n<span class=\"token comment\">// obj = { nested: {num: 0 }}</span>\n<span class=\"token keyword\">const</span> counter <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> nested<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> num<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 这里会触发两次 getter，一次是 counter.nested，一次是 nested.num</span>\n<span class=\"token comment\">// targetMap{ obj -> map, nested -> map } 存放了两个对象的映射</span>\n<span class=\"token comment\">// obj:map -> 'nested':Set(1), nested:map -> 'num':Set(1)</span>\n<span class=\"token comment\">// Set(1) 都是下面的 updater</span>\n<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>dummy <span class=\"token operator\">=</span> counter<span class=\"token punctuation\">.</span>nested<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\ncounter<span class=\"token punctuation\">.</span>nested<span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> <span class=\"token number\">8</span> <span class=\"token comment\">// 只会触发 'num':Set(1)</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>转测试代码结果：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> dummy\n<span class=\"token keyword\">const</span> counter <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> nested<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> num<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>dummy <span class=\"token operator\">=</span> counter<span class=\"token punctuation\">.</span>nested<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dummy <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\ncounter<span class=\"token punctuation\">.</span>nested<span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> <span class=\"token number\">7</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dummy <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><img src=\"http://qiniu.ii6g.com/1590118132.png?imageMogr2/thumbnail/!100p\"></p>\n<p>​\t</p>\n<ol>\n<li>Loc1 : 访问 counter.nested 收集的 <code class=\"language-text\">{counter:{nested:{num:0}}} -&gt; Map{&#39;nested&#39; -&gt; Set(1)}</code> 依赖。</li>\n<li>Loc2: 访问 nested.num 收集的 {num:7}->Map{‘num’->Set(1)} 依赖。</li>\n<li>Loc2: 注意看这里，当给 counter.nested.num = 7 赋值的时候只会触发 ‘num’ -> Set(1)。</li>\n</ol>\n</li>\n<li>\n<p><font color=\"green\"> ✓ should observe delete operations (1 ms)</font></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should observe delete operations'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">let</span> dummy\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> prop<span class=\"token operator\">:</span> <span class=\"token string\">'value'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>dummy <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 收集依赖 updater</span>\n\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n<span class=\"token comment\">// 对象属性的删除操作，只会触发 trigger 里面的 if (key !== void 0) 收集依赖进 effects: []</span>\n<span class=\"token keyword\">delete</span> obj<span class=\"token punctuation\">.</span>prop <span class=\"token comment\">// 触发 updater 重新复制 dummy: undefined</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li><font color=\"green\"> ✓ should observe has operations (1 ms)</font></li>\n<li>\n<p><font color=\"green\">✓ should observe properties on the prototype chain (9 ms)</font></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should observe properties on the prototype chain'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> dummy\n  <span class=\"token keyword\">const</span> counter <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> num<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> parentCounter <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> num<span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">,</span> parentCounter<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>dummy <span class=\"token operator\">=</span> counter<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 收集 updater</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n\t<span class=\"token comment\">// 这里删除操作触发 deleteProperty proxy handler</span>\n\t<span class=\"token comment\">// trigger: delete -> run deps -> 触发 updater</span>\n\t<span class=\"token comment\">// 由于 updater 里面访问了 counter.num ，而 counter 自身的 num 在这时候已经被删除了</span>\n\t<span class=\"token comment\">// 注意：deletePropery 里面是先执行了 Reflect.deleteProperty(...) </span>\n\t<span class=\"token comment\">// 然后再触发的 trigger:delete的，因此在 updater 执行的时候 counter.num 已经不存在</span>\n\t<span class=\"token comment\">// 但是根据对象属性的访问原理，会去检查原型链上父级对象的，最后会找到 parentCounter.num</span>\n\t<span class=\"token comment\">// 然后取出它的值：num: 2 赋值给 dummy，所以下面 dummy toBe(2) 为 true</span>\n  <span class=\"token keyword\">delete</span> counter<span class=\"token punctuation\">.</span>num\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 这里改变 parent num 时候也会触发 updater</span>\n\t<span class=\"token comment\">// 是因为上面的 delete 操作导致去检查了原型链，访问了 parentCounter.num ，这个时候</span>\n\t<span class=\"token comment\">// 也相当于触发了  parentCounter.num 的 get ，收集了 updater</span>\n  parentCounter<span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n\t<span class=\"token comment\">// 这里重新复制，触发 counter.num 的 set(createSetter)，</span>\n\t<span class=\"token comment\">// 检测到自身没有该属性(在Reflect.set()之前)</span>\n\t<span class=\"token comment\">// 然后触发 trigger:add 增加属性的操作</span>\n\t<span class=\"token comment\">// 在 trigger 里面，触发之前收集到的 updater</span>\n  <span class=\"token comment\">// (注意：counter.num 的 dep 这个时候并没有被移除的)</span>\n  counter<span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li><font color=\"green\">✓ should observe has operations on the prototype chain</font></li>\n<li>\n<p><font color=\"green\">✓ should observe inherited property accessors (2 ms)</font></p>\n<p>访问器属性也是一样的道理。</p>\n</li>\n<li><font color=\"green\">✓ should observe function call chains (1 ms)</font></li>\n<li><font color=\"green\">✓ should observe iteration (1 ms)</font></li>\n<li><font color=\"green\">✓ should observe implicit array length changes</font></li>\n<li><font color=\"green\">✓ should observe sparse array mutations (1 ms)</font></li>\n<li><font color=\"green\">✓ should observe enumeration (2 ms)</font></li>\n<li><font color=\"green\">✓ should observe symbol keyed properties (2 ms)</font></li>\n<li>\n<p><font color=\"green\">✓ should not observe well-known symbol keyed properties (2 ms)</font></p>\n<p>已知的符号属性，在 <code class=\"language-text\">createReactiveObject</code> 里面就被过滤掉了</p>\n<p><code class=\"language-text\">if (isSymbol(res) &amp;&amp; builtInSymbols.has(res) || res === &#39;__proto__&#39;)</code>。</p>\n</li>\n<li><font color=\"green\">✓ should observe function valued properties (1 ms)</font></li>\n<li><font color=\"green\">✓ should observe chained getters relying on this (1 ms)</font></li>\n<li><font color=\"green\">✓ should observe methods relying on this (1 ms)</font></li>\n<li>\n<p><font color=\"green\">✓ should not observe set operations without a value change (1 ms)</font></p>\n<p>值没发生变化的时候不会重复触发 udpaters，<code class=\"language-text\">createSetter</code> 里面就已经有了判断：</p>\n<p><code class=\"language-text\">if (value !== oldValue &amp;&amp; (value === value || oldValue === oldValue))</code></p>\n<p>值没变不会 trigger: set，后面的是为了过滤掉 <code class=\"language-text\">NaN</code> 的情况。</p>\n</li>\n<li>\n<p><font color=\"green\">✓ should not observe raw mutations (1 ms)</font></p>\n<p><code class=\"language-text\">toRaw</code> 就是将 <code class=\"language-text\">observed</code> 转成原始的那个对象，就不再是响应式的了，当然不会有啥作用。</p>\n</li>\n<li>\n<p><font color=\"green\">✓ should not be triggered by raw mutations</font></p>\n<p>同上。</p>\n</li>\n<li>\n<p><font color=\"green\">✓ should not be triggered by inherited raw setters (1 ms)</font></p>\n<p>同上。</p>\n</li>\n<li>\n<p><span id=\"test-case-rloops\"><font color=\"green\">✓ should avoid implicit infinite recursive loops with itself (1 ms)</font></span></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> counter <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> num<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">counterSpy</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\nn<span class=\"token operator\">++</span>\ncounter<span class=\"token punctuation\">.</span>num<span class=\"token operator\">++</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span>counterSpy<span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>\ncounter<span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>运行结果：</p>\n<blockquote>\n<p>// 这里是 updater 里面的 counter.num++ 触发的get</p>\n<p>{num: 0} {type: “get”, key: “num”, shouldTrack: true, activeEffect: ƒ} “track”</p>\n<p>// 因为 counter.num++ 触发的 set</p>\n<p>Map(1) {“num” => Set(1)} {type: “set”, key: “num”, newValue: 1, oldValue: 0} “trigger”\nProxy {num: 1} 1 “1” // log</p>\n<p>// 赋值操作引发的 trigger:set</p>\n<p>Map(1) {“num” => Set(1)} {type: “set”, key: “num”, newValue: 4, oldValue: 1} “trigger”</p>\n<p>// set 触发了updater -> trigger:get </p>\n<p>{num: 4} {type: “get”, key: “num”, shouldTrack: true, activeEffect: ƒ} “track”</p>\n<p>// counter.num++ -> trigger:set</p>\n<p>Map(1) {“num” => Set(1)} {type: “set”, key: “num”, newValue: 5, oldValue: 4} “trigger”\nProxy {num: 5} 2 “2”</p>\n</blockquote>\n<p>好像没发现哪里拦截了，但是通过下面的例子，确实又会死循环：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> dummy\n\n<span class=\"token keyword\">const</span> counter <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\nnum<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> ob\n<span class=\"token keyword\">function</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// ob.num = ob.num + 1</span>\ndummy <span class=\"token operator\">=</span> ob<span class=\"token punctuation\">.</span>num<span class=\"token operator\">++</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dummy <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> ob<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> receiver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> receiver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nob<span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> <span class=\"token number\">2</span></code></pre></div>\n<p>node 运行之后：</p>\n<blockquote>\n<p>/Users/simon/github/vuejs/vue-next-code-read/test/test.js:10\ndummy = ob.num++\n^</p>\n<p>RangeError: Maximum call stack size exceeded</p>\n</blockquote>\n<p>所以肯定还是有哪里做了处理，防止死循环。</p>\n<p>经过一通 <code class=\"language-text\">console.log</code> 之后发现关键点就在 <code class=\"language-text\">trigger</code> 的 <code class=\"language-text\">add</code> 函数里面，它在查找依赖添加到将要执行的 <code class=\"language-text\">effects</code> 集合中的时候有两个前提条件：</p>\n<ol>\n<li><code class=\"language-text\">!shouldTrack</code></li>\n<li><code class=\"language-text\">effect !== activeEffect</code></li>\n</ol>\n<p><img src=\"http://qiniu.ii6g.com/1590131447.png?imageMogr2/thumbnail/!100p\"></p>\n<p>图中输出的主要关键点在<font color=\"red\" size=\"5\">红色</font> 部分，这里检测到正在 <code class=\"language-text\">add</code> 的 <code class=\"language-text\">effect</code> 与当前激活状态的 <code class=\"language-text\">activeEffect</code> 是同一个所以结束触发 <code class=\"language-text\">trigger:set</code>，但是为什么 <code class=\"language-text\">shouldTrack = true</code> 且 <code class=\"language-text\">effect === activeEffect</code>呢？？？</p>\n<p>那么就要回头去看 <code class=\"language-text\">effect()</code> 的具体实现了，重点在 <code class=\"language-text\">try...finally</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">enableTracking</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\neffectStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>_effect<span class=\"token punctuation\">)</span>\nactiveEffect <span class=\"token operator\">=</span> _effect <span class=\"token comment\">// 这里的 _effect 就是在 trigger 里用来与 activeEffect 比较的</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>_effect <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'effect 1'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token comment\">// trigger set 检测 shouldTrack 和 activeEffect</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\neffectStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 而 shouldTrck 和 activeEffect 重置工作在这里，因此阻止了 fn 里面 ++ 操作引起的死循环</span>\n<span class=\"token comment\">// 因为 trigger -> add 需要检测 if (!shouldTrack || effect !== activeEffect)</span>\n<span class=\"token comment\">// 才会将找到的 dep:updater 加入到 run 要执行的 effects: [] 中去</span>\n<span class=\"token function\">resetTracking</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \nactiveEffect <span class=\"token operator\">=</span> effectStack<span class=\"token punctuation\">[</span>effectStack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>_effect <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'effect 2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这段代码含义如下：</p>\n<ol>\n<li>当执行 <code class=\"language-text\">effect(updater)</code> 时，执行上面的一段代码。</li>\n<li><code class=\"language-text\">enableTracking()</code>  只要知道它是将 <code class=\"language-text\">shouldTrack = true</code> 了。</li>\n<li>接下来缓存，赋值 effect</li>\n<li>重点来了，执行 updater，这里执行的 updater里面是 <code class=\"language-text\">counter.num++</code> 会依次触发 <code class=\"language-text\">get</code> -> <code class=\"language-text\">set</code></li>\n</ol>\n<p> Get 就是收集依赖，同一个 updater 只会有一个 (<code class=\"language-text\">Set(1)</code>)。</p>\n<p> Set 这里会触发 trigger:set 那么这里会检测 shouldTrack 和 activeEffect，但是这个时候两者的值并没有重置，也就是说告诉 trigger， <code class=\"language-text\">effect(updater)</code> 我还没执行完呢，你不能重复 trigger:set，但是我什么时候才能继续 trigger呢？？？这就是下面第5条该做的事情了。</p>\n<ol start=\"5\">\n<li>finally 在 udpater 首次执行完成之后恢复shouldTrack 和activeEffect的值，从而继续完成 <code class=\"language-text\">effect(updater)</code> 的任务直到 <code class=\"language-text\">finally</code> 的代码执行完毕。</li>\n</ol>\n<p>即这个问题的关键点在于 4和5，正是这里的逻辑防止了 updater 里面导致 set 死循环。</p>\n</li>\n<li>\n<p><font color=\"green\">✓ should allow explicitly recursive raw function loops (1 ms)</font></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should allow explicitly recursive raw function loops'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> counter <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> num<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> numSpy <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    counter<span class=\"token punctuation\">.</span>num<span class=\"token operator\">++</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">.</span>num <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">numSpy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">effect</span><span class=\"token punctuation\">(</span>numSpy<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>numSpy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>有了前面一个测试用例的分析，这里的原理就一目了然了。</p>\n<p>首先 <code class=\"language-text\">counter.num++</code> 还是会因为 <code class=\"language-text\">effect(updater)</code> 没有完全结束而中断，只会执行一次 +1 操作。</p>\n<p>紧跟着的 <code class=\"language-text\">if</code> 相当于在 <code class=\"language-text\">try { return fn(...args) } }</code> 返回结果之前又调用了下自己，也就是说 num+1 会执行知道 <code class=\"language-text\">num = 10</code> ，所以最后结果是 <code class=\"language-text\">num=10</code>, updater 被调用了 10，才进入了 <code class=\"language-text\">effect -&gt; finally</code> 结束当前的 <code class=\"language-text\">effect()</code>。</p>\n</li>\n<li>\n<p><font color=\"green\">✓ should avoid infinite loops with other effects (1 ms)</font></p>\n<p>原理如上上。</p>\n</li>\n<li>\n<p><font color=\"green\">✓ should return a new reactive version of the function (1 ms)</font></p>\n<p>因为 <code class=\"language-text\">effect(fn)</code> 最终都会被封装成 <code class=\"language-text\">ReactiveEffect</code> 类型的对象，所以肯定不相等了。</p>\n</li>\n<li><font color=\"green\">✓ should discover new branches while running automatically (1 ms)</font></li>\n<li>\n<p><font color=\"green\">✓ should discover new branches when running manually (1 ms)</font></p>\n<p>这两个原理都一样，在于 <code class=\"language-text\">?:</code> 执行的时候根据条件的真假是否有触发 <code class=\"language-text\">get</code>。</p>\n</li>\n<li><font color=\"green\">✓ should not be triggered by mutating a property, which is used in an inactive branch (1 ms)</font></li>\n<li>\n<p><font color=\"green\">✓ should not double wrap if the passed function is a effect (1 ms)</font></p>\n<p><code class=\"language-text\">function effect(fn)</code> 的第一句就是为了防止这种情况发生，检测是不是 <code class=\"language-text\">_isEffect</code> ，是的话会将 <code class=\"language-text\">fn = fn.raw</code> 提取出来。 </p>\n</li>\n<li><font color=\"green\">✓ should not run multiple times for a single mutation (1 ms)</font></li>\n<li>\n<p><font color=\"green\">✓ should allow nested effects (4 ms)</font></p>\n<p>不管嵌套不嵌套只要 <code class=\"language-text\">effect</code> 完整执行完成，就能顺利的进行下一个 <code class=\"language-text\">effect()</code>。</p>\n</li>\n<li>\n<p><span id=\"test-case-json\"> <font color=\"green\">✓ should observe json methods</font></span></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> dummy <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\ndummy <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>targetMap<span class=\"token punctuation\">,</span> dummy<span class=\"token punctuation\">,</span> <span class=\"token string\">'before'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">/* obj.a = 1 */</span>\n<span class=\"token comment\">/* console.log(targetMap, dummy, 'after') */</span></code></pre></div>\n<p>注释最后两行，看输出</p>\n<p><img src=\"http://qiniu.ii6g.com/1590134578.png?imageMogr2/thumbnail/!100p\"></p>\n<p>注意这里的一个迭代器为 key 的 dep，也就是 <code class=\"language-text\">JSON.stringify(obj)</code> 的时候说明有对 obj 进行遍历(迭代器操作，触发了 <code class=\"language-text\">ownKeys</code> proxy handler)。</p>\n<p>去看下 <a href=\"https://tc39.es/ecma262/\">https://tc39.es/ecma262/</a> <code class=\"language-text\">JSON.stringify</code> 实现原理：</p>\n<blockquote>\n<p>最后一步： Return ? <a href=\"https://tc39.es/ecma262/#sec-serializejsonproperty\">SerializeJSONProperty</a>(state, the empty String, wrapper). 进入到 SerializeJSONProperty</p>\n<p>Step2: 检测到是对象会去取它 的 <code class=\"language-text\">toJson</code> 值，这也就是为什么 最后收集到的依赖 depsMap 里面会有一个 key 为 <code class=\"language-text\">toJSON</code> 的项了：</p>\n<p><a href=\"https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values\">Type</a>(value) is Object or BigInt, then</p>\n<ol>\n<li>Let toJSON be ? <a href=\"https://tc39.es/ecma262/#sec-getv\">GetV</a>(value, “toJSON”).</li>\n</ol>\n<p>然后检测到是对象会进入：SerializeJSONObject ( state, value )</p>\n<ol>\n<li>let partial be a new empty <a href=\"https://tc39.es/ecma262/#sec-list-and-record-specification-type\">List</a>.</li>\n<li>For each elemen P of K , do </li>\n</ol>\n<p>  // 这里会有一个迭代器操作，遍历对象属性，触发 ITERATE_KEY 依赖收集</p>\n<ol>\n<li>Let strP be ? <a href=\"https://tc39.es/ecma262/#sec-serializejsonproperty\">SerializeJSONProperty</a>(state, P, value).</li>\n</ol>\n</blockquote>\n<p>结果就是说 <code class=\"language-text\">JSON.stringify</code> 会有对 obj 有迭代器操作，触发了 ownkeys proxy handler 调用 <code class=\"language-text\">track:ITERATE_KEY</code> 触发收集依赖。</p>\n</li>\n<li><font color=\"green\">✓ should observe class method invocations (1 ms)</font></li>\n<li><font color=\"green\">✓ lazy (5 ms)</font></li>\n<li><font color=\"green\">✓ scheduler (1 ms)</font></li>\n<li><font color=\"green\">✓ events: onTrack (1 ms)</font></li>\n<li><font color=\"green\">✓ events: onTrigger (3 ms)</font></li>\n<li><font color=\"green\">✓ stop (1 ms)</font></li>\n<li>\n<p><font color=\"green\">✓ stop with scheduler (2 ms)</font></p>\n<p>来看下 stop 结合 scheduler 调度器是如何使用的。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'stop with scheduler'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> dummy\n  <span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> prop<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> runner <span class=\"token operator\">=</span> <span class=\"token function\">effect</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// updater</span>\n      dummy <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>prop <span class=\"token comment\">// 这里会立即执行一次收集依赖</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      \n      <span class=\"token function-variable function\">scheduler</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 这里设置触发 trigger:set，但是因为有 scheduler 的存在，所以没有立即调用 effect</span>\n  <span class=\"token comment\">// 而是执行了 scheduler 将 effect 推入了队列 queue</span>\n  obj<span class=\"token punctuation\">.</span>prop <span class=\"token operator\">=</span> <span class=\"token number\">2</span> \n  <span class=\"token comment\">// 所以这里还是 1</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n  <span class=\"token comment\">// 因为上面的赋值触发 scheduler 缘故</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n  <span class=\"token comment\">// 清理依赖，targetMap->depsMap->dep 里面的所有依赖清理掉</span>\n  <span class=\"token comment\">// 且 effect.active = false</span>\n  <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span>runner<span class=\"token punctuation\">)</span> \n\n  <span class=\"token comment\">// a scheduled effect should not execute anymore after stopped</span>\n  <span class=\"token comment\">// 这里执行的其实是 updater -> ReactiveEffect 化之后的 effect</span>\n  <span class=\"token comment\">// 但是在 stop 之后 effect.active 已经是 FALSE 了</span>\n  <span class=\"token comment\">// 所以会直接检测到 effect.options.scheduler 存在，返回 undefined </span>\n  <span class=\"token comment\">// 真正 try 里面的 执行 fn:updater 实际没有到。所以这里相当于什么都没干</span>\n  queue<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 所以这里值也就不会有任何变化了</span>\n  <span class=\"token comment\">// 如果要这里 updater 被调用只要去掉 stop 那句即可，active = true 进入正常</span>\n  <span class=\"token comment\">// 的 effect{try...finaylly} 执行流程触发 updater</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li><font color=\"green\">✓ events: onStop (1 ms)</font></li>\n<li><font color=\"green\">✓ stop: a stopped effect is nested in a normal effect (1 ms)</font></li>\n<li><font color=\"green\">✓ markRaw (1 ms)</font></li>\n<li><font color=\"green\">✓ should not be trigger when the value and the old value both are NaN (1 ms)</font></li>\n<li><font color=\"green\">✓ should trigger all effects when array length is set 0 (1 ms)</font></li>\n</ul>\n<p><span id=\"code2\">阶段代码链接：<a href=\"https://github.com/gcclll/vue-next-code-read/blob/master/bakups/reactive_with_effect_spec_passed.js\">reactive<em>with</em>effect<em>spec</em>passed_js</a>  代码</span></p>\n<h1 id=\"小结-2\" style=\"position:relative;\"><a href=\"#%E5%B0%8F%E7%BB%93-2\" aria-label=\"小结 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>小结 2</h1>\n<p>又是一个周一了，周末又荒废中度过…，回顾下之前的内容(顺序按照当时实现前后顺序排列)：</p>\n<h2 id=\"font-colorpurplereactive---createreactiveobjectfont\" style=\"position:relative;\"><a href=\"#font-colorpurplereactive---createreactiveobjectfont\" aria-label=\"font colorpurplereactive   createreactiveobjectfont permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong><font color=\"purple\">reactive - createReactiveObject</font></strong></h2>\n<ol>\n<li>参数： <code class=\"language-text\">[target, toProxy, toRaw, baseHandlers, collectionHandlers]；</code></li>\n<li><code class=\"language-text\">new Proxy(target, handlers)</code>；</li>\n<li>根据类型选择 <code class=\"language-text\">handlers</code> ，集合类型(Map, Set)用collection，其他对象类型用 base；</li>\n<li>缓存 <em>proxy-target</em> 结果(toProxy: target -> observed, toRaw: observed -> target)；</li>\n<li>过滤条件(已经 proxy 或 toProxy 中已经存在的不用重复 new )；</li>\n<li>非对象判断，能 proxy 的必须是引用类型；</li>\n<li>过滤掉 5 中非法情况(_isVue, _isVNode, rawValues, isFrozen, 非 observable 五种情况)。</li>\n</ol>\n<h2 id=\"font-colorpurplecreategetterfont\" style=\"position:relative;\"><a href=\"#font-colorpurplecreategetterfont\" aria-label=\"font colorpurplecreategetterfont permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong><font color=\"purple\">createGetter</font></strong></h2>\n<p>取值，递归 reactive，调用 track 收集依赖，数组检测(includes, indexOf, lastIndex 特殊处理)，等等。</p>\n<ol>\n<li>参数： <code class=\"language-text\">[isReadonly, shallow]</code>；</li>\n<li><code class=\"language-text\">Reflect.get()</code> 先取值</li>\n<li>判断结果是不是引用类型，如果是调用 reactive 将结果转响应式(嵌套的对象)</li>\n<li>检测是不是只读，如果是就返回只读版本(其实差别就是在 handlers)</li>\n<li>shallow = true 情况，只 reactive 对象一级(嵌套不处理)</li>\n<li>非只读情况调用  <code class=\"language-text\">track()</code> 收集依赖</li>\n<li>检测 key 是不是数组的三个索引方法(includes, indexOf, lastIndexOf)，单独处理(<code class=\"language-text\">arrayInstrumentations</code>)</li>\n</ol>\n<h2 id=\"font-colorpurplecreatesetterfont\" style=\"position:relative;\"><a href=\"#font-colorpurplecreatesetterfont\" aria-label=\"font colorpurplecreatesetterfont permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong><font color=\"purple\">createSetter</font></strong></h2>\n<p>设置，调用 trigger 触发 deps(<code class=\"language-text\">targetMap -&gt; depsMap -&gt; dep</code>)，返回 <code class=\"language-text\">Reflect.set()</code> 结果。</p>\n<ol>\n<li>参数：<code class=\"language-text\">[shallow]</code></li>\n<li><code class=\"language-text\">oldValue = target[key]</code></li>\n<li>事先 <code class=\"language-text\">hasOwnProperty</code> 检测，缓存结果(添加属性的时候需要)</li>\n<li>调用 <code class=\"language-text\">Reflect.set(...)</code> 设置下去</li>\n<li>调用 <code class=\"language-text\">trigger(target, type, key, newValue, oldValue, oldTarget)</code> 触发 deps</li>\n<li>\n<p>增加条件判断，不是什么情况都可以调用 trigger的</p>\n<p>a) target - receiver 必须是对应关系</p>\n<p>b) hasOwn 检测结果失败则为 <code class=\"language-text\">add</code> 操作，否则为 <code class=\"language-text\">set</code> 操作，且 set 操作必须是在值发生改变的情况(排除 <code class=\"language-text\">NaN</code>)</p>\n</li>\n</ol>\n<h2 id=\"font-colorpurpletrackfont\" style=\"position:relative;\"><a href=\"#font-colorpurpletrackfont\" aria-label=\"font colorpurpletrackfont permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong><font color=\"purple\">track</font></strong></h2>\n<p> createGetter 里面调用，用来收集依赖的，依赖都存储在 <code class=\"language-text\">targetMap</code> 里面，分为两级，</p>\n<p>第一级是 Map{target -> Map} 类型</p>\n<p>第二级也是 Map{key -> Set(deps)}</p>\n<ol>\n<li>参数：<code class=\"language-text\">[target, type, key]</code></li>\n<li>从 targetMap 中取 depsMap 该 target 对象对应的所有依赖仓库，没有就初始化 <code class=\"language-text\">new Map()</code></li>\n<li>从 depsMap 取对应 key 的所有依赖仓库 dep，没有就初始化 <code class=\"language-text\">new Set()</code></li>\n<li>检测依赖是否存在(activeEffect)，确保不会重复添加</li>\n<li><code class=\"language-text\">dep.add(activeEffect) -&gt; activeEffect.deps.push(dep)</code></li>\n<li>增加判断，如果当前 <code class=\"language-text\">activeEffect</code> 未具备收集条件(<strong>shouldTrack: true, activeEffect不为空</strong>)，就退出依赖收集。</li>\n</ol>\n<h2 id=\"font-colorpurpletriggerfont\" style=\"position:relative;\"><a href=\"#font-colorpurpletriggerfont\" aria-label=\"font colorpurpletriggerfont permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong><font color=\"purple\">trigger</font></strong></h2>\n<p>createSetter 里调用来，触发依赖调用的，主要包含两个内部函数(add, run)：</p>\n<p>Add: 将于当前要 update 的 deps 收集到一个内部变量 <code class=\"language-text\">effects: Set()</code> 里。</p>\n<p>Run: 使用 run去执行 effects 里面的 dep </p>\n<ol>\n<li>参数： <code class=\"language-text\">[target, type, key, newValue, oldValue, oldTarget]</code></li>\n<li>检测 targetMap -> target 没有依赖直接退出</li>\n<li>实现 add，添加条件：<code class=\"language-text\">shouldTrack = false, effect !== activeEffect</code> 这两个条件能防止栈溢出的问题(比如在 effect(fn) 的 fn 里面做 <code class=\"language-text\">ob.prop++</code> 操作，<a href=\"#test-case-rloops\">之前有分析</a>。)</li>\n<li>\n<p>使用 add 收集 deps，三种情况</p>\n<p>a) 如果 type: clear 将所有 depsMap 添加进去</p>\n<p>b) 如果 key: length 且 target 是数组，说明是数组的增加和删除操作，将 depsMap 中 key 为 ‘length’ 或者 key > newValue 情况的 dep 添加</p>\n<p>c) 其他为对象情况处理(Map类型或Object操作)</p>\n</li>\n<li>最后去执行 run，flush 掉所有 deps(effects, computedEffects)。</li>\n</ol>\n<h2 id=\"font-colorpurpleeffectfont\" style=\"position:relative;\"><a href=\"#font-colorpurpleeffectfont\" aria-label=\"font colorpurpleeffectfont permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong><font color=\"purple\">effect</font></strong></h2>\n<p>构造 dep 类型 ReactiveEffect，其中包含 <code class=\"language-text\">[_isEffect, active, raw, deps, options, id]</code>类型的对象。</p>\n<ol>\n<li>参数：<code class=\"language-text\">[fn, options]</code></li>\n<li>检测 fn._isEffect 如果本身已经是个 ReactiveEffect，取出 fn = fn.raw，重新封装</li>\n<li>定义 _effect 函数，所以 vue3 里面每个 dep 都是一个函数类型，上面追加了若干参数</li>\n<li>_effect 函数的实现重点是 effectStack 和 try…finally，try 里面 enable effect 执行 fn，finally 里面 disable effect。所以这里结合 trigger 里面的 shouldTrack 和 activeEffect 判断来协同防止栈溢出问题。</li>\n<li>_effect 上追加 ReactiveEffect 必备的参数。</li>\n<li>执行一次 <code class=\"language-text\">_effect()</code> (前提是没有设置 options.lazy 属性为 true)</li>\n</ol>\n<h2 id=\"font-colorpurpleownkeys-has-deletefont\" style=\"position:relative;\"><a href=\"#font-colorpurpleownkeys-has-deletefont\" aria-label=\"font colorpurpleownkeys has deletefont permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong><font color=\"purple\">ownKeys, has, delete</font></strong></h2>\n<p>这三个的实现非常简单</p>\n<ol>\n<li>ownKeys 调用 track 收集依赖</li>\n<li>has 调用 track 收集依赖</li>\n<li>delete 调用 trigger 触发 delete 操作</li>\n<li>最后都要返回对应的 Reflect… 操作结果</li>\n</ol>\n<h2 id=\"其他\" style=\"position:relative;\"><a href=\"#%E5%85%B6%E4%BB%96\" aria-label=\"其他 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>其他</h2>\n<p>到此，第一阶段的工作基本已经完成了，我们也得到了一个基本可以跑起来，作用起来的 reactive 。</p>\n<p>接下的内容主要有以下几点：</p>\n<ol>\n<li>集合类型的 <strong>collectionHandlers</strong> 实现，之前都是实现了 <em>baseHandlers</em>，既然 vue3 中独立成两个文件了，肯定有不小的差别，但是有了之前的基础，相信理解 <strong>collectionHandlers</strong> 不会那么困难。</li>\n<li>ref 的实现，这块目前进度几乎为0️⃣，有待研究。</li>\n<li>最后就是其他几个测试用例文件的测试了。</li>\n</ol>\n<p>漫漫源码路其修远兮，吾将前后左右以贯之，加油파이팅🤜🤛！！！</p>\n<p>书大坐阵，稳<del></del>~~</p>\n<p><img src=\"http://qiniu.ii6g.com/1.png?imageMogr2/thumbnail/!100p\"></p>\n<h1 id=\"更新2020-05-25-105440\" style=\"position:relative;\"><a href=\"#%E6%9B%B4%E6%96%B02020-05-25-105440\" aria-label=\"更新2020 05 25 105440 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>更新(2020-05-25 10:54:40)</h1>\n<p>前两天更新了下 vue 仓库源码，发现有不小的改动，这里提前把这些改动合并到之前的阅读上去，以防止后面越走越远，导致越难合并。</p>\n<blockquote>\n<p>5a3b44ca master origin/master chore: fix typo in comment (#1217)\n2b2beb91 build(deps-dev): bump @types/puppeteer from 2.1.0 to 2.1.1\n8e945c97 build(deps-dev): bump @microsoft/api-extractor from 7.8.1 to 7.8.2\n91c4e9b8 build(deps-dev): bump rollup from 2.10.4 to 2.10.5\n96a9d5c6 build(deps-dev): bump rollup from 2.10.2 to 2.10.4\n42e48b83 build(deps-dev): bump @types/jest from 25.2.2 to 25.2.3\n32b3f78a v3.0.0-beta.14 release: v3.0.0-beta.14</p>\n</blockquote>\n<p>本节约定：</p>\n<ol>\n<li>先列出变更对比代码</li>\n<li>未变更的篇幅较多的代码将省略，如注释：// … 省略</li>\n</ol>\n<h2 id=\"reactivets\" style=\"position:relative;\"><a href=\"#reactivets\" aria-label=\"reactivets permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>reactive.ts</h2>\n<h3 id=\"font-colorred首先新增了两个类型：font\" style=\"position:relative;\"><a href=\"#font-colorred%E9%A6%96%E5%85%88%E6%96%B0%E5%A2%9E%E4%BA%86%E4%B8%A4%E4%B8%AA%E7%B1%BB%E5%9E%8B%EF%BC%9Afont\" aria-label=\"font colorred首先新增了两个类型：font permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><font color=\"red\"><strong>首先新增了两个类型：</strong></font></h3>\n<ol>\n<li>\n<p>ReactiveFlags 枚举对象，用来记录对象特征的，比如：是否只读等等</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">enum</span> ReactiveFlags <span class=\"token punctuation\">{</span>\n skip <span class=\"token operator\">=</span> <span class=\"token string\">'__v_skip'</span><span class=\"token punctuation\">,</span>\n isReactive <span class=\"token operator\">=</span> <span class=\"token string\">'__v_isReactive'</span><span class=\"token punctuation\">,</span>\n isReadonly <span class=\"token operator\">=</span> <span class=\"token string\">'__v_isReadonly'</span><span class=\"token punctuation\">,</span>\n raw <span class=\"token operator\">=</span> <span class=\"token string\">'__v_raw'</span><span class=\"token punctuation\">,</span>\n reactive <span class=\"token operator\">=</span> <span class=\"token string\">'__v_reactive'</span><span class=\"token punctuation\">,</span>\n <span class=\"token keyword\">readonly</span> <span class=\"token operator\">=</span> <span class=\"token string\">'__v_readonly'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>Target 接口类型</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 会发现这个和上面的 ReactiveFlags 是相对应的，上面的 enum 代表的是 key 值字符串</span>\n<span class=\"token comment\">// 这里声明了一个 Target 类型，里面包含的就是上面所有 key 字符串对应值为 boolean 的一个对象</span>\n<span class=\"token comment\">// 都是些标识，标识这对象的各种特性</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Target</span> <span class=\"token punctuation\">{</span>\n __v_skip<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span>\n __v_isReactive<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span>\n __v_isReadonly<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span>\n __v_raw<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span>\n __v_reactive<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span>\n __v_readonly<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<h3 id=\"font-colorredcanobserve-实现变化font\" style=\"position:relative;\"><a href=\"#font-colorredcanobserve-%E5%AE%9E%E7%8E%B0%E5%8F%98%E5%8C%96font\" aria-label=\"font colorredcanobserve 实现变化font permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><font color=\"red\"><strong>canObserve 实现变化</strong></font></h3>\n<p><strong>更新后</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 就是把三种非法类型(_isVue, _isVNode, rawValues)进行合并了，使用一个__v_skip 来检测</span>\n<span class=\"token comment\">// 所以关键我们要关注的将是这个 __v_skip 是在哪里给初始化的值(预想应该是在 createGetter 里面)</span>\n<span class=\"token keyword\">const</span> canObserve <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> Target<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\"><span class=\"token builtin\">boolean</span></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">!</span>value<span class=\"token punctuation\">.</span>__v_skip <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token function\">isObservableType</span><span class=\"token punctuation\">(</span><span class=\"token function\">toRawType</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token operator\">!</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">isFrozen</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>更新前</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">canObserve</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">!</span>value<span class=\"token punctuation\">.</span>_isVue <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token operator\">!</span>value<span class=\"token punctuation\">.</span>_isVNode <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token function\">isObservableType</span><span class=\"token punctuation\">(</span><span class=\"token function\">toRawType</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token operator\">!</span>rawValues<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token operator\">!</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">isFrozen</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"font-colorredreactivetargetfont\" style=\"position:relative;\"><a href=\"#font-colorredreactivetargetfont\" aria-label=\"font colorredreactivetargetfont permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><font color=\"red\">reactive(target)</font></h3>\n<p><strong>更新后</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token operator\">:</span> object</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// if trying to observe a readonly proxy, return the readonly version.</span>\n  <span class=\"token comment\">// 变化1 ： 使用了 __v_isReadonly 代替了 readonlyToRaw: WeakMap</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>target <span class=\"token keyword\">as</span> Target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__v_isReadonly<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> target\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 变化2：这里现在只需要四个参数了，将 toProxy 和 toRaw 合并了？？？</span>\n  <span class=\"token comment\">// 只能后面再说了</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">createReactiveObject</span><span class=\"token punctuation\">(</span>\n    target<span class=\"token punctuation\">,</span>\n    <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    mutableHandlers<span class=\"token punctuation\">,</span>\n    mutableCollectionHandlers\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>更新前</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// reactivity start</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>readonlyToRaw<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> target\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">createReactiveObject</span><span class=\"token punctuation\">(</span>\n    target<span class=\"token punctuation\">,</span>\n    rawToReactive<span class=\"token punctuation\">,</span>\n    reactiveToRaw<span class=\"token punctuation\">,</span>\n    mutableHandlers<span class=\"token punctuation\">,</span>\n    mutableCollectionHandlers\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"font-colorredcreatereactiveobjecttarget-isreadonly-basehandlers-collectionhandlersfont\" style=\"position:relative;\"><a href=\"#font-colorredcreatereactiveobjecttarget-isreadonly-basehandlers-collectionhandlersfont\" aria-label=\"font colorredcreatereactiveobjecttarget isreadonly basehandlers collectionhandlersfont permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><font color=\"red\">createReactiveObject(target, isReadonly, baseHandlers, collectionHandlers)</font></h3>\n<p>去掉了 toProxy 和 toRaw，改成了 isReadonly，所以针对这个函数的更新，需要探究去掉这两者之后是如何实现该功能的，或者没有该功能了？？？</p>\n<p><strong>更新后：</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 变化1：参数变少了</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">createReactiveObject</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">target<span class=\"token operator\">:</span> Target<span class=\"token punctuation\">,</span>\n  isReadonly<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">,</span>\n  baseHandlers<span class=\"token operator\">:</span> ProxyHandler<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  collectionHandlers<span class=\"token operator\">:</span> ProxyHandler<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span></span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__DEV__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">value cannot be made reactive: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> target\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// target is already a Proxy, return it.</span>\n  <span class=\"token comment\">// exception: calling readonly() on a reactive object</span>\n  <span class=\"token comment\">// 变化2：直接通过两个 __v_raw 和 __v_isReactive 过滤</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>__v_raw <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>isReadonly <span class=\"token operator\">&amp;&amp;</span> target<span class=\"token punctuation\">.</span>__v_isReactive<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> target\n  <span class=\"token punctuation\">}</span>\n    \n  <span class=\"token comment\">// 变化3：直接返回对应的 target 版本</span>\n  <span class=\"token comment\">// target already has corresponding Proxy</span>\n  <span class=\"token comment\">// 这里应该是直接返回了 target 上的只读和reactive 版本</span>\n  <span class=\"token comment\">// 所以这里就必然存在一个行为，将只读和 reactive 版本赋值到 __v_readonly，__v_reactive</span>\n  <span class=\"token comment\">// 两个属性上去，继续>>></span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token function\">hasOwn</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> isReadonly <span class=\"token operator\">?</span> ReactiveFlags<span class=\"token punctuation\">.</span><span class=\"token keyword\">readonly</span> <span class=\"token operator\">:</span> ReactiveFlags<span class=\"token punctuation\">.</span>reactive<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> isReadonly <span class=\"token operator\">?</span> target<span class=\"token punctuation\">.</span>__v_readonly <span class=\"token operator\">:</span> target<span class=\"token punctuation\">.</span>__v_reactive\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// only a whitelist of value types can be observed.</span>\n  <span class=\"token comment\">// 这里就不说了，变动存在于 canObserve 函数内部</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">canObserve</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> target\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> observed <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>\n    target<span class=\"token punctuation\">,</span>\n    collectionTypes<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span><span class=\"token keyword\">constructor</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> collectionHandlers <span class=\"token operator\">:</span> baseHandlers\n  <span class=\"token punctuation\">)</span>\n  \n  <span class=\"token comment\">// 变化4：使用了 def 函数，估计缓存target两个版本，就是在这里实现的</span>\n  <span class=\"token comment\">// 本次更新重点应该就是这个 def 了，离真相越来越近了......</span>\n  <span class=\"token function\">def</span><span class=\"token punctuation\">(</span>\n    target<span class=\"token punctuation\">,</span>\n    isReadonly <span class=\"token operator\">?</span> ReactiveFlags<span class=\"token punctuation\">.</span><span class=\"token keyword\">readonly</span> <span class=\"token operator\">:</span> ReactiveFlags<span class=\"token punctuation\">.</span>reactive<span class=\"token punctuation\">,</span>\n    observed\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> observed\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>更新前：</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 变化1：参数变少了</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">createReactiveObject</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">target<span class=\"token punctuation\">,</span>\n  toProxy<span class=\"token punctuation\">,</span>\n  toRaw<span class=\"token punctuation\">,</span>\n  baseHandlers<span class=\"token punctuation\">,</span>\n  collectionHandlers</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>target <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> target <span class=\"token operator\">!==</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> target\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 变化2</span>\n  <span class=\"token keyword\">let</span> observed <span class=\"token operator\">=</span> toProxy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>observed <span class=\"token operator\">!==</span> <span class=\"token keyword\">void</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> observed\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>toRaw<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> target\n  <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 变化2 end</span>\n    \n \t<span class=\"token comment\">// 变化3：... 新增</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">canObserve</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> target\n  <span class=\"token punctuation\">}</span> \n\n  <span class=\"token keyword\">const</span> handlers <span class=\"token operator\">=</span> collectionTypes<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">?</span> collectionHandlers\n    <span class=\"token operator\">:</span> baseHandlers\n  observed <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> handlers<span class=\"token punctuation\">)</span>\n  \n  <span class=\"token comment\">// 变化4：使用 def 代替</span>\n  toProxy<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> observed<span class=\"token punctuation\">)</span>\n  toRaw<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>observed<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> observed\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>下面就不继续更了，都是些小函数围绕 def, Target, ReactiveFlags 的更新。</p>\n<h2 id=\"basehandlersts-1\" style=\"position:relative;\"><a href=\"#basehandlersts-1\" aria-label=\"basehandlersts 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>baseHandlers.ts</h2>\n<h3 id=\"font-colorredcreategetterisreadonly--false-shallow--false-font\" style=\"position:relative;\"><a href=\"#font-colorredcreategetterisreadonly--false-shallow--false-font\" aria-label=\"font colorredcreategetterisreadonly  false shallow  false font permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><font color=\"red\">createGetter(isReadonly = false, shallow = false) </font></h3>\n<p><strong>更新后(只有一个变化，标识性属性的读取处理)：</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">createGetter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">isReadonly <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> shallow <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token operator\">:</span> object<span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">symbol</span><span class=\"token punctuation\">,</span> receiver<span class=\"token operator\">:</span> object</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 变化1：新增对标识性的属性读取，vue 给增加的一些属性</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">===</span> ReactiveFlags<span class=\"token punctuation\">.</span>isReactive<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span>isReadonly\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">===</span> ReactiveFlags<span class=\"token punctuation\">.</span>isReadonly<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> isReadonly\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">===</span> ReactiveFlags<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> target\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> targetIsArray <span class=\"token operator\">=</span> <span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// ... 为了节省篇幅，未变化的就省略吧，后续的也如此</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>更新前：</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">createGetter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">isReadonly <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> shallow <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> receiver</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 变化1：新增</span>\n    <span class=\"token comment\">/*\n    \t...\n    */</span>\n    <span class=\"token keyword\">const</span> targetIsArray <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n     <span class=\"token comment\">// ... 为了节省篇幅，未变化的就省略吧，后续的也如此</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"effectts-1\" style=\"position:relative;\"><a href=\"#effectts-1\" aria-label=\"effectts 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>effect.ts</h2>\n<p>变量及类型声明变更：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Dep <span class=\"token operator\">=</span> Set<span class=\"token operator\">&lt;</span>ReactiveEffect<span class=\"token operator\">></span> <span class=\"token comment\">// 新增 Dep 类型</span>\n<span class=\"token keyword\">type</span> KeyToDepMap <span class=\"token operator\">=</span> Map<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> Dep<span class=\"token operator\">></span> <span class=\"token comment\">// 新增对象的 key -> Dep</span>\n<span class=\"token keyword\">const</span> targetMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakMap</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> KeyToDepMap<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"jest\" style=\"position:relative;\"><a href=\"#jest\" aria-label=\"jest permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>jest</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">☁  vue-next-code-read [master] jest\nFAIL  packages/__tests__/reactive/reactive.spec.js (5.447 s)\n● reactivity/reactive › markRaw\n\nexpect(received).toBe(expected) // Object.is equality\n\nExpected: false\nReceived: true\n\n106 |     })\n107 |     expect(isReactive(obj.foo)).toBe(true)\n\n  &gt; 108 |     expect(isReactive(obj.bar)).toBe(false)\n  &gt;  |                                 ^\n  &gt; 109 |   })\n  &gt; 110 |\n  &gt; 111 |   test(&#39;should not observe frozen objects&#39;, () =&gt; {\n\n    at Object.&lt;anonymous&gt; (packages/__tests__/reactive/reactive.spec.js:108:33)\n\nFAIL  packages/__tests__/reactive/effect.spec.js (5.589 s)\n● reactivity/effect › markRaw\n\n  expect(received).toBe(expected) // Object.is equality\n\n  Expected: 0\n  Received: 1\n\n    744 |     expect(dummy).toBe(0)\n    745 |     obj.foo.prop++\n\n  &gt; 746 |     expect(dummy).toBe(0)\n  &gt;  |                   ^\n  &gt; 747 |     obj.foo = { prop: 1 }\n  &gt; 748 |     expect(dummy).toBe(1)\n  &gt; 749 |   })\n\n    at Object.&lt;anonymous&gt; (packages/__tests__/reactive/effect.spec.js:746:19)\n\nTest Suites: 2 failed, 2 total\nTests:       2 failed, 59 passed, 61 total\nSnapshots:   0 total\nTime:        9.857 s\nRan all test suites.</code></pre></div>\n<p>这两个原因其实都是因为 canObserve 还没更新过来，修改如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">canObserve</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">!</span>value<span class=\"token punctuation\">.</span>__v_skip <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token function\">isObservableType</span><span class=\"token punctuation\">(</span><span class=\"token function\">toRawType</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token operator\">!</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">isFrozen</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>重新 jest 通过：</p>\n<blockquote>\n<p>☁  vue-next-code-read [master] ⚡  jest\nPASS  packages/<strong>tests</strong>/reactive/reactive.spec.js (5.311 s)\nPASS  packages/<strong>tests</strong>/reactive/effect.spec.js (5.429 s)</p>\n<p>Test Suites: 2 passed, 2 total\nTests:       61 passed, 61 total\nSnapshots:   0 total\nTime:        9.612 s\nRan all test suites.\n☁  vue-next-code-read [master] ⚡</p>\n</blockquote>\n<p><span id=\"file-0521\"><a href=\"https://github.com/gcclll/vue-next-code-read/blob/master/bakups/reactive_with_update_0521.js\">Reactive.js</a></span></p>\n<h2 id=\"\" style=\"position:relative;\"><a href=\"#\" aria-label=\" permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h1 id=\"collectionhandlersts\" style=\"position:relative;\"><a href=\"#collectionhandlersts\" aria-label=\"collectionhandlersts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>collectionHandlers.ts</h1>\n<p>也该开始集合类型支持了，这部分的修改主要集中在这个文件里面，因为之前 reactive.ts, effect.ts 里面都已经把集合类型代码合并进去了(其实除了 trigger 里面有部分的 map 相关区分之后，绝大部分都是一样的)。</p>\n<p>这里可能得做个事情，如果还想坚持使用一个 js 文件来完成功能，那只能考虑使用作用域对象来处理了，即将 baseHandlers 和 collectionHandlers 分别用单独一个对象来承载，因为里面的函数名都是同一个，不然就只能拆分成多个文件了。</p>\n<p>思考中 ☡☡☡☡☡☡☡☡☡☡☡☡☡☡☡☡☡☡☡☡☡…</p>\n<p>还是拆分吧，和 vue 源码结构保持一致，增加 reactive 目录来承载。</p>\n<p>分离之后的目录备份 <a href=\"https://github.com/gcclll/vue-next-code-read/tree/master/bakups/reactive_files_v\">bakups/reactive<em>files</em>v</a></p>\n<p>下面进入正题 >>>>>>>></p>\n<p>新建 collectionHandlers.js 用来定义集合类型有关的 proxy handlers。</p>\n<p>把 reactive.js 里面的 </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// TODO</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> mutableCollectionHandlers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> readonlyCollectionHandlers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> shallowCollectionHandlers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>移到 <em>collectionHandler.js</em> 里，这节接下来所有的工作都是为了构建这三个 handlers。</p>\n<p>将按 get -> set -> size -> add -> deleteEntry -> has -> clear 顺序来一步步实现。</p>\n<h2 id=\"准备工作\" style=\"position:relative;\"><a href=\"#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" aria-label=\"准备工作 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>准备工作</h2>\n<p>有了 baseHandlers.ts 实现的基础，就没必要再那么详细的步骤去实现了，这里将所有准备工作做足，主要就是一些基础变量的声明，在理解它的基础上先声明好，而不是用的时候再去声明。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// reactive 化</span>\n<span class=\"token keyword\">const</span> toReactive <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">unknown</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\"><span class=\"token constant\">T</span></span> <span class=\"token operator\">=></span>\n  <span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> value\n\n<span class=\"token comment\">// readonly reactive</span>\n<span class=\"token keyword\">const</span> toReadonly <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">unknown</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\"><span class=\"token constant\">T</span></span> <span class=\"token operator\">=></span>\n  <span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">readonly</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> value\n\n<span class=\"token comment\">// shallow reactive</span>\n<span class=\"token keyword\">const</span> toShallow <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">unknown</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\"><span class=\"token constant\">T</span></span> <span class=\"token operator\">=></span> value\n<span class=\"token comment\">// 取原型原子操作 Reflect</span>\n<span class=\"token keyword\">const</span> getProto <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">CollectionTypes</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>v<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\"><span class=\"token builtin\">any</span></span> <span class=\"token operator\">=></span>\n  Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 三个 handlers 对应的 instrumentations</span>\n<span class=\"token keyword\">const</span> mutableInstrumentations<span class=\"token operator\">:</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Function</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span>  <span class=\"token punctuation\">{</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> shallowInstrumentations<span class=\"token operator\">:</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Function</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> readonlyInstrumentations<span class=\"token operator\">:</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Function</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 集合类型几个迭代方法和迭代器</span>\n<span class=\"token keyword\">const</span> iteratorMethods <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'keys'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'values'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'entries'</span><span class=\"token punctuation\">,</span> Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// 三个 handlers 只需要一个 get ????????????</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> mutableCollectionHandlers<span class=\"token operator\">:</span> ProxyHandler<span class=\"token operator\">&lt;</span>CollectionTypes<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">get</span><span class=\"token operator\">:</span> <span class=\"token function\">createInstrumentationGetter</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> shallowCollectionHandlers<span class=\"token operator\">:</span> ProxyHandler<span class=\"token operator\">&lt;</span>CollectionTypes<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">get</span><span class=\"token operator\">:</span> <span class=\"token function\">createInstrumentationGetter</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> readonlyCollectionHandlers<span class=\"token operator\">:</span> ProxyHandler<span class=\"token operator\">&lt;</span>CollectionTypes<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">get</span><span class=\"token operator\">:</span> <span class=\"token function\">createInstrumentationGetter</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"createinstrumentationgetter\" style=\"position:relative;\"><a href=\"#createinstrumentationgetter\" aria-label=\"createinstrumentationgetter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>createInstrumentationGetter</h2>\n<p>由于三个 handlers 都是由这个生成的，所以我们不得不以这个函数作为切入点。</p>\n<p>在这之前必须的完成准备工作，把需要的变量都实现准备好。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// proxy handlers 对象</span>\n<span class=\"token keyword\">const</span> mutableInstrumentations <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> shallowInstrumentations <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> readonlyInstrumentations <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createInstrumentationGetter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">isReadonly<span class=\"token punctuation\">,</span> shallow</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 决定使用哪种类型的 instru...</span>\n  <span class=\"token keyword\">const</span> instrumentations <span class=\"token operator\">=</span> shallow\n    <span class=\"token operator\">?</span> shallowInstrumentations\n    <span class=\"token operator\">:</span> isReadonly\n    <span class=\"token operator\">?</span> readonlyInstrumentations\n    <span class=\"token operator\">:</span> mutableInstrumentations\n\n  <span class=\"token comment\">// Reflect.get 类型的 proxy handler</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> receiver</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> ReactiveFlags<span class=\"token punctuation\">.</span>isReactive<span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span>isReadonly\n      <span class=\"token keyword\">case</span> ReactiveFlags<span class=\"token punctuation\">.</span>isReadonly<span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> isReadonly\n      <span class=\"token keyword\">case</span> ReactiveFlags<span class=\"token punctuation\">.</span>raw<span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> target\n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">break</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 难道集合类型的 proxy handler 统统走的都是 proxy get ???</span>\n  <span class=\"token keyword\">return</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">hasOwn</span><span class=\"token punctuation\">(</span>instrumentations<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> key <span class=\"token keyword\">in</span> target <span class=\"token operator\">?</span> instrumentations <span class=\"token operator\">:</span> target<span class=\"token punctuation\">,</span>\n    key<span class=\"token punctuation\">,</span>\n    receiver\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里对于集合类型只提供一个 get proxy handler 和之前碰到过的报错 <a href=\"#error-map\">VM1029:1 Uncaught TypeError: Method Map.prototype.get called on incompatible receiver [object Object]</a> 问题是一样的，网上说的是丢失了作用域，看报错的提示也确实是这个原因。</p>\n<p>根源在于你使用 observed->Map 的时候，需要通过 <code class=\"language-text\">observed.get()</code> 去调用，但 observed 是个 Proxy 类型，在 proxy handler 里面 Reflect 需要调用的又是 Map 类型上面的 get 方法(因为它是 target 的原子操作啊)，因此就出现了 Proxy -> 调用 Map.prototype.get 导致失败报错 。</p>\n<p>要解决这个问题，最简单是改变 Reflect.get 的调用作用，如：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> m <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> ob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> receiver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> key <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> <span class=\"token string\">'111 get proxy'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> receiver<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>既然现在知道了 map 的操作都需要通过 get 来进行进一步”代理”，<code class=\"language-text\">createInstrumentationGetter</code> 也实现了，这个也很简单，就是根据特性判断采用那一个 instrumentations，然后返回 <code class=\"language-text\">Reflect.get</code> 结果，中间加上了 ReactiveFlags 的一些判断而已。</p>\n<p>三个 handlers ：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> mutableCollectionHandlers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">get</span><span class=\"token operator\">:</span> <span class=\"token function\">createInstrumentationGetter</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> readonlyCollectionHandlers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">get</span><span class=\"token operator\">:</span> <span class=\"token function\">createInstrumentationGetter</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> shallowCollectionHandlers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">get</span><span class=\"token operator\">:</span> <span class=\"token function\">createInstrumentationGetter</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"gettarget-key-wrap\" style=\"position:relative;\"><a href=\"#gettarget-key-wrap\" aria-label=\"gettarget key wrap permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>get(target, key, wrap)</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> wrap</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  target <span class=\"token operator\">=</span> <span class=\"token function\">toRaw</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> rawKey <span class=\"token operator\">=</span> <span class=\"token function\">toRaw</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> rawKey <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'get'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">!==</span> rawKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">track</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">track</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span> rawKey<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> has<span class=\"token punctuation\">,</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">getProto</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">has</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">has</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> rawKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> rawKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>测试：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> or <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> ob <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>or<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isReactive</span><span class=\"token punctuation\">(</span>ob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'is reactive'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>or <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'or is map'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ob <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ob is map'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'============================='</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> dummy\n<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  dummy <span class=\"token operator\">=</span> ob<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dummy <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>\nob<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>结果：</p>\n<p><img src=\"http://qiniu.ii6g.com/1590398397.png?imageMogr2/thumbnail/!100p\"></p>\n<p>注意看 createInstrumentationGetter 返回的箭头函数里返回的值：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">return</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">hasOwn</span><span class=\"token punctuation\">(</span>instrumentations<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> key <span class=\"token keyword\">in</span> target\n  <span class=\"token operator\">?</span> instrumentations\n  <span class=\"token operator\">:</span> target<span class=\"token punctuation\">,</span>\n  key<span class=\"token punctuation\">,</span>\n  receiver\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 上面的假设是 mutableInstrumentations，那么上面的代码就相当于</span>\n<span class=\"token comment\">// 假设调用的是 observed.get(key, ...)，那么第二个参数 key = 'get'</span>\n<span class=\"token keyword\">return</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* mutableInstrumentations 里面的 get 方法*/</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span> receiver<span class=\"token punctuation\">)</span></code></pre></div>\n<p>经过上面的转换之后就比较有意思了，不管你通过 observed 调用什么方法，最终都会被转成 Reflect.get 取值操作，而取值的关键在于两点：</p>\n<ol>\n<li>被取值的对象这里就是我们真正定义的 proxy handler 对象，里面包含了指定特性需要的函数</li>\n<li>key 为 observed 调用的那个方法名称，必须取值 observed.get 那么 key 就是 ‘get’，observed.set ，那么 key 就是 ‘set’</li>\n</ol>\n<p>最终 observed.get ---> 其实就是 <code class=\"language-text\">mutableInstrumentations.get</code> 。</p>\n<h3 id=\"font-colorredtodofont-疑问？？\" style=\"position:relative;\"><a href=\"#font-colorredtodofont-%E7%96%91%E9%97%AE%EF%BC%9F%EF%BC%9F\" aria-label=\"font colorredtodofont 疑问？？ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><font color=\"red\">TODO</font> 疑问？？</h3>\n<ol>\n<li>\n<p>Get 里的 两次 toRaw 是啥意思？？？</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> wrap</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">// 这里为啥要取两次 toRaw，然后可能会触发两次 track???</span>\n target <span class=\"token operator\">=</span> <span class=\"token function\">toRaw</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">const</span> rawKey <span class=\"token operator\">=</span> <span class=\"token function\">toRaw</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">!==</span> rawKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">track</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token function\">track</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span> rawKey<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><span id=\"question-this\">在实现 get 的时候 vue 源码里是这样的： <code class=\"language-text\">get(this: MapTypes, ...)</code> 但实际这种语法在 js 中肯定是不支持的</span></p>\n<p>然后自己就改写了下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// proxy handlers 对象</span>\n<span class=\"token keyword\">const</span> mutableInstrumentations <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>scope<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> toReactive<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n <span class=\"token keyword\">set</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>结果发现不太对：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> or <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> ob <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>or<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> dummy\n<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n dummy <span class=\"token operator\">=</span> ob<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">)</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dummy <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'effect'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dummy <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">/* ob.set('key', 'value') */</span>\n<span class=\"token comment\">/* console.log({ dummy }, '2') */</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>targetMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>or<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>结果：</p>\n<p><img src=\"http://qiniu.ii6g.com/1590402707.png?imageMogr2/thumbnail/!100p\"></p>\n<p>这里收集的依赖的 key 竟然是 <code class=\"language-text\">undefined</code>，也就是说传入给 <code class=\"language-text\">get(target, key, wrap)</code> 的 key 丢失了。</p>\n<p>虽然知道原因：就是上面的 mutableInstrumentations 的 get 多了一个参数啊，这貌似哪里不太对，无奈去看了下 <code class=\"language-text\">vue.global.js</code> 打包之后的代码，才发现端倪。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 打包之后的 get</span>\n<span class=\"token keyword\">const</span> readonlyInstrumentations <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 请看这里，打包之后第一个 this 没有了</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">get</span><span class=\"token function\">$1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> toReadonly<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 打包之前的 get，ts语法</span>\n<span class=\"token keyword\">const</span> mutableInstrumentations<span class=\"token operator\">:</span> Record<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> Function<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">:</span> MapTypes<span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> toReactive<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>由于 js 是不支持用 this 做函数参数的，所以只能从 TypeScript 去方向着手了…，然后，然后就有了结果：</p>\n<p>ts 中的 <a href=\"https://www.typescriptlang.org/docs/handbook/functions.html\">this 作为函数第一个参数的语法</a>说明</p>\n<p><img src=\"http://qiniu.ii6g.com/1590403211.png?imageMogr2/thumbnail/!100p\"></p>\n<p>被圈圈的两个单词是关键，它就是个假的参数，作用也就是让函数能声明它被调用的那个对象是什么类型，因此也就明白为何打包之前和打包之后代码的差异了。</p>\n<p>所以该问题解决方法就是去掉第一个参数，只有一个参数 key ，如：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> mutableInstrumentations <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> toReactive<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n <span class=\"token keyword\">set</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<h2 id=\"setthis-key-value\" style=\"position:relative;\"><a href=\"#setthis-key-value\" aria-label=\"setthis key value permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>set(this, key, value)</h2>\n<p>弄清楚 TypeScript 的 this argument 之后，解决了 get 也就解决了 set 问题了。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  value <span class=\"token operator\">=</span> <span class=\"token function\">toRaw</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 取调用 set 的那个对象，取出它原型上的 has, get, set，</span>\n  <span class=\"token comment\">// 也就是 target: Map </span>\n  <span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token function\">toRaw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> has<span class=\"token punctuation\">,</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">getProto</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">let</span> hadKey <span class=\"token operator\">=</span> <span class=\"token function\">has</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hadKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// key 是不是有可能也是个 observed ???</span>\n    <span class=\"token comment\">// Map 的 key 不仅限于普通类型，可以是任意类型</span>\n    key <span class=\"token operator\">=</span> <span class=\"token function\">toRaw</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 那么重新取一次值</span>\n    hadKey <span class=\"token operator\">=</span> <span class=\"token function\">has</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__DEV__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// TODO</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 取旧值</span>\n  <span class=\"token keyword\">const</span> oldValue <span class=\"token operator\">=</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 把值设置到 observed 之前的对象上，可参考下面的结果图</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n  \n  <span class=\"token comment\">// 下面就是跟 basehandler 一样的增加或设置操作了</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hadKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">hasChanged</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">'set'</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token comment\">// 记得返回设置结果</span>\n  <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>测试：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> or <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> ob <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>or<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> dummy\n<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  dummy <span class=\"token operator\">=</span> ob<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dummy <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>\nob<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dummy <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>targetMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>or<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>结果：</p>\n<p><img src=\"http://qiniu.ii6g.com/1590405427.png?imageMogr2/thumbnail/!100p\"></p>\n<p>有了 get 和 set 实现打基础下面的实现就🌾渠成了，但革命还未成功，依旧需要努力谨慎，🐩🐩🐩…</p>\n<h2 id=\"sizetarget\" style=\"position:relative;\"><a href=\"#sizetarget\" aria-label=\"sizetarget permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>size(target)</h2>\n<p>Map 的 size 属性是一个原型是上的属性： <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/size\">Map.prototype.size</a>， 至于为什么要用ITERATE_KEY 那就需要看下</p>\n<p><a href=\"https://tc39.es/ecma262/#sec-get-map.prototype.size\">这里了</a></p>\n<p>实现的时候是需要对 Map 进行迭代的(<code class=\"language-text\">for [key, value] of map</code>)，因此会触发 iterate 行为来收集依赖。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  target <span class=\"token operator\">=</span> <span class=\"token function\">toRaw</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">track</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">'iterate'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">ITERATE_KEY</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// size 是在 Map 原型上的一个属性</span>\n  <span class=\"token keyword\">return</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token function\">getProto</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'size'</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>更新 mutableInstrumentations:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// proxy handlers 对象</span>\n<span class=\"token keyword\">const</span> mutableInstrumentations <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> toReactive<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">set</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"addvalue\" style=\"position:relative;\"><a href=\"#addvalue\" aria-label=\"addvalue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>add(value)</h2>\n<p>限于 Set 类型使用，但是为啥不加个判断呢？？？</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  value <span class=\"token operator\">=</span> <span class=\"token function\">toRaw</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token function\">toRaw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> proto <span class=\"token operator\">=</span> <span class=\"token function\">getProto</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Set.prototype ....</span>\n  <span class=\"token keyword\">const</span> hadKey <span class=\"token operator\">=</span> proto<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Set.prototype.has</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> proto<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Set.prototype.add</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hadKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>测试</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> or <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> ob <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>or<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> dummy\n<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  dummy <span class=\"token operator\">=</span> ob<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dummy <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'before'</span><span class=\"token punctuation\">)</span>\nob<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dummy <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'after'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>结果：</p>\n<blockquote>\n<p>{dummy: false} “before”\n{dummy: true} “after”</p>\n</blockquote>\n<h2 id=\"deleteentrykey\" style=\"position:relative;\"><a href=\"#deleteentrykey\" aria-label=\"deleteentrykey permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>deleteEntry(key)</h2>\n<p>Map/Set.prototype.delete 的 proxy handler</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">deleteEntry</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token function\">toRaw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> has<span class=\"token punctuation\">,</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">delete</span><span class=\"token operator\">:</span> del <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">getProto</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> hadKey <span class=\"token operator\">=</span> <span class=\"token function\">has</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hadKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    key <span class=\"token operator\">=</span> <span class=\"token function\">toRaw</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n    hadKey <span class=\"token operator\">=</span> <span class=\"token function\">has</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__DEV__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// TODO</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> oldValue <span class=\"token operator\">=</span> <span class=\"token keyword\">get</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">del</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hadKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">'delete'</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>测试</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> or <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> ob <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>or<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> dummy\n<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  dummy <span class=\"token operator\">=</span> ob<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dummy <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'before'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\nob<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 增加，触发 fn -> updater</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dummy <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'after'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nob<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 清空，trigger: clear</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dummy <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cleared'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\nob<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// trigger: add</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dummy <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nob<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span> <span class=\"token comment\">// trigger: delete</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dummy <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'deleted'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p>结果</p>\n<blockquote>\n<p>{dummy: false} “before”\n{dummy: true} “after”\n{dummy: false} “cleared”\n{dummy: true} “add”\n{dummy: false} “deleted”</p>\n</blockquote>\n<h2 id=\"haskey\" style=\"position:relative;\"><a href=\"#haskey\" aria-label=\"haskey permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>has(key)</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token function\">toRaw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> rawKey <span class=\"token operator\">=</span> <span class=\"token function\">toRaw</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">!==</span> rawKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">track</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">'has'</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">track</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">'has'</span><span class=\"token punctuation\">,</span> rawKey<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> has <span class=\"token operator\">=</span> <span class=\"token function\">getProto</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>has\n  <span class=\"token keyword\">return</span> <span class=\"token function\">has</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">has</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> rawKey<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\t</code></pre></div>\n<p>测试：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> or <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> ob <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>or<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> dummy<span class=\"token punctuation\">,</span> has\n<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  dummy <span class=\"token operator\">=</span> ob<span class=\"token punctuation\">.</span>size\n  has <span class=\"token operator\">=</span> ob<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dummy<span class=\"token punctuation\">,</span> has <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'before'</span><span class=\"token punctuation\">)</span>\nob<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 改变了 size</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dummy<span class=\"token punctuation\">,</span> has <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'after'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>结果：</p>\n<blockquote>\n<p>{dummy: 0, has: false} “before”\n{dummy: 1, has: true} “after”</p>\n</blockquote>\n<h2 id=\"clear\" style=\"position:relative;\"><a href=\"#clear\" aria-label=\"clear permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>clear()</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token function\">toRaw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> hadItems <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>size <span class=\"token operator\">!==</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">const</span> oldTarget <span class=\"token operator\">=</span> __DEV__\n    <span class=\"token operator\">?</span> target <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Map</span>\n      <span class=\"token operator\">?</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span>\n\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">getProto</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hadItems<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">'clear'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> oldTarget<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>测试</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> or <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> ob <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>or<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> dummy\n<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  dummy <span class=\"token operator\">=</span> ob<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dummy <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'before'</span><span class=\"token punctuation\">)</span>\nob<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dummy <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'after'</span><span class=\"token punctuation\">)</span>\nob<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dummy <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cleared'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>结果</p>\n<blockquote>\n<p>{dummy: false} “before”\n{dummy: true} “after”\n{dummy: false} “cleared”</p>\n</blockquote>\n<h2 id=\"foreachisreadonly-shallow\" style=\"position:relative;\"><a href=\"#foreachisreadonly-shallow\" aria-label=\"foreachisreadonly shallow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>forEach(isReadonly, shallow)</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback<span class=\"token punctuation\">,</span> thisArg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> observed <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n    <span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token function\">toRaw</span><span class=\"token punctuation\">(</span>observed<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> wrap <span class=\"token operator\">=</span> isReadonly <span class=\"token operator\">?</span> toReadonly <span class=\"token operator\">:</span> shallow <span class=\"token operator\">?</span> toShallow <span class=\"token operator\">:</span> toReactive\n\n    <span class=\"token operator\">!</span>isReadonly <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">track</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">'iterate'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">ITERATE_KEY</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 封装的目的：</span>\n    <span class=\"token comment\">// 1. 确保在 thisArg 作用域下调用</span>\n    <span class=\"token comment\">// 2. 确保传递给 callback 的值都是 creative 的</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">wrappedCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>thisArg<span class=\"token punctuation\">,</span> <span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> observed<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">getProto</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> wrappedCallback<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>测试</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> or <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> ob <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>or<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> dummy\n<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  ob<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> val</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    dummy<span class=\"token operator\">++</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dummy <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nob<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dummy <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nob<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dummy <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nob<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dummy <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>未实现之前结果</p>\n<blockquote>\n<p>{dummy: 0} 0\n{dummy: 0} 1\n{dummy: 0} 2\n{dummy: 0} 3</p>\n</blockquote>\n<p>实现之后结果</p>\n<blockquote>\n<p>{dummy: 0} 0\n{dummy: 1} 1\n{dummy: 3} 2\n{dummy: 6} 3</p>\n</blockquote>\n<h2 id=\"三个小矮人handlers-createiterablemethod\" style=\"position:relative;\"><a href=\"#%E4%B8%89%E4%B8%AA%E5%B0%8F%E7%9F%AE%E4%BA%BAhandlers-createiterablemethod\" aria-label=\"三个小矮人handlers createiterablemethod permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>三个小矮人(handlers, createIterableMethod)</h2>\n<p>只读操作的 handlers ：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 只读函数，会改变对象的操作均不响应</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">createReadonlyMethod</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__DEV__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">on key \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" </span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>type<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> operation </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">failed: target is readonly.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">toRaw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> type <span class=\"token operator\">===</span> <span class=\"token string\">'delete'</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">this</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>三个小主人公：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// proxy handlers 对象</span>\n<span class=\"token keyword\">const</span> mutableInstrumentations <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> toReactive<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">set</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  has<span class=\"token punctuation\">,</span>\n  add<span class=\"token punctuation\">,</span>\n  clear<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">delete</span><span class=\"token operator\">:</span> deleteEntry<span class=\"token punctuation\">,</span>\n  forEach<span class=\"token operator\">:</span> <span class=\"token function\">createForEach</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> shallowInstrumentations <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> toShallow<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  has<span class=\"token punctuation\">,</span>\n  add<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">set</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">delete</span><span class=\"token operator\">:</span> deleteEntry<span class=\"token punctuation\">,</span>\n  clear<span class=\"token punctuation\">,</span>\n  forEach<span class=\"token operator\">:</span> <span class=\"token function\">createForEach</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> readonlyInstrumentations <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> toReadonly<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  has<span class=\"token punctuation\">,</span>\n  add<span class=\"token operator\">:</span> <span class=\"token function\">createReadonlyMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">'add'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">set</span><span class=\"token operator\">:</span> <span class=\"token function\">createReadonlyMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">'set'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">delete</span><span class=\"token operator\">:</span> <span class=\"token function\">createReadonlyMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">'delete'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  clear<span class=\"token operator\">:</span> <span class=\"token function\">createReadonlyMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clear'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  forEach<span class=\"token operator\">:</span> <span class=\"token function\">createForEach</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>针对迭代器操作，创建迭代器代理 handler:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">createIterableMethod</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">method<span class=\"token punctuation\">,</span> isReadonly<span class=\"token punctuation\">,</span> shallow</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token function\">toRaw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> isMap <span class=\"token operator\">=</span> target <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Map</span>\n    <span class=\"token comment\">// 检测是不是 Set 或 Map，Map迭代的时候返回的是for [key, value] of map</span>\n    <span class=\"token comment\">// Set 迭代的时候返回的时候是 for value of set</span>\n    <span class=\"token comment\">// Object.entries()</span>\n    <span class=\"token keyword\">const</span> isPair <span class=\"token operator\">=</span> method <span class=\"token operator\">===</span> <span class=\"token string\">'entries'</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>method <span class=\"token operator\">===</span> Symbol<span class=\"token punctuation\">.</span>iterator <span class=\"token operator\">&amp;&amp;</span> isMap<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// Object.keys()</span>\n    <span class=\"token keyword\">const</span> isKeyOnley <span class=\"token operator\">=</span> method <span class=\"token operator\">===</span> <span class=\"token string\">'keys'</span> <span class=\"token operator\">&amp;&amp;</span> isMap\n    <span class=\"token comment\">// 取出原生的 迭代器</span>\n    <span class=\"token keyword\">const</span> innerIterator <span class=\"token operator\">=</span> <span class=\"token function\">getProto</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>method<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 嵌套 reactive</span>\n    <span class=\"token keyword\">const</span> wrap <span class=\"token operator\">=</span> isReadonly <span class=\"token operator\">?</span> toReadonly <span class=\"token operator\">:</span> shallow <span class=\"token operator\">?</span> toShallow <span class=\"token operator\">:</span> toReactive\n    <span class=\"token comment\">// 触发迭代器 收集依赖</span>\n    <span class=\"token operator\">!</span>isReadonly <span class=\"token operator\">&amp;&amp;</span>\n      <span class=\"token function\">track</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">'iterate'</span><span class=\"token punctuation\">,</span> isKeyOnley <span class=\"token operator\">?</span> <span class=\"token constant\">MAP_KEY_ITERATE_KEY</span> <span class=\"token operator\">:</span> <span class=\"token constant\">ITERATE_KEY</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 封装一层，迭代器的两个必备条件：1. next()，2. Symbol.iterator 必须实现</span>\n      <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 原本的迭代器</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">,</span> done <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> innerIterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> done\n          <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">,</span> done <span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          \t\t<span class=\"token comment\">// 处理 entries 或 keys, values，对嵌套的对象进行 reactiv</span>\n              value<span class=\"token operator\">:</span> isPair <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n              done\n            <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// 可迭代对象实现基础</span>\n      <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>测试</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> or <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> ob <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>or<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> keys<span class=\"token punctuation\">,</span> values<span class=\"token punctuation\">,</span> entries\n<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  keys <span class=\"token operator\">=</span> ob<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  values <span class=\"token operator\">=</span> ob<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  entries <span class=\"token operator\">=</span> ob<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>keys<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> values<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> entries<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nob<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>keys<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> values<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> entries<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>结果</p>\n<p><img src=\"http://qiniu.ii6g.com/1590456092.png?imageMogr2/thumbnail/!100p\"></p>\n<h2 id=\"jest-1\" style=\"position:relative;\"><a href=\"#jest-1\" aria-label=\"jest 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>jest</h2>\n<p>结果：</p>\n<blockquote>\n<p>☁  vue-next-code-read [master] ⚡  jest\nPASS  packages/<strong>tests</strong>/reactive/reactive.spec.js\nPASS  packages/<strong>tests</strong>/reactive/effect.spec.js\nPASS  packages/<strong>tests</strong>/reactive/collection/WeakSet.spec.js\nPASS  packages/<strong>tests</strong>/reactive/collection/Map.spec.js\nPASS  packages/<strong>tests</strong>/reactive/collection/WeakMap.spec.js\nPASS  packages/<strong>tests</strong>/reactive/collection/Set.spec.js</p>\n<p>Test Suites: 6 passed, 6 total\nTests:       132 passed, 132 total\nSnapshots:   0 total\nTime:        5.278 s\nRan all test suites.</p>\n</blockquote>\n<p>分析</p>\n<ul>\n<li>\n<p><font color=\"green\">✓ instanceof (3 ms)</font></p>\n<p><img src=\"http://qiniu.ii6g.com/1590458265.png?imageMogr2/thumbnail/!100p\"></p>\n<p>注意 Proxy 之后的 observed 的 <strong>proto</strong> 值是 Map ，所以对 observed 使用 instanceof Map(查找原型链) 结果肯定是 true。</p>\n</li>\n<li>\n<p><font color=\"green\">✓ should observe mutations (2 ms)</font></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should observe mutations'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">let</span> dummy\n<span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 这里触发的是 map 对象的 'get' proxy handler</span>\n  <span class=\"token comment\">// key = 'get', 最后通过 Reflect.get(instrumentations{...}, 'get', receiver)</span>\n  <span class=\"token comment\">// 即最后调用 'get' 方法的是 instrumentations 这些对象</span>\n  <span class=\"token comment\">// 如： mutableInstrmentations 的 get(key) { return get(this, key, toReactive) }</span>\n  <span class=\"token comment\">// 然后 get(key) 的 key = 'key'，传递给 `get(this, ...)`</span>\n  <span class=\"token comment\">// 然后在 get(this, ...) 里面通过 call->proto 去调用原型上的方法，解决作用域丢失的问题</span>\n  dummy <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n<span class=\"token comment\">// 调用的是 instrumentations 的 set => set(this, ...)</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// map{'key' => 'value'}, trigger: add</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'value2'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// trigger: set</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'value2'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// trigger: delete</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p><font color=\"green\">✓ should observe mutations with observed value as key (1 ms)</font></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> dummy\n<span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\ndummy <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 用 observe 对象作为 key 和 value</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true，都是引用类型，非值传递</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li><font color=\"green\">✓ should observe size mutations (1 ms)</font></li>\n<li><font color=\"green\"> ✓ should observe for of iteration (2 ms)</font></li>\n<li><font color=\"green\">  ✓ should observe forEach iteration (1 ms)</font></li>\n<li><font color=\"green\"> ✓ should observe keys iteration (3 ms)</font></li>\n<li><font color=\"green\"> ✓ should observe values iteration (3 ms)</font></li>\n<li><font color=\"green\"> ✓ should observe entries iteration (5 ms)</font></li>\n<li><font color=\"green\"> ✓ should be triggered by clearing (3 ms)</font></li>\n<li><font color=\"green\"> ✓ should not observe custom property mutations (6 ms)</font></li>\n<li><font color=\"green\"> ✓ should not observe non value changing mutations (4 ms)</font></li>\n<li><font color=\"green\"> ✓ should not observe raw data (1 ms)</font></li>\n<li><font color=\"green\"> ✓ should not pollute original Map with Proxies (7 ms)</font></li>\n<li><font color=\"green\">✓ should return observable versions of contained values (1 ms)</font></li>\n<li><font color=\"green\">✓ should observed nested data (2 ms)</font></li>\n<li><font color=\"green\">✓ should observe nested values in iterations (forEach) (1 ms)</font></li>\n<li><font color=\"green\">✓ should observe nested values in iterations (values) (1 ms)</font></li>\n<li><font color=\"green\">✓ should observe nested values in iterations (entries) (2 ms)</font></li>\n<li><font color=\"green\">✓ should observe nested values in iterations (for…of) (2 ms)</font></li>\n<li><font color=\"green\">✓ should not be trigger when the value and the old value both are NaN (1 ms)</font></li>\n<li><font color=\"green\">✓ should work with reactive keys in raw map (1 ms)</font></li>\n<li><font color=\"green\">✓ should track set of reactive keys in raw map</font></li>\n<li><font color=\"green\">✓ should track deletion of reactive keys in raw map (1 ms)</font></li>\n<li><font color=\"green\">✓ should warn when both raw and reactive versions of the same object is used as key</font></li>\n<li><font color=\"green\">✓ should not trigger key iteration when setting existing keys (4 ms)</font></li>\n</ul>\n<h2 id=\"小结\" style=\"position:relative;\"><a href=\"#%E5%B0%8F%E7%BB%93\" aria-label=\"小结 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>小结</h2>\n<p>这节工作也基本完成了，所有 collection 相关的四个测试用例都测试通过，说明代码<strong>照抄</strong>(🤦‍♂️)的结果也正常。那现在也应该基本了解对于集合类型的 proxy 处理，vue 是怎么个实现的。</p>\n<p>首先，proxy 是没有提供和集合类型有关的原子操作代理的，所以直接使用 new Proxy(map) 是没法实现我们想要的功能的，同时也会出现方法应用不当的报错(丢失方法的作用域了，把 Map.prototype.method 的方法应用到了 Proxy 类型)。</p>\n<p>为了解决这个问题，vue 里面 collection 有关的操作全部都是通过 get proxy 代理来实现，下面是几个关键点和疑问点：</p>\n<ol>\n<li>所有接口全部使用 get proxy 通道转发，调用 <code class=\"language-text\">Reflect.get(instrumentations, key, receiver)</code></li>\n<li>在所有的实际 proxy handler里面(如：set, get, delete, …)，解决作用域问题，取target 上的原型方法</li>\n<li>并且所有的原型上的方法(如：has, get, set)都通过 <code class=\"language-text\">has.call(target)</code> 解决调用域的问题</li>\n<li>\n<p>Key 和 rawKey 的问题(get 中)，直接看测试代码分析🥵<span id=\"question-raw-key\"></span></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> key1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> key11 <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> ob <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> n1<span class=\"token punctuation\">,</span> n2\n<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n n1 <span class=\"token operator\">=</span> ob<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">)</span>\n n2 <span class=\"token operator\">=</span> ob<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key11<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nob<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> n1<span class=\"token punctuation\">,</span> n2 <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> ob<span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>\nob<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key11<span class=\"token punctuation\">,</span> <span class=\"token string\">'11'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> n1<span class=\"token punctuation\">,</span> n2 <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> ob<span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>结果</p>\n<p><img src=\"http://qiniu.ii6g.com/1590472850.png?imageMogr2/thumbnail/!100p\"></p>\n<p>Get 源码：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// key -> 'key11'</span>\n<span class=\"token keyword\">function</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> wrap</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n target <span class=\"token operator\">=</span> <span class=\"token function\">toRaw</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n <span class=\"token comment\">// 这里会对 key 有个 toRaw 操作，就是针对 key 是 proxy 的可能</span>\n <span class=\"token comment\">// 最后 key11 传进来实际 rawKey = key1，并且触发 track 的时候</span>\n <span class=\"token comment\">// rawKey 是必定会触发的，这保证了 key 非 proxy 时的能正常收集依赖</span>\n <span class=\"token comment\">// 而 key !== rawKey -> trigger: get-key 就是针对 proxy key11 的情况也会</span>\n <span class=\"token comment\">// 触发 track:get 收集依赖，因为 proxy key11 肯定是不会等于 key1 的。</span>\n <span class=\"token comment\">// 所以 key1, key11 在 map.get(key1) 或 map.get(key11) 的时候都能正常收集到依赖</span>\n <span class=\"token keyword\">const</span> rawKey <span class=\"token operator\">=</span> <span class=\"token function\">toRaw</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">!==</span> rawKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">track</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token function\">track</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span> rawKey<span class=\"token punctuation\">)</span>\n <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后在 set 的时候：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">// ...</span>\n\n <span class=\"token comment\">// 这一段操作就是为了确保，key1 和 proxy key11 都能正确取到依赖</span>\n <span class=\"token comment\">// 所以说 get 里面的 rawKey 和 key 的操作和这里的 toRaw 操作是相对应的</span>\n <span class=\"token comment\">// 如果没有 get 里的 rawKey-key 操作，这里如果传入 proxy key11 就不会有依赖触发</span>\n <span class=\"token comment\">// 因为 get 里面根本不会触发 track:get</span>\n <span class=\"token comment\">// 如果 set 这里不加这一段处理，就算 get-track:get 了，这里也会找不到 proxy key11 导致</span>\n <span class=\"token comment\">// 会触发非正常的 trigger:add 操作。</span>\n <span class=\"token keyword\">let</span> hadKey <span class=\"token operator\">=</span> <span class=\"token function\">has</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hadKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   key <span class=\"token operator\">=</span> <span class=\"token function\">toRaw</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n   hadKey <span class=\"token operator\">=</span> <span class=\"token function\">has</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__DEV__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// TODO</span>\n <span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><span id=\"question-key1-key11\">为什么 key1 和 toReactive(key1) 后的 key11 前后 set 会改变 key1 对应的值？？？</span></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> key1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> key2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> ob <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nob<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 这里 key1 被转成了 Proxy，在 createIterableMethod 里面做的</span>\n<span class=\"token comment\">// 返回 iterable 的 next() 里面的行为，会把所有 value 都变成 wrap(value)</span>\n<span class=\"token comment\">// reactive 的，下面的 key11 其实就是 key1 经过 reactive 之后的 proxy</span>\n<span class=\"token keyword\">const</span> key11 <span class=\"token operator\">=</span> ob<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value\n\n<span class=\"token comment\">// 验证 key11 与 key1 关系的猜测：</span>\n<span class=\"token comment\">// console.log(key11, key1, toRaw(key11) === key1) // code1</span>\n\n<span class=\"token comment\">// 验证 key11 与 key1 关系的猜测：</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">toRaw</span><span class=\"token punctuation\">(</span>key11<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> key1<span class=\"token punctuation\">,</span> ob<span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 然后我们将 key11 作为 key 设置给 ob</span>\nob<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key11<span class=\"token punctuation\">,</span> <span class=\"token string\">'11'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">toRaw</span><span class=\"token punctuation\">(</span>key11<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> key1<span class=\"token punctuation\">,</span> ob<span class=\"token punctuation\">,</span> <span class=\"token string\">'11'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>直接看结果图：</p>\n<p><img src=\"http://qiniu.ii6g.com/1590465056.png?imageMogr2/thumbnail/!100p\"></p>\n<p>把 code1 注释掉，加上下面的代码，看下结果:</p>\n<p><img src=\"http://qiniu.ii6g.com/1590465566.png?imageMogr2/thumbnail/!100p\"></p>\n<p>修正：“命名” -> “明明”。</p>\n<p>也就是说我们通过设置 key1 的 proxy 版本 key11 却能让 key1 的值发生变化。那得分析分析这是为什么了？？？原因其实很简单，请看 <code class=\"language-text\">set(key, value)</code> 源码：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// key -> key11, value -> '11'</span>\n<span class=\"token keyword\">function</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">// ...</span>\n \n <span class=\"token comment\">// 首先是检测有没有 key11，咦，发现没有诶，</span>\n <span class=\"token comment\">// 那有没可能它是个 proxy ???</span>\n <span class=\"token keyword\">let</span> hadKey <span class=\"token operator\">=</span> <span class=\"token function\">has</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hadKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// 好吧，那就还原下吧，取出 proxy 之前的那个 target</span>\n   key <span class=\"token operator\">=</span> <span class=\"token function\">toRaw</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n   <span class=\"token comment\">// 返现 key11 你不就是 key1 转过来的吗？？？</span>\n   <span class=\"token comment\">// key1 我有啊 ，所以这里的 hadKey 就成了 true</span>\n   <span class=\"token comment\">// key 就成了 key1</span>\n   hadKey <span class=\"token operator\">=</span> <span class=\"token function\">has</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__DEV__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// TODO</span>\n <span class=\"token punctuation\">}</span>\n \n <span class=\"token comment\">// 因此下面其实就是通过 proxy:key11 的原版 key1 去触发 trigger: set</span>\n\t<span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>更直观点的测试：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> key1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> key11 <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> ob <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nob<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 验证 key11 与 key1 关系的猜测：</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">toRaw</span><span class=\"token punctuation\">(</span>key11<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> key1<span class=\"token punctuation\">,</span> ob<span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 然后我们将 key11 作为 key 设置给 ob</span>\nob<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key11<span class=\"token punctuation\">,</span> <span class=\"token string\">'11'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">toRaw</span><span class=\"token punctuation\">(</span>key11<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> key1<span class=\"token punctuation\">,</span> ob<span class=\"token punctuation\">,</span> <span class=\"token string\">'11'</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ol>\n<h1 id=\"refts\" style=\"position:relative;\"><a href=\"#refts\" aria-label=\"refts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ref.ts</h1>\n<p>前面已经完成了 reactive 模块大部分且最基本的功能了，这节将完成剩余两大块computed 和 ref 其中的 ref.ts，</p>\n<p>来揭露其真实的面目。</p>\n<p>Ref 类型定义(<a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\">unique symbol 类型定义</a>)：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">const</span> RefSymbol<span class=\"token operator\">:</span> unique <span class=\"token builtin\">symbol</span>\n\n<span class=\"token comment\">// Ref 类型主要有两个属性，一个 值为 true 的唯一的符号属性</span>\n<span class=\"token comment\">// 一个是 value 值</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Ref</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>RefSymbol<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"内容列表\" style=\"position:relative;\"><a href=\"#%E5%86%85%E5%AE%B9%E5%88%97%E8%A1%A8\" aria-label=\"内容列表 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>内容列表</h2>\n<table>\n<thead>\n<tr>\n<th>变量/函数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">convert(val)</code></td>\n<td>将对象转成 reactive</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">isRef(r)</code></td>\n<td>判断是不是 Ref 类型，依据是 r._<em>v</em>isRef 标识的值</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">ref(value)</code></td>\n<td>创建 Ref 类型，调用 <code class=\"language-text\">createRef(value)</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">shallowRef(value)</code></td>\n<td>创建 Ref 类型，调用 <code class=\"language-text\">createRef(value, true)</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">createRef(rawValue, shallow)</code></td>\n<td>创建 Ref 类型</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">triggerRef(ref: Ref)</code></td>\n<td>trigger Ref 的 value 值变更 deps</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">unref(ref)</code></td>\n<td>取消 Ref，即返回 ref.value 原始值</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">customRef(factory)</code></td>\n<td>由创建者去定义 get, set 应该做哪些事情</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">toRefs(object)</code></td>\n<td>将对象的所有 key 的值转成 Ref</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">toRef(object, key)</code></td>\n<td>被 toRefs 调用</td>\n</tr>\n</tbody>\n</table>\n<p>完整的 ref.js(除了类型定义，不到100行，🐂👃)</p>\n<h2 id=\"源码\" style=\"position:relative;\"><a href=\"#%E6%BA%90%E7%A0%81\" aria-label=\"源码 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>源码</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> isObject<span class=\"token punctuation\">,</span> hasChanged <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../util.js'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> reactive<span class=\"token punctuation\">,</span> isProxy<span class=\"token punctuation\">,</span> toRaw<span class=\"token punctuation\">,</span> collectionTypes <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./reactive.js'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> track<span class=\"token punctuation\">,</span> trigger<span class=\"token punctuation\">,</span> __DEV__ <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./effect.js'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">convert</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> val<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">shallowRef</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// get track, set trigger</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rawValue<span class=\"token punctuation\">,</span> shallow <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isRef</span><span class=\"token punctuation\">(</span>rawValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> rawValue\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> shallow <span class=\"token operator\">?</span> rawValue <span class=\"token operator\">:</span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>rawValue<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> r <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    __v_isRef<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">get</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">track</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> <span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> value\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">set</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newVal</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">hasChanged</span><span class=\"token punctuation\">(</span><span class=\"token function\">toRaw</span><span class=\"token punctuation\">(</span>newVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rawValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        rawValue <span class=\"token operator\">=</span> newVal\n        value <span class=\"token operator\">=</span> shallow <span class=\"token operator\">?</span> newVal <span class=\"token operator\">:</span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>newVal<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> <span class=\"token string\">'set'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span> __DEV__ <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span> newValue<span class=\"token operator\">:</span> newVal <span class=\"token punctuation\">}</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> r\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 手动触发 ref: set</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">triggerRef</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ref</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">,</span> <span class=\"token string\">'set'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span> __DEV__ <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span> newValue<span class=\"token operator\">:</span> ref<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">}</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">isRef</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> r <span class=\"token operator\">?</span> r<span class=\"token punctuation\">.</span>__v_isRef <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">unref</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ref</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">isRef</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> ref<span class=\"token punctuation\">.</span>value <span class=\"token operator\">:</span> ref\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">customRef</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">factory</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">track</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> <span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> <span class=\"token string\">'set'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> r <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    __v_isRef<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">get</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">set</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">toRefs</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">object</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> ret <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">in</span> object<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ret<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">toRef</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> ret\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">toRef</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">object<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    __v_isRef<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">get</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> object<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">set</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newVal</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      object<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> newVal\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>给之前的代码加上 ref 功能：</p>\n<ol>\n<li>baseHandlers.js</li>\n</ol>\n<h2 id=\"测试\" style=\"position:relative;\"><a href=\"#%E6%B5%8B%E8%AF%95\" aria-label=\"测试 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>测试</h2>\n<h3 id=\"refvalue\" style=\"position:relative;\"><a href=\"#refvalue\" aria-label=\"refvalue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ref(value)</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 将 100 变成 reactive 的 r -> { __v_isRef: true, get value() {}, set value() {} }</span>\n<span class=\"token keyword\">const</span> r <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> dummy\n<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  dummy <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>value\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>targetMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'deps'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>输出：</p>\n<p><img src=\"http://qiniu.ii6g.com/1590477277.png?imageMogr2/thumbnail/!100p\"></p>\n<p>effect 里面使用到了 r.value 触发 get value() 访问器，里面使用 <code class=\"language-text\">track(r, &#39;get&#39;, &#39;value&#39;, void 0)</code> 收集依赖，所以从  <code class=\"language-text\">targetMap.get(r)</code> 可以取到 ‘value’ => Set(1) 这个 Dep。</p>\n<p>更新 ref 值：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> r <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> dummy\n<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  dummy <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>value\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dummy <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>\nr<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dummy <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>结果:</p>\n<blockquote>\n<p>{dummy: 100} “1”\n{dummy: 200} “2”</p>\n</blockquote>\n<p>所以说，Ref 的存在就是让普通类型的值也能 reactive。</p>\n<p><strong>应用到对象上</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> r <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> nested<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> num<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> dummy\n<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  dummy <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>nested<span class=\"token punctuation\">.</span>num\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dummy <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>\nr<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>nested<span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> <span class=\"token number\">100</span></code></pre></div>\n<p>结果：</p>\n<blockquote>\n<p>{_<em>v</em>isRef: true}\nMap(1) {“value” => Set(1)}\n{dummy: 0} “1”\n{dummy: 100} “2”</p>\n</blockquote>\n<h3 id=\"shallowrefvalue\" style=\"position:relative;\"><a href=\"#shallowrefvalue\" aria-label=\"shallowrefvalue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>shallowRef(value)</h3>\n<p><strong>shallowRef</strong>  就是针对对象类型使用 Ref 的时候是否需要对对象里面的嵌套对象进行 reactive 化。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> r <span class=\"token operator\">=</span> <span class=\"token function\">shallowRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> nested<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> num<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> dummy\n<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  dummy <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>nested<span class=\"token punctuation\">.</span>num\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dummy <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>\nr<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>nested<span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> <span class=\"token number\">100</span></code></pre></div>\n<p>结果：</p>\n<p><img src=\"http://qiniu.ii6g.com/1590477847.png?imageMogr2/thumbnail/!100p\"></p>\n<p>对象最终会被整个成为 value，因为是用的 shallowRef，所以改变 r.value.nested.num 的值是不会触发 dummy 更新的。</p>\n<p>其他用法直接看下面的测试用例解析吧！！！</p>\n<h2 id=\"jest-2\" style=\"position:relative;\"><a href=\"#jest-2\" aria-label=\"jest 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>jest</h2>\n<p>结果:</p>\n<blockquote>\n<p>☁  vue-next-code-read [master] ⚡  jest\nPASS  packages/<strong>tests</strong>/reactive/reactive.spec.js\nPASS  packages/<strong>tests</strong>/reactive/ref.spec.js\nPASS  packages/<strong>tests</strong>/reactive/effect.spec.js\nPASS  packages/<strong>tests</strong>/reactive/collection/WeakSet.spec.js\nPASS  packages/<strong>tests</strong>/reactive/collection/Set.spec.js\nPASS  packages/<strong>tests</strong>/reactive/collection/Map.spec.js\nPASS  packages/<strong>tests</strong>/reactive/collection/WeakMap.spec.js</p>\n<p>Test Suites: 7 passed, 7 total\nTests:       149 passed, 149 total\nSnapshots:   0 total\nTime:        5.94 s\nRan all test suites.\n☁  vue-next-code-read [master] ⚡</p>\n</blockquote>\n<ul>\n<li>\n<p><font color=\"green\">✓ should hold a value (8 ms)</font></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should hold a value'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// a -> { get value() {}, set value(val) {}, __v_isRef: true }</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\na<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token comment\">// 在构造 set value(val) { trigger(r, 'set', 'value', void 0) }</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p><font color=\"green\">✓ should be reactive (2 ms)</font></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should be reactive'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// { get value(), set value(), __v_isRef: true }</span>\n<span class=\"token keyword\">let</span> dummy\n<span class=\"token keyword\">let</span> calls <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  calls<span class=\"token operator\">++</span> <span class=\"token comment\">// 1</span>\n  dummy <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>value <span class=\"token comment\">// 1</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>calls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true，effect会立即执行一次</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true，同上</span>\na<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token comment\">// 赋值触发 set value -> trigger: set</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>calls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 因为赋值 trigger: set 触发 updater</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// same value should not trigger</span>\na<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token comment\">// 值没变，被 hasChanged() 阻拦，不 trigger</span>\n<span class=\"token comment\">// if (hasChanged(toRaw(newVal), rawValue)) {</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>calls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p><font color=\"green\">✓ should make nested properties reactive (2 ms)</font></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should make nested properties reactive'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  count<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> dummy\n<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// a.value 触发一次 ref track</span>\n  <span class=\"token comment\">// a.value.count 触发一次普通的 reactive track</span>\n  <span class=\"token comment\">// 所以这里会有两次 track</span>\n  dummy <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>count\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\na<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token comment\">// 这里依旧会触发两次 get</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>测试：<img src=\"http://qiniu.ii6g.com/1590483209.png?imageMogr2/thumbnail/!100p\"></p>\n</li>\n<li>\n<p><font color=\"green\">✓ should work without initial value (1 ms)</font></p>\n<p>createRef(undefined) 并不影响它的使用，只会初始值是 undefined。</p>\n</li>\n<li>\n<p><font color=\"green\">✓ should work like a normal property when nested in a reactive object (2 ms)</font><span id=\"reactive-nest-ref\"></span></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should work like a normal property when nested in a reactive object'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 这里 ref 类型的a 被作为对象成员传递给 reactive 之后，会被转成正常的值</span>\n<span class=\"token comment\">// 因为 baseHandlers.js 里面的 createGetter 的时候，有检测 isRef 是不是 Ref 类型 ?</span>\n<span class=\"token comment\">// 如果是且非数组的话会直接返回 res.value ，其实就是被普通化了(unref)之后将结果返回</span>\n<span class=\"token comment\">// 也就是说它只影响在 get 的时候返回的值，实际上在嵌套的对象里面 a 还是 Ref: a 类型的那个 a</span>\n<span class=\"token comment\">/*\n\tif (isRef(res)) {\n    if (targetIsArray) {\n      !isReadonly &amp;&amp; track(target, 'get', key)\n      return res\n    }\n    return res.value\n  }\n*/</span>\n<span class=\"token comment\">// 所有后面可以直接 obj.a++ 操作</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  a<span class=\"token punctuation\">,</span>\n  b<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    c<span class=\"token operator\">:</span> a\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> dummy1\n<span class=\"token keyword\">let</span> dummy2\n\n<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 这个时候的 a 和 c 虽然一开始都是 a，但是由于传递给 </span>\n  <span class=\"token comment\">// reactive 之后被还原成最原始的值 1 了，所以这里 dummy1,2 都是 1</span>\n  <span class=\"token comment\">// 而非表面上的 Ref(1)</span>\n  dummy1 <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>a \n  dummy2 <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>c\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">assertDummiesEqualTo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">[</span>dummy1<span class=\"token punctuation\">,</span> dummy2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dummy</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 有了上面的结论下面结果就很明显了，也很好理解了</span>\n<span class=\"token function\">assertDummiesEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true，被还原的 Ref(1)</span>\na<span class=\"token punctuation\">.</span>value<span class=\"token operator\">++</span> <span class=\"token comment\">// ++ 之后改变的是 Ref:a，引用类型</span>\n<span class=\"token comment\">// 但是这里为什么是 2 呢？？？</span>\n<span class=\"token comment\">// 原因其实就是上面 reactive 的时候 只是在 trigger:get 的时候返回的是 ref.value</span>\n<span class=\"token comment\">// 实际上并没有改变 Ref:a 自身，只是影响了 get 的返回值而已</span>\n<span class=\"token function\">assertDummiesEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> \n<span class=\"token comment\">// 但是这里 obj.a++ &lt;=> obj.a = obj.a + 1</span>\nobj<span class=\"token punctuation\">.</span>a<span class=\"token operator\">++</span>\n<span class=\"token function\">assertDummiesEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nobj<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>c<span class=\"token operator\">++</span>\n<span class=\"token function\">assertDummiesEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>看下最后 obj 变成啥了？</p>\n<p><img src=\"http://qiniu.ii6g.com/1590485724.png?imageMogr2/thumbnail/!100p\"></p>\n<p><span id=\"question-ref-++\">最后可以看到 Ref:a 在 obj 里面尽管执行了 obj.a++ 和 obj.b.c++ 依旧还是 Ref: a？？？？</span></p>\n</li>\n<li>\n<p><font color=\"green\">✓ should unwrap nested ref in types (1 ms)</font></p>\n<p>在 createRef 第一行就加了检测是不是 Ref 如果是就直接返回了。</p>\n</li>\n<li>\n<p><font color=\"green\">✓ should unwrap nested values in types (1 ms)</font></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should unwrap nested values in types'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    b<span class=\"token operator\">:</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 这里虽然是 Ref</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 发生嵌套了</span>\n\n  <span class=\"token comment\">// 但是在访问的时候，还记得之前那个测试用例碰到的问题吗？</span>\n  <span class=\"token comment\">// createGetter 里面返回 Ref 会直接 返回 ref.value</span>\n  <span class=\"token comment\">// 所以这里访问 c.value.b 其实相当于 c.value.b.value </span>\n  <span class=\"token comment\">// 所以 + 1 的结果肯定是 number 类型</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>b <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p><font color=\"green\">✓ should NOT unwrap ref types nested inside arrays</font></p>\n<p>这个用例和上一个是一样的原理，有个不同的地方是，target 是数组，createGetter 不是返回 res.value 了，而是直接返回 res，因为是数组类型且取的是整个数组对象。</p>\n<p>而后面通过 <code class=\"language-text\">arr[i]</code> 取值就和上一个用例一样了，一样会检测到数组元素如果是 Ref 照样会返回 res.value，所以在数组中使用 Ref(val) 做数组成员，然后 ref 数组是没有问题的。</p>\n</li>\n<li>\n<p><font color=\"green\">✓ should keep tuple types (6 ms)</font></p>\n<p>不管你是什么类型元素，数组类型首先是整个数组访问直接返回 ref，然后如果是数组元素会检测是不是引用类型，如果是就 reactive ，不是直接返回结果。</p>\n</li>\n<li><font color=\"green\">✓ should keep symbols (4 ms)</font></li>\n<li><font color=\"green\">✓ unref</font></li>\n<li>\n<p><font color=\"green\">✓ shallowRef (2 ms)</font></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'shallowRef'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">const</span> sref <span class=\"token operator\">=</span> <span class=\"token function\">shallowRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// shallow，那么里面的 {a:1} 对象是不会被 reactive 的</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">isReactive</span><span class=\"token punctuation\">(</span>sref<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 所以这里就是 False</span>\n\n<span class=\"token keyword\">let</span> dummy\n<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 这里依然会立即执行一次，且只会触发一次 track:get，因为有 sref.value 取值操作</span>\n  <span class=\"token comment\">// 但是由于 {a: 1} 并不是 Reactive ，所以对 a 的取值是不会触发 track:get 的</span>\n  dummy <span class=\"token operator\">=</span> sref<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>a\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n\nsref<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 这里重新赋值整个 value</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">isReactive</span><span class=\"token punctuation\">(</span>sref<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 虽然改变了 value 但的值依旧是普通对象</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 因为改变了 value，而 sref 还是 ref 类型，会触发 set value </span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p><font color=\"green\">✓ shallowRef force trigger (1 ms)</font></p>\n<p>手动调用 triggerRef 触发 <code class=\"language-text\">trigger(r, &#39;set&#39;, &#39;value&#39;, void 0)</code> 执行以来 deps</p>\n</li>\n<li><font color=\"green\">✓ isRef (1 ms)</font></li>\n<li><font color=\"green\">✓ toRef (2 ms)</font></li>\n<li><font color=\"green\">✓ toRefs (1 ms)</font></li>\n<li>\n<p><font color=\"green\">✓ customRef</font>\n自定义 Ref 功能最主要的就是将控制权交给使用者，比如何时 track dep，何时 trigger dep 操作。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'customRef'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">let</span> _trigger\n\n  <span class=\"token keyword\">const</span> custom <span class=\"token operator\">=</span> <span class=\"token function\">customRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">track<span class=\"token punctuation\">,</span> trigger</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">track</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 根据实际情况调用来收集依赖</span>\n      <span class=\"token keyword\">return</span> value\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      value <span class=\"token operator\">=</span> newValue\n      _trigger <span class=\"token operator\">=</span> trigger <span class=\"token comment\">// 可缓存 trigger 不一定要立即触发 deps</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">isRef</span><span class=\"token punctuation\">(</span>custom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// customRef 依旧返回的是 Ref</span>\n\n  <span class=\"token keyword\">let</span> dummy\n  <span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    dummy <span class=\"token operator\">=</span> custom<span class=\"token punctuation\">.</span>value\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n  custom<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n  <span class=\"token comment\">// should not trigger yet</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">_trigger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n<p><a href=\"https://github.com/gcclll/vue-next-code-read/tree/master/bakups/reactive_ref\">ref 版 reactive.js</a></p>\n<h1 id=\"computedts\" style=\"position:relative;\"><a href=\"#computedts\" aria-label=\"computedts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>computed.ts</h1>\n<p>最后一个了，两周的坚持总算快结束了。</p>\n<p>这块的实现就更简单了，就一个 computed() 函数，结合 effect() + ref 来实现。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">getterOrOptions</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> getter<span class=\"token punctuation\">,</span> setter\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> getterOrOptions <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    getter <span class=\"token operator\">=</span> getterOrOptions\n    setter <span class=\"token operator\">=</span> __DEV__ <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'计算属性只读。'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> noop\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    getter <span class=\"token operator\">=</span> getterOrOptions<span class=\"token punctuation\">.</span>get\n    setter <span class=\"token operator\">=</span> getterOrOptions<span class=\"token punctuation\">.</span>set\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">let</span> dirty <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 脏位检查，为 true 表示值有变化，重新取值</span>\n  <span class=\"token keyword\">let</span> value\n  <span class=\"token keyword\">let</span> computed \n\n  <span class=\"token comment\">// runner 不会立即执行，直到计算属性取值在 get value 中手动调用</span>\n  <span class=\"token comment\">// 来触发所有有关的依赖，重新计算得到最新的值 value</span>\n  <span class=\"token keyword\">const</span> runner <span class=\"token operator\">=</span> <span class=\"token function\">effect</span><span class=\"token punctuation\">(</span>getter<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    lazy<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    computed<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 然后这里提供调度器，不直接</span>\n    <span class=\"token function-variable function\">scheduler</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dirty<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        dirty <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n        <span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span>computed<span class=\"token punctuation\">,</span> <span class=\"token string\">'set'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  computed <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    __v_isRef<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    effect<span class=\"token operator\">:</span> runner<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">get</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 取值时，检测 dirty ，如果脏了(有变)，就重新 runner 取值，运行所有 deps，得到最新的值</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dirty<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        value <span class=\"token operator\">=</span> <span class=\"token function\">runner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        dirty <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// 重新计算后的重置 </span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token function\">track</span><span class=\"token punctuation\">(</span>computed<span class=\"token punctuation\">,</span> <span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 收集依赖</span>\n      <span class=\"token keyword\">return</span> value\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">set</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setter</span><span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> computed\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"测试一：依赖收集\" style=\"position:relative;\"><a href=\"#%E6%B5%8B%E8%AF%95%E4%B8%80%EF%BC%9A%E4%BE%9D%E8%B5%96%E6%94%B6%E9%9B%86\" aria-label=\"测试一：依赖收集 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>测试一：依赖收集</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> cValue <span class=\"token operator\">=</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> value<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span>\ncValue<span class=\"token punctuation\">.</span>value\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n  cValue<span class=\"token punctuation\">.</span>effect<span class=\"token punctuation\">.</span>deps<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> cValue<span class=\"token punctuation\">.</span>effect<span class=\"token punctuation\">,</span>\n  value\n<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// true Proxy {__v_reactive: Proxy}</span></code></pre></div>\n<p>当 cValue.value 执行对 Ref 进行取值(get value())触发，执行</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">computed <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  effect<span class=\"token operator\">:</span> runner<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dirty<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 检测到 dirty = true</span>\n      <span class=\"token comment\">// 执行 effect -> 执行 getter: () => value.foo</span>\n      <span class=\"token comment\">// 计算新值 undefined 赋值给 value</span>\n      value <span class=\"token operator\">=</span> <span class=\"token function\">runner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n      dirty <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">track</span><span class=\"token punctuation\">(</span>computed<span class=\"token punctuation\">,</span> <span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 触发</span>\n\t<span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">cValue.value</code> 首先这一句会触发两个 <code class=\"language-text\">track</code></p>\n<blockquote>\n<p>{shouldTrack: true, type: “get”, key: “foo”, target: {…}, activeEffect: ƒ}\n{shouldTrack: true, activeEffect: undefined, type: “get”, key: “value”, target: {…}}</p>\n</blockquote>\n<ol>\n<li><code class=\"language-text\">get value()</code> 里面执行了 runner() -> value.foo 取了一次 foo ，所以 <em>type: get, key: foo</em></li>\n<li><code class=\"language-text\">get value()</code> 里手动执行了一次 <code class=\"language-text\">track(computed, &#39;get&#39;, &#39;value&#39;)</code>，但是由于 activeEffect 是 undefined 所以不会继续往下执行</li>\n</ol>\n<p>因此，虽然调用了两次 track ，但只有 value.foo 的 track 会去往下收集 <code class=\"language-text\">effect:runner</code> 这个依赖。所以：</p>\n<p><code class=\"language-text\">cValue.effect.deps[0].values().next().value === cValue.effect // --&gt; true</code> </p>\n<p>随后， <code class=\"language-text\">value.foo = 1</code> 会触发上面收集到的依赖，执行一次 runner() 取 value.foo 的最新值： 1。</p>\n<p><img src=\"http://qiniu.ii6g.com/1590548272.png?imageMogr2/thumbnail/!100p\"></p>\n<p>注意图中圈起来的，其实我想知道在调用 value.foo = 1 之后 cValue.value 的值会不会发生改变，按照代码逻辑是不会改变的，也就还是 undefined。但是直接点击 <code class=\"language-text\">...</code> 浏览器会相当于触发一次 <code class=\"language-text\">getter</code> 操作，最后结果会是 1，但是这不是我们想要的，不能让它触发。</p>\n<p>那么就得想办法在它触发之前将老的值输出出来才行，结合代码只有在 <code class=\"language-text\">get value()</code> 一开始加上打印才行，如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">computed <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 因为点击省略号会触发 getter ，会进入到这里</span>\n    <span class=\"token comment\">// 所以只需要提前将值打印出来就知道在 value.foo 设置下去之后</span>\n    <span class=\"token comment\">// cValue.value 其实是没有发生任何改变的，依旧还是 undefined</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'before runner'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dirty<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      value <span class=\"token operator\">=</span> <span class=\"token function\">runner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      dirty <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">track</span><span class=\"token punctuation\">(</span>computed<span class=\"token punctuation\">,</span> <span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> value\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"http://qiniu.ii6g.com/1590548546.png?imageMogr2/thumbnail/!100p\"></p>\n<p>然后修改下输出： </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> cValue <span class=\"token operator\">=</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> value<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>cValue<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined，触发 runner() 执行 () => value.foo</span>\n<span class=\"token comment\">// 在这里并不会立即触发 runner() 调用 () => value.foo 更新 cValue.value 的值</span>\n<span class=\"token comment\">// 所以在这里设置之后到最后的 log 之前 cValue.value 依旧是 undefined</span>\n<span class=\"token comment\">// 但是这里会有个动作和 computed 有关，那就是计算属性里面的 scheduler() </span>\n<span class=\"token comment\">// 里面会检测 dirty = false(因为上面 get value 过，所以是 false)，</span>\n<span class=\"token comment\">// 触发 trigger(computed, 'set', 'value')，这里会触发所有和 computed-value 有关的依赖</span>\n<span class=\"token comment\">// 还有个重要的就是将 dirty = true，这样，后面当访问计算属性的时候才会触发 runner() 更新值</span>\nvalue<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> <span class=\"token number\">1</span> \n<span class=\"token comment\">// 然后访问一次 cValue.value 触发其 get value() 检测到 dirty 是 true</span>\n<span class=\"token comment\">// 然后触发 runner() 调用 () => value.foo 更新 value 的值</span>\n<span class=\"token comment\">// 所以下面的输出值就是 value.foo 的值</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>cValue<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span></code></pre></div>\n<h2 id=\"jest-3\" style=\"position:relative;\"><a href=\"#jest-3\" aria-label=\"jest 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>jest</h2>\n<ul>\n<li>\n<p><font color=\"green\">✓ should return updated value (5 ms)</font></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should return updated value'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 提供的是函数，所以只有 getter，且不会立即执行(计算属性有设置：lazy: true)</span>\n<span class=\"token comment\">// 返回一个 Ref 类型值</span>\n<span class=\"token comment\">// 依赖属性：value.foo</span>\n<span class=\"token keyword\">const</span> cValue <span class=\"token operator\">=</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> value<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 取值收集 value 的依赖，此时 dirty = true，执行 runner() 得到 undefined</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>cValue<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 赋值触发 value.foo 的 trigger: set，然后检测到该 effect 有提供 scheduler</span>\n<span class=\"token comment\">// 因此调用 cValue.options.scheduer </span>\n<span class=\"token comment\">// 此时的 dirty = false(get value 的时候置为 false 的)，</span>\n<span class=\"token comment\">// 触发 cValue 的 trigger: set -> value 调用 set value()</span>\nvalue<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>cValue<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p><font color=\"green\">✓ should compute lazily (3 ms)</font></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should compute lazily'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> getter <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> value<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> cValue <span class=\"token operator\">=</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span>getter<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// lazy</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>getter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 计算属性默认是 lazy 的所以不会立即执行</span>\n\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>cValue<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// get value() -> runner() -> 触发一次 getter</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>getter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// should not compute again</span>\ncValue<span class=\"token punctuation\">.</span>value <span class=\"token comment\">// 因为上面取过一次值了所有 dirty = false ，不会重复 runner()</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>getter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// should not compute until needed</span>\n<span class=\"token comment\">// 不会立即重新计算，此时 cValue.value 值依旧是 undefined，上面有分析过了</span>\n<span class=\"token comment\">// 由于 foo 有收集到 computed.effect 这个依赖，一次赋值的时候会触发它执行</span>\n<span class=\"token comment\">// 而 computed.effect.options.scheduler 又存在，因此会执行 scheduler</span>\n<span class=\"token comment\">// 里面重置 dirty = true，标识值由变化</span>\nvalue<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> <span class=\"token number\">1</span> \n<span class=\"token comment\">// 因为不会触发 get value() 就不会 runner()，也就不会重新 getter()</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>getter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> \n\n<span class=\"token comment\">// now it should compute</span>\n<span class=\"token comment\">// 发生取值操作，会触发 get value() 此时 dirty = true(value.foo = 1的时候触发的 scheduler)</span>\n<span class=\"token comment\">// 因此这里取值的时候会发现值变化了，所以需要重新 runner() 取新值，然后又置 dirty = false</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>cValue<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 上面取值，runn() -> getter()</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>getter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// should not compute again</span>\ncValue<span class=\"token punctuation\">.</span>value <span class=\"token comment\">// 一样的道理，dirty = false 了，所以不会重新 runner()</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>getter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p><font color=\"green\">✓ should trigger effect (1 ms)</font></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> cValue <span class=\"token operator\">=</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> value<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> dummy\n<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 这个会立即执行一次，触发 get value() 执行 runner() -> getter()</span>\n<span class=\"token comment\">// 但是 value.foo 是没有指定 所以是 undefined</span>\ndummy <span class=\"token operator\">=</span> cValue<span class=\"token punctuation\">.</span>value \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 这里设置为什么会触发 effect(fn) 里面的 fn 呢？？？</span>\n<span class=\"token comment\">// 1. computed(updater1) 执行完之后，effect:runner() 并未立即执行</span>\n<span class=\"token comment\">//   所以 shouldTrack = true 和 activeEffect = undefined 并没有任何改变</span>\n<span class=\"token comment\">// 2. effect(fn) 执行完会立即执行 fn，里面访问了 cValue.value 触发 get value()</span>\n<span class=\"token comment\">//   执行 effect:runner() -> getter(): () => value.foo 此时 value.foo 取值触发其收集依赖</span>\n<span class=\"token comment\">//   此时的 activeEffect 其实还是 fn，因为 fn 没有执行完就不会重置(try...finally)</span>\n<span class=\"token comment\">// 3. 所以下面执行 value.foo = 1 的时候是会触发 fn 执行的，因为在 2 中已经将它收集到了</span>\n<span class=\"token comment\">// 4. 执行 fn 导致 cValue.value 取值，触发 get value() 执行 runner() -> getter() 取最新的</span>\n<span class=\"token comment\">//    值 1，因此 dummy 的值就是 1 了。</span>\nvalue<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>所以上这个用例的关键点在于<strong><font color=\"red\">理解 value.foo 是如何收集到 effect(fn) 里面的fn</font></strong>，因为 fn 里面并没有直接访问 value.foo ，而是访问的 cValue.value。</p>\n</li>\n<li>\n<p><font color=\"green\">✓ should work when chained (1 ms)</font><span id=\"test-case-computed-chained\"></span></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should work when chained'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> foo<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> c1 <span class=\"token operator\">=</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> value<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> c2 <span class=\"token operator\">=</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> c1<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 1. c2:runner() -> c2:getter() -> c1.value -> c1:runner() -> c1.getter() -> 0 + 1 = 1</span>\n<span class=\"token comment\">// 且此时 value.foo 收集到了 c1.effect</span>\n<span class=\"token comment\">// 且 c1.value 在触发 get value() 时候收集到了 c2.effect</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> \n<span class=\"token comment\">// 2. 因为上面触发了 c1:runner() 所以 c1.value = 0</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 3. 因为在 step1 value.foo 收集到了 c1:effect，所以这里改变 value.foo</span>\n<span class=\"token comment\">//   会触发 c1:effect，执行 runner()，将 c1:dirty 置为 true</span>\nvalue<span class=\"token punctuation\">.</span>foo<span class=\"token operator\">++</span>\n<span class=\"token comment\">// 4. c2.value -> c2: get value() -> c2 runner() -> c1.value: get value()</span>\n<span class=\"token comment\">//    -> c1 runner() -> value.foo = 1 + 1 = 2</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 5. c1.value 此时就算不访问 c1.value 触发 get value() 这里 c1.value 也是 1</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>为了方便区分，这里给 <code class=\"language-text\">computed(getterOrOptions, id)</code> 加个 id 参数，方便跟踪当前是按个 computed .</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 从结果直接分析原因，将下面的输出行用 Pn 标记</span>\n<span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> foo<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> c1 <span class=\"token operator\">=</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> value<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">,</span> <span class=\"token string\">'c1'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> c2 <span class=\"token operator\">=</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> c1<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 首先上面三行不会触发任何输出</span>\n<span class=\"token comment\">// 1. log1 会触发 P1,P2,P3，原因：</span>\n<span class=\"token comment\">//    c2.value -> c2:get value()输出P1, dirty = true -> </span>\n<span class=\"token comment\">//          runner() + track + dirty = false -></span>\n<span class=\"token comment\">//    执行 c2:getter(), c1.value + 1 -> 访问 c1.value </span>\n<span class=\"token comment\">//    c1.value -> c1:get value()输出P2, dirty = true -> </span>\n<span class=\"token comment\">//          runner() + track + dirty = false -></span>\n<span class=\"token comment\">//    执行 c1:getter(), c1.value = value.foo = 0</span>\n<span class=\"token comment\">//    然后往回推： c1.value -> c1.value + 1 = 1 -> c2.value -> 输出 P3，c2.value 值为 1</span>\n<span class=\"token comment\">// 2. 第一步结束之后的状态：</span>\n<span class=\"token comment\">//    value.foo, deps[c1.effect]，value.foo = 1</span>\n<span class=\"token comment\">//    因为都触发了 get value() 所以各自收集到了自身的 effect </span>\n<span class=\"token comment\">//    c1, deps[c1.effect], c1.value = 0, dirty = false，等待 scheduler 调用置为 true</span>\n<span class=\"token comment\">//    c2, deps[c2.effect], c2.value = 1, dirty = false，等待 scheduler 调用置为 true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> <span class=\"token string\">'c2.value 1'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// log1, 1</span>\n<span class=\"token comment\">// 3. log2 会触发 P4, P5，原因：</span>\n<span class=\"token comment\">//    只是 c1.value 取值，会触发 get value()，因此有了 P4 输出</span>\n<span class=\"token comment\">//    但因为此时的 dirty = false 不会重复执行 runner()，所以值依旧是 0，最后输出 P5</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> <span class=\"token string\">'c1.value 1'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// log2, 0</span>\n\n<span class=\"token comment\">// 增加下面三个输出，让依赖收集结果更清晰</span>\n<span class=\"token keyword\">const</span> dep <span class=\"token operator\">=</span> targetMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token function\">toRaw</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 这里收集到的是 c1.effect，因为 c1.value ->get value() 执行了 runner() 触发</span>\n<span class=\"token comment\">// value.foo 将 c1.effect 收进 deps</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dep<span class=\"token punctuation\">,</span> dep<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> c1<span class=\"token punctuation\">.</span>effect<span class=\"token punctuation\">)</span> <span class=\"token comment\">// , true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\nc1<span class=\"token punctuation\">.</span>effect<span class=\"token punctuation\">.</span>deps<span class=\"token punctuation\">,</span>\nc1<span class=\"token punctuation\">.</span>effect<span class=\"token punctuation\">.</span>deps<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> c1<span class=\"token punctuation\">.</span>effect<span class=\"token punctuation\">,</span> <span class=\"token comment\">// true</span>\n<span class=\"token string\">'c1 deps'</span>\n<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\nc2<span class=\"token punctuation\">.</span>effect<span class=\"token punctuation\">.</span>deps<span class=\"token punctuation\">,</span>\nc2<span class=\"token punctuation\">.</span>effect<span class=\"token punctuation\">.</span>deps<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> c2<span class=\"token punctuation\">.</span>effect<span class=\"token punctuation\">,</span> <span class=\"token comment\">// true</span>\n<span class=\"token string\">'c2 deps'</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 这里++，会触发 c1.effect，因为 c1:dirty = false，所以调用 c1.options.scheduler，</span>\n<span class=\"token comment\">// c1.dirty = true，trigger-c1:set-value</span>\n<span class=\"token comment\">// 记住一点：computed 属性没有取值就不会触发 runner()，所以这句执行之后</span>\n<span class=\"token comment\">// c1.value 依旧是 0，c2.value 依旧是 1</span>\n<span class=\"token comment\">// 通过之前的方式可测试出结果，如下图中结果</span>\nvalue<span class=\"token punctuation\">.</span>foo<span class=\"token operator\">++</span>\n\n<span class=\"token comment\">// 4. log3 会输出 P9, P10, P11</span>\n<span class=\"token comment\">// c2.value 取值，触发 c2:runner() 重新计算值，c1.value + 1，触发</span>\n<span class=\"token comment\">// c1.value 取值，触发 c1:runner() 重新计算值，得到 c1.value = value.foo(++之后的值为1) = 1</span>\n<span class=\"token comment\">// 然后：c2.value = c1.value + 1 = 1 + 1 = 2</span>\n<span class=\"token comment\">// 所以这里会输出2，请看下面的，P9,P10,P11，其实这句之后 c1.value 已经是 1了</span>\n<span class=\"token comment\">// 因为这里触发了 c1.value 取值</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> <span class=\"token string\">'c2.value 2'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// log3, 2</span>\n<span class=\"token comment\">// 5. log4会输出 P12,P13，其实这里无论用不用 c1.value 它的值都已经是 1 了</span>\n<span class=\"token comment\">//    所以这里纯粹只是取值，不会重复 runner()，因为 step 4-log3 触发过 get value() diry = false</span>\n<span class=\"token comment\">//    了。</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> <span class=\"token string\">'c1.value 2'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// log4, 1</span></code></pre></div>\n<p>输出：</p>\n<blockquote>\n<p>P1: {id: “c2”, value: undefined} “before runner”\nP2: {id: “c1”, value: undefined} “before runner”\nP3: 1 “c2.value 1”\nP4: {id: “c1”, value: 0} “before runner”\nP5: 0 “c1.value 1”</p>\n<p>P6: Map(1) {“foo” => Set(1)} true\nP7: [Set(1)] true “c1 deps”\nP8: [Set(1)] true “c2 deps”</p>\n<p>// 新增 Log3 之后的输出</p>\n<p>P9: {id: “c2”, value: 1} “before runner”\nP10: {id: “c1”, value: 0} “before runner”\nP11: 2 “c2.value 2”</p>\n<p>// 新增 log4 之后的输出</p>\n<p>P12: {id: “c1”, value: 1} “before runner”\nP13: 1 “c1.value 2”</p>\n</blockquote>\n<p>点击省略号输出：</p>\n<p><img src=\"http://qiniu.ii6g.com/1590560419.png?imageMogr2/thumbnail/!100p\"></p>\n</li>\n<li>\n<p><font color=\"green\">✓ should trigger effect when chained (3 ms)</font></p>\n<p><a href=\"#test-case-computed-chained\">请看上一个用例的分析---->></a></p>\n</li>\n<li>\n<p><font color=\"green\">✓ should trigger effect when chained (mixed invocations) (3 ms)</font></p>\n<p><a href=\"#test-case-computed-chained\">请看上上一个用例的分析---->></a></p>\n</li>\n<li>\n<p><font color=\"green\">✓ should no longer update when stopped (2 ms)</font></p>\n<p>同上。但是有一点需要知道，stop() 主要干两件事：</p>\n<ol>\n<li>cleanup(effect) -> deps = [] 清空依赖</li>\n<li>effect.active = false</li>\n</ol>\n<p>那么问题就很清晰了，stop 之后 active 为 false，在执行 effect() 的时候一开始就是检测是不是激活状态，如果不是会返回 undefined(有 scheduler清空)或者 fn(…args) 执行结果。不会继续往下执行 try…finally。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_effect<span class=\"token punctuation\">.</span>active<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> options<span class=\"token punctuation\">.</span>scheduler <span class=\"token operator\">?</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">:</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>所以说这里 stop 之后再赋值，调用 effect.scheduler() 相当于什么都没干。</p>\n</li>\n<li><font color=\"green\">✓ should support setter (2 ms)</font></li>\n<li>\n<p><font color=\"green\">✓ should trigger effect w/ setter</font></p>\n<p>plusOne.value = 0<code class=\"language-text\">会触发 setter 调用 options.set:</code>n.value = val - 1`。</p>\n<p>那么 n.value 变了 就会触发 effect(fn) 里面的 dep:fn 更新 dummy 值。</p>\n</li>\n<li><font color=\"green\">✓ should warn if trying to set a readonly computed</font></li>\n</ul>\n<h1 id=\"总结\" style=\"position:relative;\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-label=\"总结 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h1>\n<p><font size=\"20\" color=\"red\">Over</font><font size=\"3\">💥💥💥💥💥💥💥💥💥💥💥💥💥💥💥💥💥💥💥💥.</font></p>\n<p>终于结束了，经过两周的坚持，终于将 vue3.0 reactivity 模块源码“抄完”了。</p>\n<p>此时此刻，貌似没什么话要写的了…，唯有</p>\n<p><font color=\"magenta\" size=\"6\">路漫漫其修远兮，吾将上下而求索！！！</font></p>\n<p>两周以来，每天脑子空闲了里面都是 vue3.0 reactivity 代码，甚至睡觉都在做梦敲这块的代码，做梦都在思考所经历的代码流程和细节。</p>\n<p>总的下来，只有感叹自己能力不足，越学习越觉得自己垃圾！！！</p>\n<p>路还很长，不能放弃，回来这几年总感觉心有力而余不足，更是感叹大学没好好学好基础，更体会到书到用时方恨少方恨少，(⊙o⊙)…，有点扯远了！！！</p>\n<hr>\n<p>还是老老实实的来复盘⑧ （开始 -> 🔚）：</p>\n<h2 id=\"第一阶段：reactive-\" style=\"position:relative;\"><a href=\"#%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9Areactive-\" aria-label=\"第一阶段：reactive  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>**第一阶段：reactive() **</h2>\n<p><code class=\"language-text\">reactive(target) -&gt; createObjectReactive(target, isReadonly, baseHandlers, collectionHandlers)</code></p>\n<p>创建 reactive 对象，之前的 toProxy, toRaw 改成了 ReactiveFlags 标记方式存储到 target 和 observed 对象上了，而不是单独的声明两个模块遍历来专门存储 target -> observed 和 observed -> target 的关系。</p>\n<p><strong>baseHandlers</strong>: 基本对象类型的 proxy handler，原生的 Reflect 基本都提供了对应的能力。</p>\n<p><strong>collectionHandlers</strong>：集合类型(Map, Set, WeakMap, WeakSet) 对象的 proxy handlers，由于原生 Reflect 并没有支持它们的原子操作，所以只能通过对象的 proxy get ，来获取所调用的方法名去对应的 instrumentations 里面查找与之相关的 handler 来模拟集合类型的所有操作。</p>\n<p>可进行 reactive 的的条件</p>\n<ol>\n<li>_isVue: false 表示 Vue 实例类型</li>\n<li>_VNode: false 虚拟节点类型</li>\n<li>!rawValues 中的类型或值</li>\n<li>可 observable 类型(除Map, Set, WeakMap, WeakSet, Object, Array意外的类型)</li>\n<li>非 Object.isFrozen 类型</li>\n</ol>\n<p>经过更新之后前面三种都合并到了 ReactiveFlags._<em>v</em>skip 里面了(结合 markRaw(value) 将不能被观察的值置为 _<em>v</em>skip: true)。</p>\n<p>最后变成了三种检测：</p>\n<ol>\n<li>_<em>v</em>skip = false</li>\n<li>observable 类型</li>\n<li>非 frozen 对象</li>\n</ol>\n<p>取消 toProxy, toRaw 之后使用 target.<strong>v_readonly 和 target.</strong>v<em>reactive 来保存 observed,  target.__v</em>raw 来保存 proxy 之前的对象。</p>\n<p>所以一旦检测到 _<em>v</em>readonly 和 _<em>v</em>reactive 值存在就直接返回这个缓存的 proxy。</p>\n<h2 id=\"第二阶段：basehandlers\" style=\"position:relative;\"><a href=\"#%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5%EF%BC%9Abasehandlers\" aria-label=\"第二阶段：basehandlers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第二阶段：baseHandlers</h2>\n<p><strong>createGetter -> 创建 proxy get</strong>：</p>\n<p>返回的时候检测 isReadonly 决定使用 readonly() 还是 reactive() 做深层的 reactive。</p>\n<p>如果指定了 shallow = true 参数，那么只会针对对象的第一层做 reactive。</p>\n<p>如果是数组的三个索引操作，直接进入 arrayInstrumentations 处理，调用封装之后的 includes, indexOf, lastIndexOf。</p>\n<p>如果是 Ref 类型直接返回 res.value，如果又是数组，手动 track 一次数组元素的 ‘get’ 操作，直接返回该数组 res。</p>\n<p><strong>createSetter -> 创建 proxy set</strong>：</p>\n<p>如果是 Ref 类型要将值设置到 oldValue.value 上，而不是直接将值通过 Reflect.set() 设置下去。</p>\n<p>然后根据 oldValue 和 newValue 进行比较，排除 NaN 的可能之后，如果有发生变化就调用 trigger，如果 target 上没有的 key 就是 <code class=\"language-text\">trigger: add</code>，否则 <code class=\"language-text\">trigger:set</code>。</p>\n<p><strong>deleteProperty -> 创建 proxy delete</strong>：</p>\n<p>trigger delete。</p>\n<p><strong>has -> 创建 proxy has</strong>：</p>\n<p>track has 收集依赖。</p>\n<p><strong>ownKeys -> 创建 proxy ownKeys</strong> ：</p>\n<p>track ITERATE_KEY 迭代器收集依赖。</p>\n<h2 id=\"第三阶段：effect-构建-dep\" style=\"position:relative;\"><a href=\"#%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%EF%BC%9Aeffect-%E6%9E%84%E5%BB%BA-dep\" aria-label=\"第三阶段：effect 构建 dep permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第三阶段：effect() 构建 Dep</h2>\n<p>effect(fn, options) 是将 fn 构造成 Dep 类型，所以，其实Vue里面所有的依赖都是一个 effect 函数，函数上挂了若干个属性(<code class=\"language-text\">_isEffect, active, id, deps, options, raw</code>)。</p>\n<p>这里的重点在于 reactiveEffect 函数的实现里面有个 try…finally 它结合 shouldTrack 和 activeEffect 保证了在 Dep 里面执行 <code class=\"language-text\">value.n++</code> 不会出现死循环，因为 trigger 里面的 add 操作会检测这两个值，如果 <code class=\"language-text\">activeEffect !== effect</code>(当前的这个 Dep) 或者 <code class=\"language-text\">shouldTrack = false</code> 才会收集要执行的依赖。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// enable effect</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 这个就是 effect(() => {}) 传入的函数</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 结束当前 effect 构建</span>\n\t<span class=\"token comment\">// shouldTrack = false</span>\n\t<span class=\"token comment\">// activeEffect = undefined</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"第四阶段：collectionhandlers\" style=\"position:relative;\"><a href=\"#%E7%AC%AC%E5%9B%9B%E9%98%B6%E6%AE%B5%EF%BC%9Acollectionhandlers\" aria-label=\"第四阶段：collectionhandlers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第四阶段：collectionHandlers</h2>\n<p>这里就有意思了…</p>\n<p>因为没有集合类型的直接 proxy 对应的 Reflect，因此只能采取另类的方式来解决这个问题。</p>\n<p>不管什么情况下，obj.fn 都属于属性值的访问，也就是说当使用 obj.fn() 的时候，无论如何都会出发 obj 对 fn 属性的 <code class=\"language-text\">get</code> 操作。</p>\n<p>所以对于 collectionHandlers 里面就只有一个 get。</p>\n<p>然后通过 obj.fn -> 出发 get, key 为 fn -> <code class=\"language-text\">Reflect.get(instrumentations, &#39;fn&#39;, ...)</code>，然后通过 fn 即函数名称去 instrumentations 里面找到对应的函数(比如：set, get, add, has, 等等…)。</p>\n<p>最后根据调用 <code class=\"language-text\">obj.fn(...args)</code> 时传递的参数转接到 instrumentations 里面对应的函数参数上。</p>\n<p>这部分的重点在于 instrumentations 里面函数的调用时作用域问题的解决：</p>\n<ol>\n<li>从 target.prototype 原型上取出对应的方法(如：has, get, set, add)</li>\n<li>然后通过 <code class=\"language-text\">has.call(target)</code> 然后将调用域指回给 target(Map, Set…)</li>\n</ol>\n<p>不然会出现 Map.prototype.has 在 Proxy 类型上调用而找不到函数的问题。</p>\n<p>另一个需要关注的是 key, rawKey 的问题，这里的意义在于：</p>\n<p>​\t<font color=\"blue\"><em>如果 key-> proxyKey ，如果同时用 key 和 proxyKey 取 get 值的时候会发现最终 proxyKey 会被转成 key再取值。这里应该是为了避免 proxyKey 和 key 会同时被添加如 Map 或 Set 问题</em>。</font></p>\n<h2 id=\"第四阶段：ref\" style=\"position:relative;\"><a href=\"#%E7%AC%AC%E5%9B%9B%E9%98%B6%E6%AE%B5%EF%BC%9Aref\" aria-label=\"第四阶段：ref permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第四阶段：Ref</h2>\n<p>Ref 类型，主要提供了将原始类型值转成 reactive 的能力。</p>\n<p>它通过将值封装成 ： <code class=\"language-text\">{__v_isRef: true, get value(){}, set value() {} }</code> 对象来完成 reactive 功能。</p>\n<p>这里重点是几个函数：</p>\n<ol>\n<li><code class=\"language-text\">ref(value)</code> 将值转成 Ref 类型</li>\n<li><code class=\"language-text\">createRef(value, shallow)</code> 被 ref 或 shallowRef 调用来创建 Ref</li>\n<li><code class=\"language-text\">triggerRef(ref)</code> 触发 Ref 上的 deps</li>\n<li><code class=\"language-text\">customRef(factory)</code> 提供外部自定义 Ref 能力</li>\n<li><code class=\"language-text\">toRef(object)</code> 将对象转成 Ref 类型</li>\n</ol>\n<p>Ref 类型关键：</p>\n<ol>\n<li>get value() -> track 收集依赖</li>\n<li>set value(val) -> trigger 依赖</li>\n</ol>\n<h2 id=\"第五阶段：computedgetteroroptions\" style=\"position:relative;\"><a href=\"#%E7%AC%AC%E4%BA%94%E9%98%B6%E6%AE%B5%EF%BC%9Acomputedgetteroroptions\" aria-label=\"第五阶段：computedgetteroroptions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第五阶段：computed(getterOrOptions)</h2>\n<p>computed 实现原理：</p>\n<ol>\n<li>Ref 类型</li>\n<li>dirty 脏检查位</li>\n</ol>\n<p>所以计算属性就是个 Ref 类型结果对象，包含(<code class=\"language-text\">__v_isRef, get value(), set value()</code>)，有两种使用方式</p>\n<ol>\n<li>getterOrOptions 是函数那么就只会有 getter</li>\n<li>getterOrOptions 是对象可以提供自定义的 setter 和 getter</li>\n</ol>\n<p>每个 computed 都有一个名为 runner 的 effect，用来处理计算属性所依赖的值的变更所需要作出的行为。</p>\n<p>一个计算属性使用流程大概是这样的：</p>\n<ol>\n<li>取值触发 get value() </li>\n<li>检查 dirty，如果为 true，表示值由边则调用 runner() 重新计算新值</li>\n<li>\n<p>如果依赖的值发生变更，也会触发 runner()</p>\n<p><em>因为 runner 是个 effect，在 fn 里面使用其他值(比如：<code class=\"language-text\">obj.foo</code>)会触发这些值来收集这个 effect:runner 所以这些值改变会触发 runner。</em></p>\n</li>\n<li>\n<p>即 obj.foo++ 改变，调用 trigger:set，trigger的时候检测到 runner 有schudler 所有调用它</p>\n<p><em>此时 runner: dirty 如果是 false 情况下就会触发 trigger(computed, ‘set’, ‘value’)，重点是会将脏位标识置为 dirty = true，那么下次取值的时候就会知道值发生改变了，就会触发 runner() 重新计算值。</em></p>\n</li>\n<li>经过第四部之后， computed.value 并没有真正的更新，必须它被实际访问的时候才会去触发 runner() 重新计算值。</li>\n</ol>\n<p><strong>所以说计算属性并不是在依赖值更新之后就会立即发生变化，必须在依赖值变更之后被访问了之后触发 get value() 才会重新计算值。</strong></p>\n<hr>\n<p>严格来说应该不是按照这五个阶段来完成的，其实最耗时间的是在第一和第二阶段，尤其是第二阶段。</p>\n<p>第二阶段耗时间的地方有两个</p>\n<ol>\n<li>createGetter -> track</li>\n<li>createSetter -> trigger</li>\n</ol>\n<p>主要时间花在这两个上了，所以如果还可以拆分阶段肯定是这里。</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%E7%AE%80%E4%BB%8B\">简介</a></p>\n<ul>\n<li><a href=\"#%E9%98%B6%E6%AE%B5%E4%BB%A3%E7%A0%81%E9%93%BE%E6%8E%A5\">阶段代码链接</a></li>\n<li><a href=\"#%E6%96%87%E4%B8%AD%E9%87%8D%E7%82%B9%E9%93%BE%E6%8E%A5\">文中重点链接</a></li>\n<li><a href=\"#%E9%81%97%E7%95%99%E9%97%AE%E9%A2%98\">遗留问题</a></li>\n<li><a href=\"#%E6%9B%B4%E6%96%B0\">更新</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%A8%A1%E5%9D%97%E7%BB%93%E6%9E%84\">模块结构</a></li>\n<li><a href=\"#proxy-%E5%92%8C-reflect-%E5%9B%9E%E9%A1%BE\">Proxy 和 Reflect 回顾</a></li>\n<li><a href=\"#reactive-%E5%87%BD%E6%95%B0\">reactive 函数</a></li>\n<li>\n<p><a href=\"#createreactiveobject\">createReactiveObject</a></p>\n<ul>\n<li><a href=\"#%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8\">参数列表</a></li>\n<li><a href=\"#%E5%87%BD%E6%95%B0%E4%BD%93\">函数体</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8-reactive\">使用 <code class=\"language-text\">reactive</code></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#basehandlersts\">baseHandlers.ts</a></p>\n<ul>\n<li><a href=\"#%E5%88%97%E5%87%BA%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9B%B8%E5%85%B3%E7%9A%84%E5%87%BD%E6%95%B0%E5%92%8C%E5%B1%9E%E6%80%A7%EF%BC%9A\">列出文件中相关的函数和属性：</a></li>\n<li><a href=\"#creategetterisreadonly--false-shallow--false\">createGetter(isReadonly = false, shallow = false)</a></li>\n<li><a href=\"#%E9%80%92%E5%BD%92-reactive%EF%BC%8C%E5%B0%B1%E5%9C%A8%E6%9C%80%E5%90%8E%E8%BF%94%E5%9B%9E%E7%9A%84%E6%97%B6%E5%80%99%E6%A3%80%E6%B5%8B-res-%E7%BB%93%E6%9E%9C%E6%97%B6%E5%80%99\">递归 <code class=\"language-text\">reactive</code>，就在最后返回的时候检测 <code class=\"language-text\">res</code> 结果时候</a></li>\n<li><a href=\"#%E6%94%B6%E9%9B%86%E4%BE%9D%E8%B5%96track\">收集依赖(<code class=\"language-text\">track</code>)</a></li>\n<li><a href=\"#createsettershallow--false\">createSetter(shallow = false)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#effectts\">effect.ts</a></p>\n<ul>\n<li><a href=\"#tracktarget-type-key\">track(target, type, key)</a></li>\n<li><a href=\"#trigger\">trigger(…)</a></li>\n<li><a href=\"#effectfn-options\">effect(fn, options)</a></li>\n<li><a href=\"#%E5%AF%B9%E6%AF%94%E4%B8%89%E4%B8%AA%E5%87%BD%E6%95%B0\">对比三个函数</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%B0%8F%E7%BB%93-1\">小结 1</a></li>\n<li>\n<p><a href=\"#%E6%94%AF%E6%8C%81%E6%95%B0%E7%BB%84-reactive\">支持数组 reactive</a></p>\n<ul>\n<li><a href=\"#jest-%E6%B5%8B%E8%AF%95%EF%BC%9A\">jest 测试：</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#handlers%E7%BB%ADbasehandlers-%E7%9A%84-delete-has-ownkeys\">handlers续(baseHandlers 的 delete, has, ownKeys)</a></p>\n<ul>\n<li><a href=\"#delete\">delete</a></li>\n<li><a href=\"#has\">has</a></li>\n<li><a href=\"#ownkeys\">ownKeys</a></li>\n<li><a href=\"#jest-%E6%B5%8B%E8%AF%95\">jest 测试</a></li>\n<li><a href=\"#%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%BB%93%E6%9E%9C%E5%88%86%E6%9E%90\">测试用例结果分析</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E5%B0%8F%E7%BB%93-2\">小结 2</a></p>\n<ul>\n<li><a href=\"#font-colorpurplereactive---createreactiveobjectfont\"><strong><font color=\"purple\">reactive - createReactiveObject</font></strong></a></li>\n<li><a href=\"#font-colorpurplecreategetterfont\"><strong><font color=\"purple\">createGetter</font></strong></a></li>\n<li><a href=\"#font-colorpurplecreatesetterfont\"><strong><font color=\"purple\">createSetter</font></strong></a></li>\n<li><a href=\"#font-colorpurpletrackfont\"><strong><font color=\"purple\">track</font></strong></a></li>\n<li><a href=\"#font-colorpurpletriggerfont\"><strong><font color=\"purple\">trigger</font></strong></a></li>\n<li><a href=\"#font-colorpurpleeffectfont\"><strong><font color=\"purple\">effect</font></strong></a></li>\n<li><a href=\"#font-colorpurpleownkeys-has-deletefont\"><strong><font color=\"purple\">ownKeys, has, delete</font></strong></a></li>\n<li><a href=\"#%E5%85%B6%E4%BB%96\">其他</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E6%9B%B4%E6%96%B02020-05-25-105440\">更新(2020-05-25 10:54:40)</a></p>\n<ul>\n<li><a href=\"#reactivets\">reactive.ts</a></li>\n<li><a href=\"#basehandlersts-1\">baseHandlers.ts</a></li>\n<li><a href=\"#effectts-1\">effect.ts</a></li>\n<li><a href=\"#jest\">jest</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#collectionhandlersts\">collectionHandlers.ts</a></p>\n<ul>\n<li><a href=\"#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\">准备工作</a></li>\n<li><a href=\"#createinstrumentationgetter\">createInstrumentationGetter</a></li>\n<li><a href=\"#gettarget-key-wrap\">get(target, key, wrap)</a></li>\n<li><a href=\"#setthis-key-value\">set(this, key, value)</a></li>\n<li><a href=\"#sizetarget\">size(target)</a></li>\n<li><a href=\"#addvalue\">add(value)</a></li>\n<li><a href=\"#deleteentrykey\">deleteEntry(key)</a></li>\n<li><a href=\"#haskey\">has(key)</a></li>\n<li><a href=\"#clear\">clear()</a></li>\n<li><a href=\"#foreachisreadonly-shallow\">forEach(isReadonly, shallow)</a></li>\n<li><a href=\"#%E4%B8%89%E4%B8%AA%E5%B0%8F%E7%9F%AE%E4%BA%BAhandlers-createiterablemethod\">三个小矮人(handlers, createIterableMethod)</a></li>\n<li><a href=\"#jest-1\">jest</a></li>\n<li><a href=\"#%E5%B0%8F%E7%BB%93\">小结</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#refts\">ref.ts</a></p>\n<ul>\n<li><a href=\"#%E5%86%85%E5%AE%B9%E5%88%97%E8%A1%A8\">内容列表</a></li>\n<li><a href=\"#%E6%BA%90%E7%A0%81\">源码</a></li>\n<li><a href=\"#%E6%B5%8B%E8%AF%95\">测试</a></li>\n<li><a href=\"#jest-2\">jest</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#computedts\">computed.ts</a></p>\n<ul>\n<li><a href=\"#%E6%B5%8B%E8%AF%95%E4%B8%80%EF%BC%9A%E4%BE%9D%E8%B5%96%E6%94%B6%E9%9B%86\">测试一：依赖收集</a></li>\n<li><a href=\"#jest-3\">jest</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E6%80%BB%E7%BB%93\">总结</a></p>\n<ul>\n<li><a href=\"#%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9Areactive-\">**第一阶段：reactive() **</a></li>\n<li><a href=\"#%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5%EF%BC%9Abasehandlers\">第二阶段：baseHandlers</a></li>\n<li><a href=\"#%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%EF%BC%9Aeffect-%E6%9E%84%E5%BB%BA-dep\">第三阶段：effect() 构建 Dep</a></li>\n<li><a href=\"#%E7%AC%AC%E5%9B%9B%E9%98%B6%E6%AE%B5%EF%BC%9Acollectionhandlers\">第四阶段：collectionHandlers</a></li>\n<li><a href=\"#%E7%AC%AC%E5%9B%9B%E9%98%B6%E6%AE%B5%EF%BC%9Aref\">第四阶段：Ref</a></li>\n<li><a href=\"#%E7%AC%AC%E4%BA%94%E9%98%B6%E6%AE%B5%EF%BC%9Acomputedgetteroroptions\">第五阶段：computed(getterOrOptions)</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Vue3.0 源码系列 01 -- Reactivity","date":"June 16, 2020","description":"vue3.0 source code of reactivity"}}},"pageContext":{"slug":"/vue3/reactivity/","previous":{"fields":{"slug":"/front-end/es6++/"},"frontmatter":{"title":"ES6++"}},"next":{"fields":{"slug":"/algo/leetcode-easy/"},"frontmatter":{"title":"Algorithm on leetcode easy level【DOING】"}}}}}