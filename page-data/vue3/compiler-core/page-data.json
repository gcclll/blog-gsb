{"componentChunkName":"component---src-templates-blog-post-js","path":"/vue3/compiler-core/","result":{"data":{"site":{"siteMetadata":{"title":"若叶知秋"}},"markdownRemark":{"id":"9b0cfa12-7d30-54dc-92f1-9035d433df6d","excerpt":"该系列文章，均以测试用例通过为基准一步步实现一个 vue3 源码副本(学习)。 可能感兴趣列表： 各种流程图(函数/功能/实现/…)无图无真相系列 🛬 🛬 🛬 🛬 🛬 源码相关的疑问/问题列表及其解答 🛳 🛳 🛳 🛳 🛳 阶段性的代码备份(比如能pass…","html":"<blockquote>\n<p>该系列文章，均以测试用例通过为基准一步步实现一个 vue3 源码副本(学习)。</p>\n</blockquote>\n<p><font color=\"#fc02ff\"><strong>可能感兴趣列表：</strong></font></p>\n<ol>\n<li><a href=\"#flowchart-list\">各种流程图(函数/功能/实现/…)无图无真相系列</a> 🛬 🛬 🛬 🛬 🛬</li>\n<li><a href=\"#issues\">源码相关的疑问/问题列表及其解答</a> 🛳 🛳 🛳 🛳 🛳</li>\n<li><a href=\"#stage-codes\">阶段性的代码备份(比如能pass某个用例)</a> 🚘 🚘 🚘 🚘 🚘</li>\n</ol>\n<h1 id=\"测试用例分析\" style=\"position:relative;\"><a href=\"#%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E5%88%86%E6%9E%90\" aria-label=\"测试用例分析 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>测试用例分析</h1>\n<p>原本是想直接根据源码去了解这部分的实现原理的，但是发现纯粹的代码分析有点困难，这部分不像 reactivity 模块那么直观，并且感觉这块比 reactivity 复杂的多，因此先探究如何使用，从如何使用到怎么实现去逐步实现，分析源代码。</p>\n<p>compiler-core 模块的测试用例包含以下部分，将依次进行分析：</p>\n<ol>\n<li>parse.spec.ts</li>\n<li>compile.spec.ts</li>\n<li>codegen.spec.ts</li>\n<li>scopeId.spec.ts</li>\n<li>transform.spec.ts</li>\n<li>\n<p>transforms/</p>\n<ol>\n<li>hoistStatic.spec.ts</li>\n<li>noopDirectiveTransform.spec.ts</li>\n<li>transformElement.spec.ts</li>\n<li>transformExpressions.spec.ts</li>\n<li>transformSlotOutlet.spec.ts</li>\n<li>transformText.spec.ts</li>\n<li>vBind.spec.ts</li>\n<li>vFor.spec.ts</li>\n<li>vIf.spec.ts</li>\n<li>vModel.spec.ts</li>\n<li>vOn.spec.ts</li>\n<li>vOnce.spec.ts</li>\n<li>vSlot.spec.ts</li>\n</ol>\n</li>\n<li>utils.spec.ts</li>\n<li>testUtils.ts</li>\n</ol>\n<h2 id=\"parsespects\" style=\"position:relative;\"><a href=\"#parsespects\" aria-label=\"parsespects permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>parse.spec.ts</h2>\n<p>测试用例结构：compiler: parse</p>\n<h3 id=\"element-元素标签解析\" style=\"position:relative;\"><a href=\"#element-%E5%85%83%E7%B4%A0%E6%A0%87%E7%AD%BE%E8%A7%A3%E6%9E%90\" aria-label=\"element 元素标签解析 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Element 元素标签解析</h3>\n<h4 id=\"05-template-element-with-directives\" style=\"position:relative;\"><a href=\"#05-template-element-with-directives\" aria-label=\"05 template element with directives permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>05-template element with directives</h4>\n<p><span id=\"test-element-05\"></span></p>\n<p>这个用例开始模板的解析。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'template element with directives'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> ast <span class=\"token operator\">=</span> <span class=\"token function\">baseParse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;template v-if=\"ok\">&lt;/template>'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> ast<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">ELEMENT</span><span class=\"token punctuation\">,</span>\n    tagType<span class=\"token operator\">:</span> ElementTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">TEMPLATE</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">baseParse(&#39;&lt;template v-if=&quot;ok&quot;&gt;&lt;/template&gt;&#39;)</code> 解析之后的结构：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"children\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span> <span class=\"token comment\">// &lt;template> 节点</span>\n            <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"ns\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"tag\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"template\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"tagType\"</span><span class=\"token operator\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"props\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// DIRECTIVE</span>\n                    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"if\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"exp\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n                        <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// SIMPLE_EXPRESSION</span>\n                        <span class=\"token property\">\"content\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"ok\"</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token property\">\"isStatic\"</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token property\">\"isConstant\"</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token property\">\"loc\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n                            <span class=\"token comment\">// ... 省略</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"modifiers\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n\t\t\t\t\t\t\t\t\t\t\t <span class=\"token comment\">// 修饰符</span>\n                    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"loc\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n                        <span class=\"token comment\">// 省略</span>\n                        <span class=\"token property\">\"source\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"v-if=\"</span>ok<span class=\"token string\">\"\"</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">// ... 省略</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// ... 省去</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>为了能解析出 <code class=\"language-text\">v-if=&quot;ok&quot;</code> 我们需要去实现 <a href=\"#parse-parseattributes\">parseAttributes(context, type)</a> -> <a href=\"#parse-parseattribute\">parseAttribute</a> -> <a href=\"#parse-parseattributevalue\">parseAttributeValue</a></p>\n<p>该用例考察的其实并不是 <code class=\"language-text\">&lt;template&gt;</code> 模板标签解析，而是标签上的属性解析，对普通的 <code class=\"language-text\">&lt;div&gt;</code> 标签依然可以解析出属性 props[]。</p>\n<h4 id=\"04-void-element\" style=\"position:relative;\"><a href=\"#04-void-element\" aria-label=\"04 void element permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>04-void element</h4>\n<p><span id=\"test-element-04\"></span></p>\n<p>空标签解析，如：<code class=\"language-text\">&lt;img&gt;</code> </p>\n<p>前提是提供了 <code class=\"language-text\">isVoidTag()</code> 选项。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'void element'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> ast <span class=\"token operator\">=</span> <span class=\"token function\">baseParse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;img>after'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">isVoidTag</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">tag</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> tag <span class=\"token operator\">===</span> <span class=\"token string\">'img'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> ast<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toStrictEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">ELEMENT</span><span class=\"token punctuation\">,</span>\n    ns<span class=\"token operator\">:</span> Namespaces<span class=\"token punctuation\">.</span><span class=\"token constant\">HTML</span><span class=\"token punctuation\">,</span>\n    tag<span class=\"token operator\">:</span> <span class=\"token string\">'img'</span><span class=\"token punctuation\">,</span>\n    tagType<span class=\"token operator\">:</span> ElementTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">ELEMENT</span><span class=\"token punctuation\">,</span>\n    codegenNode<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n    props<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    isSelfClosing<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    loc<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      start<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      end<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      source<span class=\"token operator\">:</span> <span class=\"token string\">'&lt;img>'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>该用例和<a href=\"#test-element-03\">自闭标签</a>类似都是在 <a href=\"#parse-parsetag\">parseTag</a> 解析完之后在 <a href=\"#parse-parseelement\">parseElement</a> 中结束解析，不同点在于调用 <a href=\"#parse-baseparse\">baseParse</a> 的时候需要传递一个包含 <code class=\"language-text\">isVoidTag()</code> 的选项 <code class=\"language-text\">{ isVoidTag: tag =&gt; tag === &#39;img&#39;}</code> 用来告诉解析器什么样的标签属于空标签，即不是 <code class=\"language-text\">&lt;img/&gt;</code> 也不是 <code class=\"language-text\">&lt;div&gt;&lt;/div&gt;</code> 类型。</p>\n<p><a href=\"#parse-parseelement\">parseElement</a> 中解析条件：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">parseElement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context<span class=\"token punctuation\">,</span> ancestors</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ... parseTag 中解析 &lt;img ...></span>\n  <span class=\"token comment\">// 自闭合的到这里就可以结束了</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span>isSelfClosing <span class=\"token operator\">||</span> context<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>isVoidTag<span class=\"token operator\">?.</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> element\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"03-self-closing\" style=\"position:relative;\"><a href=\"#03-self-closing\" aria-label=\"03 self closing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>03-self closing</h4>\n<p><span id=\"test-element-03\"></span></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'self closing'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> ast <span class=\"token operator\">=</span> <span class=\"token function\">baseParse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;div/>after'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> ast<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toStrictEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">ELEMENT</span><span class=\"token punctuation\">,</span>\n    ns<span class=\"token operator\">:</span> Namespaces<span class=\"token punctuation\">.</span><span class=\"token constant\">HTML</span><span class=\"token punctuation\">,</span>\n    tag<span class=\"token operator\">:</span> <span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span>\n    tagType<span class=\"token operator\">:</span> ElementTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">ELEMENT</span><span class=\"token punctuation\">,</span>\n    codegenNode<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n    props<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    isSelfClosing<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    loc<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      start<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      end<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">7</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      source<span class=\"token operator\">:</span> <span class=\"token string\">'&lt;div/>'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"02-empty-div\" style=\"position:relative;\"><a href=\"#02-empty-div\" aria-label=\"02 empty div permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>02-empty div</h4>\n<p><span id=\"test-element-02\"></span></p>\n<p>和 <a href=\"#test-element-01\">01-simple div</a> 一样，无非就是没有 <code class=\"language-text\">children[]</code> 子节点了。在 <a href=\"#parse-parseelement\">parseElement</a> -> <a href=\"#parse-parsetag\">parseTag</a> 解析就结束了。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'empty div'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> ast <span class=\"token operator\">=</span> <span class=\"token function\">baseParse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;div>&lt;/div>'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> ast<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toStrictEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">ELEMENT</span><span class=\"token punctuation\">,</span>\n    ns<span class=\"token operator\">:</span> Namespaces<span class=\"token punctuation\">.</span><span class=\"token constant\">HTML</span><span class=\"token punctuation\">,</span>\n    tag<span class=\"token operator\">:</span> <span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span>\n    tagType<span class=\"token operator\">:</span> ElementTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">ELEMENT</span><span class=\"token punctuation\">,</span>\n    codegenNode<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n    props<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    isSelfClosing<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    loc<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      start<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      end<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">12</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      source<span class=\"token operator\">:</span> <span class=\"token string\">'&lt;div>&lt;/div>'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"01-simple-div\" style=\"position:relative;\"><a href=\"#01-simple-div\" aria-label=\"01 simple div permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>01-simple div</h4>\n<p><span id=\"test-element-01\"></span></p>\n<p>解析结果流程图(xmind 画流程图真实low的不行，😅)：</p>\n<p><img src=\"http://qiniu.ii6g.com/parse-test-element--01.png?imageMogr2/thumbnail/!100p\"></p>\n<p>drawer.io 流程图：</p>\n<p><img src=\"http://qiniu.ii6g.com/test-parse-simple-tag.png?imageMogr2/thumbnail/!100p\"></p>\n<p>因为 <a href=\"#parse-parseelement\">parseElement</a> 已经实现，因此这个顺利通过，<code class=\"language-text\">parseElement</code> 解析先检测 <code class=\"language-text\">&lt;/div&gt;</code> 结束标签位置，如果没有则为非法无结束标签触发 <code class=\"language-text\">ErrorCodes.EOF_IN_TAG</code> 异常。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'simple div'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> ast <span class=\"token operator\">=</span> <span class=\"token function\">baseParse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;div>hello&lt;/div>'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> ast<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toStrictEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">ELEMENT</span><span class=\"token punctuation\">,</span>\n    ns<span class=\"token operator\">:</span> Namespaces<span class=\"token punctuation\">.</span><span class=\"token constant\">HTML</span><span class=\"token punctuation\">,</span>\n    tag<span class=\"token operator\">:</span> <span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span>\n    tagType<span class=\"token operator\">:</span> ElementTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">ELEMENT</span><span class=\"token punctuation\">,</span>\n    codegenNode<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n    props<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    isSelfClosing<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// &lt;div 后为 > 为非自闭合标签</span>\n    children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXT</span><span class=\"token punctuation\">,</span>\n        content<span class=\"token operator\">:</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span>\n        loc<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          start<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// h 位置索引</span>\n          end<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">11</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// o 位置索引</span>\n          source<span class=\"token operator\">:</span> <span class=\"token string\">'hello'</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    loc<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      start<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      end<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">17</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// 遇到&lt;div> 会直接判断是否有 &lt;/div> 然后截取`&lt;div>...&lt;/div></span>\n      source<span class=\"token operator\">:</span> <span class=\"token string\">'&lt;div>hello&lt;/div>'</span> \n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>标签的解析在 <a href=\"#parse-parsetag\">parseTag</a> 中完成， 如果是自闭合标签，会置标志位 <code class=\"language-text\">isSelfClosing = true</code>。</p>\n<p>并且解析标签只会解析到 <code class=\"language-text\">&lt;div&gt;</code> 中的 <code class=\"language-text\">&lt;div</code> 部分就结束，是因为需要检测后面是 <code class=\"language-text\">&gt;</code> 还是 <code class=\"language-text\">/&gt;</code> 如果是 <code class=\"language-text\">/&gt;</code> 则为自闭合标签需要区分处理，因此这里会有个判断来决定 <code class=\"language-text\">advanceBy</code> 1 或 2 个指针位置。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// parseTag</span>\n<span class=\"token keyword\">let</span> isSelfClosing <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">emitError</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ErrorCodes<span class=\"token punctuation\">.</span><span class=\"token constant\">EOF_IN_TAG</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// some &lt;div> ... &lt;/div> 到这里的 source = > ... &lt;/div></span>\n  <span class=\"token comment\">// 所以可以检测是不是以 /> 开头的</span>\n  isSelfClosing <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/>'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> TagType<span class=\"token punctuation\">.</span>End <span class=\"token operator\">&amp;&amp;</span> isSelfClosing<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">emitError</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ErrorCodes<span class=\"token punctuation\">.</span><span class=\"token constant\">END_TAG_WITH_TRAILING_SOLIDUS</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 如果是自闭合指针移动两位(/>)，否则只移动一位(>)</span>\n  <span class=\"token comment\">// 到这里 source = ... &lt;/div></span>\n  <span class=\"token function\">advanceBy</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> isSelfClosing <span class=\"token operator\">?</span> <span class=\"token number\">2</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"comment-注释解析\" style=\"position:relative;\"><a href=\"#comment-%E6%B3%A8%E9%87%8A%E8%A7%A3%E6%9E%90\" aria-label=\"comment 注释解析 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Comment 注释解析</h3>\n<p>注释风格：<code class=\"language-text\">&lt;!-- ... --&gt;</code>，<a href=\"#link-05\">阶段5</a> 及之前还不支持注释解析，因为还没实现 <a href=\"#parse-parsecomment\">parseComment</a>。</p>\n<p>注释测试用例不存在阶段性的实现，只要实现了 <a href=\"#parse-parsecomment\">parseComment</a> 就饿都可以通过了，因此这里放在一起通过记录。</p>\n<ol>\n<li><strong>empty comment</strong> 空注释节点</li>\n<li><strong>simple comment</strong> 正常注释节点</li>\n<li><strong>two comments</strong> 多个注释节点</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Comment'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'empty comment'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> ast <span class=\"token operator\">=</span> <span class=\"token function\">baseParse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;!---->'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> comment <span class=\"token operator\">=</span> ast<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>comment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toStrictEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">COMMENT</span><span class=\"token punctuation\">,</span>\n      content<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      loc<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        start<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        end<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">8</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        source<span class=\"token operator\">:</span> <span class=\"token string\">'&lt;!---->'</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// empty comment</span>\n\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'simple comment'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> ast <span class=\"token operator\">=</span> <span class=\"token function\">baseParse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;!--abc-->'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> comment <span class=\"token operator\">=</span> ast<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>comment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toStrictEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">COMMENT</span><span class=\"token punctuation\">,</span>\n      content<span class=\"token operator\">:</span> <span class=\"token string\">'abc'</span><span class=\"token punctuation\">,</span>\n      loc<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        start<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        end<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">11</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        source<span class=\"token operator\">:</span> <span class=\"token string\">'&lt;!--abc-->'</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// simple comment</span>\n\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'two comments'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> ast <span class=\"token operator\">=</span> <span class=\"token function\">baseParse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;!--abc-->&lt;!--def-->'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> comment1 <span class=\"token operator\">=</span> ast<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">const</span> comment2 <span class=\"token operator\">=</span> ast<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>comment1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toStrictEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">COMMENT</span><span class=\"token punctuation\">,</span>\n      content<span class=\"token operator\">:</span> <span class=\"token string\">'abc'</span><span class=\"token punctuation\">,</span>\n      loc<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        start<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        end<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">11</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        source<span class=\"token operator\">:</span> <span class=\"token string\">'&lt;!--abc-->'</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>comment2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toStrictEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">COMMENT</span><span class=\"token punctuation\">,</span>\n      content<span class=\"token operator\">:</span> <span class=\"token string\">'def'</span><span class=\"token punctuation\">,</span>\n      loc<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        start<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">11</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        end<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">21</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        source<span class=\"token operator\">:</span> <span class=\"token string\">'&lt;!--def-->'</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// two comments</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这里总共有三个用例，一开始测试并不能通过，是因为实现 <a href=\"#parse-pushnode\">pushNode</a> 的时候忘记加上 <code class=\"language-text\">__DEV__</code> 环境检测了，因为生产环境是不需要保存注释节点的，开发环境为了测试需要有这个信息。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">pushNode</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nodes<span class=\"token punctuation\">,</span> node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 这里加上 __DEV__ 检测，开发的时候还是需要的</span>\n  <span class=\"token comment\">// 不然用例会通不过，因为这里直接返回 Undefined 了，导致</span>\n  <span class=\"token comment\">// parent.children[] 里面并不存在这个注释节点</span>\n  <span class=\"token comment\">// 加上就好了</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>__DEV__ <span class=\"token operator\">&amp;&amp;</span> node<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">COMMENT</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 注释节点不处理</span>\n    <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">}</span>\n\n <span class=\"token comment\">// ... 省略</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"interpolation-插值解析\" style=\"position:relative;\"><a href=\"#interpolation-%E6%8F%92%E5%80%BC%E8%A7%A3%E6%9E%90\" aria-label=\"interpolation 插值解析 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Interpolation 插值解析</h3>\n<h4 id=\"05-custom-delimiters\" style=\"position:relative;\"><a href=\"#05-custom-delimiters\" aria-label=\"05 custom delimiters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>05-custom delimiters</h4>\n<p><span id=\"test-interpolation-05\"></span></p>\n<p>自定义插值分隔符，其实处理流程和插值处理一样，所以没啥好讲的，<a href=\"#link-04\">阶段代码4</a> 就支持该用例通过。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'custom delimiters'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> ast <span class=\"token operator\">=</span> <span class=\"token function\">baseParse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;p>{msg}&lt;/p>'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    delimiters<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'{'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'}'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> ast<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> interpolation <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>interpolation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toStrictEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">INTERPOLATION</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">SIMPLE_EXPRESSION</span><span class=\"token punctuation\">,</span>\n      content<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">msg</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      isStatic<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      isConstant<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      loc<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        start<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        end<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">8</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        source<span class=\"token operator\">:</span> <span class=\"token string\">'msg'</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    loc<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      start<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      end<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">9</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      source<span class=\"token operator\">:</span> <span class=\"token string\">'{msg}'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"04-it-can-have-tag-like-notation-3\" style=\"position:relative;\"><a href=\"#04-it-can-have-tag-like-notation-3\" aria-label=\"04 it can have tag like notation 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>04-it can have tag-like notation (3)</h4>\n<p><span id=\"test-interpolation-04\"></span></p>\n<p>前面的两个用例已经解释过了，插值里面的内容会在 <a href=\"#parse-parseinterpolation\">parseInterpolation</a> 中直接处理成插值的模板(source)，不会进入到 while 循环触发异常。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'it can have tag-like notation (3)'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> ast <span class=\"token operator\">=</span> <span class=\"token function\">baseParse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;div>{{ \"&lt;/div>\" }}&lt;/div>'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 这里解析出来的是 &lt;div>&lt;/div> 这个元素节点</span>\n  <span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> ast<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> ElementNode \n  <span class=\"token comment\">// 标签内部的所有内容在解析之后会被当做子节点存放到 children[] 数组中</span>\n  <span class=\"token comment\">// 因此这里第一个子节点是个插值模板</span>\n  <span class=\"token keyword\">const</span> interpolation <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> InterpolationNode\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>interpolation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toStrictEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">INTERPOLATION</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">SIMPLE_EXPRESSION</span><span class=\"token punctuation\">,</span>\n      isStatic<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// The `isConstant` is the default value and will be determined in `transformExpression`.</span>\n      isConstant<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      content<span class=\"token operator\">:</span> <span class=\"token string\">'\"&lt;/div>\"'</span><span class=\"token punctuation\">,</span>\n      loc<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        start<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">9</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        end<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">17</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        source<span class=\"token operator\">:</span> <span class=\"token string\">'\"&lt;/div>\"'</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    loc<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      start<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      end<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">19</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      source<span class=\"token operator\">:</span> <span class=\"token string\">'{{ \"&lt;/div>\" }}'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"03-it-can-have-tag-like-notation2\" style=\"position:relative;\"><a href=\"#03-it-can-have-tag-like-notation2\" aria-label=\"03 it can have tag like notation2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>03-it can have tag-like notation(2)</h4>\n<p><span id=\"test-interpolation-03\"></span></p>\n<p>这个用例其实和 <a href=\"#test-interpolation-02\">用例2</a> 是一样的，只不过是解析了两个插值而已，先解析 <code class=\"language-text\">{{ a&lt;b }}</code> ，最后剩下的 <code class=\"language-text\">{{ c&gt;d }}</code> 会在退出 <a href=\"#parse-parseinterpolation\">parseInterpolation</a> 之后剩余的 context.source 为 <code class=\"language-text\">{{ c&gt;d }}</code>在 <a href=\"#parse-parsechildren\">parseChildren</a> 里面继续进行 while 循环处理，随又检测到是插值再次调用 <code class=\"language-text\">parseInterpolation</code> 进行处理得到第二个插值节点。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'it can have tag-like notation (2)'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> ast <span class=\"token operator\">=</span> <span class=\"token function\">baseParse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{{ a&lt;b }}{{ c>d }}'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> interpolation1 <span class=\"token operator\">=</span> ast<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> InterpolationNode\n  <span class=\"token keyword\">const</span> interpolation2 <span class=\"token operator\">=</span> ast<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> InterpolationNode\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>interpolation1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toStrictEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">INTERPOLATION</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">SIMPLE_EXPRESSION</span><span class=\"token punctuation\">,</span>\n      content<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a&lt;b</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      isStatic<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      isConstant<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      loc<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        start<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        end<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">7</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        source<span class=\"token operator\">:</span> <span class=\"token string\">'a&lt;b'</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    loc<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      start<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      end<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      source<span class=\"token operator\">:</span> <span class=\"token string\">'{{ a&lt;b }}'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>interpolation2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toStrictEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">INTERPOLATION</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">SIMPLE_EXPRESSION</span><span class=\"token punctuation\">,</span>\n      isStatic<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      isConstant<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      content<span class=\"token operator\">:</span> <span class=\"token string\">'c>d'</span><span class=\"token punctuation\">,</span>\n      loc<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        start<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">13</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        end<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">16</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        source<span class=\"token operator\">:</span> <span class=\"token string\">'c>d'</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    loc<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      start<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      end<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">19</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      source<span class=\"token operator\">:</span> <span class=\"token string\">'{{ c>d }}'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"#link-04\">支持该用例代码链接🛬</a></p>\n<h4 id=\"02-it-can-have-tag-like-notation1\" style=\"position:relative;\"><a href=\"#02-it-can-have-tag-like-notation1\" aria-label=\"02 it can have tag like notation1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>02-it can have tag-like notation(1)</h4>\n<p><span id=\"test-interpolation-02\"></span></p>\n<p>该用例里面虽然有 <code class=\"language-text\">&lt;</code> 符号，但是由于是在插值内部，会进入 <a href=\"#parse-parseinterpolation\">parseInterpolation</a> 之后就被解析成插值的 source，并不会进入 while 里面的作为标签的开始 <code class=\"language-text\">&lt;</code> 来解析。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'it can have tag-like notation'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> ast <span class=\"token operator\">=</span> <span class=\"token function\">baseParse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{{ a&lt;b }}'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> interpolation <span class=\"token operator\">=</span> ast<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>interpolation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toStrictEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">INTERPOLATION</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">SIMPLE_EXPRESSION</span><span class=\"token punctuation\">,</span>\n      content<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a&lt;b</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// content = preTrimContent.trim() 去掉前后空格</span>\n      isStatic<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      isConstant<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      loc<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        start<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        end<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">7</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        source<span class=\"token operator\">:</span> <span class=\"token string\">'a&lt;b'</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    loc<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      start<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      end<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      source<span class=\"token operator\">:</span> <span class=\"token string\">'{{ a&lt;b }}'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><a href=\"#link-04\">通过该用例代码链接🛬</a></p>\n<h4 id=\"01--simple-interpolation\" style=\"position:relative;\"><a href=\"#01--simple-interpolation\" aria-label=\"01  simple interpolation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>01- simple interpolation</h4>\n<p><span id=\"test-interpolation-01\"></span></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'simple interpolation'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> ast <span class=\"token operator\">=</span> <span class=\"token function\">baseParse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{{message}}'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> interpolation <span class=\"token operator\">=</span> ast<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>interpolation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toStrictEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">INTERPOLATION</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">SIMPLE_EXPRESSION</span><span class=\"token punctuation\">,</span>\n      content<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">message</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      isStatic<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      isConstant<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      loc<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        start<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// m 位置</span>\n        end<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 最后一个 e 位置</span>\n        source<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">message</span><span class=\"token template-punctuation string\">`</span></span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    loc<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      start<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 第一个 { 位置</span>\n      end<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">12</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 最后一个 } 位置</span>\n      source<span class=\"token operator\">:</span> <span class=\"token string\">'{{message}}'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"text-文本解析\" style=\"position:relative;\"><a href=\"#text-%E6%96%87%E6%9C%AC%E8%A7%A3%E6%9E%90\" aria-label=\"text 文本解析 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Text 文本解析</h3>\n<h4 id=\"07-lonly--dont-separate-nodes\" style=\"position:relative;\"><a href=\"#07-lonly--dont-separate-nodes\" aria-label=\"07 lonly  dont separate nodes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>07-lonly ”{{” don’t separate nodes</h4>\n<p><span id=\"test-text-06\"></span></p>\n<p>这个用例是用来检测插值不完整的情况，正常会爆出 <code class=\"language-text\">X_MISSING_INTERPOLATION_END</code> 异常，在该用例中重写了该异常处理，因此不会报错，用例会很顺利通过，因为没有异常， <a href=\"#parse-parseinterpolation\">parseInterpolation</a> 会退出，最后 <code class=\"language-text\">{{</code> 会被当做普通文本内容处理。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'lonly \"{{\" don\\'t separate nodes'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> ast <span class=\"token operator\">=</span> <span class=\"token function\">baseParse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a {{ b'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">onError</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>code <span class=\"token operator\">!==</span> ErrorCodes<span class=\"token punctuation\">.</span><span class=\"token constant\">X_MISSING_INTERPOLATION_END</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> error\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> ast<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toStrictEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXT</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token operator\">:</span> <span class=\"token string\">'a {{ b'</span><span class=\"token punctuation\">,</span>\n    loc<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      start<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      end<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">7</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      source<span class=\"token operator\">:</span> <span class=\"token string\">'a {{ b'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// lonly \"{{\" don\\'t separate nodes</span></code></pre></div>\n<p><a href=\"#parse-parseInterpolation\">parseInterpolation</a> 该用例处理代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">parseInterpolation</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context<span class=\"token punctuation\">,</span> mode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 找出插值模板的开始和结束符号，默认是 {{ 和 }}</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>open<span class=\"token punctuation\">,</span> close<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>delimiters\n  <span class=\"token keyword\">const</span> closeIndex <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>close<span class=\"token punctuation\">,</span> open<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>closeIndex <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 这里检测到没有 }} 退出，并且到这里 context 指针信息并没有改变</span>\n    <span class=\"token comment\">// 因此退出之后，重新 while 最后进入文本解析 parseText</span>\n    <span class=\"token function\">emitError</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ErrorCodes<span class=\"token punctuation\">.</span><span class=\"token constant\">X_MISSING_INTERPOLATION_END</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">undefined</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ... 省略</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>test:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">➜  packages git:(master) ✗ jest compiler-core\n PASS  compiler-core/__tests__/parse.spec.js (19.233 s)\n  compiler: parse\n    Text\n      ✓ simple text (5 ms)\n      ✓ simple text with invalid end tag (2 ms)\n      ✓ text with interpolation (1 ms)\n      ✓ text with interpolation which has `&lt;` (1 ms)\n      ✓ text with mix of tags and interpolations (1 ms)\n      ✓ lonly &quot;&lt;&quot; don&#39;t separate nodes (7 ms)\n      ✓ lonly &quot;{{&quot; don&#39;t separate nodes\n\nTest Suites: 1 passed, 1 total\nTests:       7 passed, 7 total\nSnapshots:   0 total\nTime:        23.277 s\nRan all test suites matching /compiler-core/i</code></pre></div>\n<h4 id=\"06-lonly--dont-separate-nodes\" style=\"position:relative;\"><a href=\"#06-lonly--dont-separate-nodes\" aria-label=\"06 lonly  dont separate nodes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>06-lonly ”&#x3C;” don’t separate nodes</h4>\n<p><span id=\"test-text-05\"></span></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'lonly \"&lt;\" don\\'t separate nodes'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> ast <span class=\"token operator\">=</span> <span class=\"token function\">baseParse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a &lt; b'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">onError</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>code <span class=\"token operator\">!==</span> ErrorCodes<span class=\"token punctuation\">.</span><span class=\"token constant\">INVALID_FIRST_CHARACTER_OF_TAG_NAME</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> err\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> ast<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toStrictEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXT</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token operator\">:</span> <span class=\"token string\">'a &lt; b'</span><span class=\"token punctuation\">,</span>\n    loc<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      start<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      end<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      source<span class=\"token operator\">:</span> <span class=\"token string\">'a &lt; b'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// lonly \"&lt;\" don\\'t separate nodes</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这个用例在实现的 <a href=\"#test-text-05\">test-05</a> 之后就可以通过，因为 <code class=\"language-text\">a &lt; b</code> 并不是插值一部分，会被当做纯文本处理，而为了避免报错用例中重写了 <code class=\"language-text\">onError</code>，因为 while 循环里在检测到 <code class=\"language-text\">&lt;</code> 开头的 if 条件分支中，第二个字符为空格的情况会进入最后的 else 分支处理，即触发 <code class=\"language-text\">INVALID_FIRST_CHARACTER_OF_TAG_NAME</code> 异常。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mode <span class=\"token operator\">===</span> TextModes<span class=\"token punctuation\">.</span><span class=\"token constant\">DATA</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'&lt;'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ... 标签开头 &lt;...</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">emitError</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ErrorCodes<span class=\"token punctuation\">.</span><span class=\"token constant\">EOF_BEFORE_TAG_NAME</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'!'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// TODO 注释处理，&lt;!-- ...</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token regex\">/[a-z]/i</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'?'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 会进入到这里，触发异常，但是由于 options 里提供了 onError 重写了它</span>\n    <span class=\"token comment\">// 因此这里不会触发异常，而是退出该分支进入 纯文本处理，合并文本 pushnode 操作</span>\n    <span class=\"token function\">emitError</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ErrorCodes<span class=\"token punctuation\">.</span><span class=\"token constant\">INVALID_FIRST_CHARACTER_OF_TAG_NAME</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"05-text-with-mix-of-tags-and-interpolations\" style=\"position:relative;\"><a href=\"#05-text-with-mix-of-tags-and-interpolations\" aria-label=\"05 text with mix of tags and interpolations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>05-text with mix of tags and interpolations</h4>\n<p><span id=\"test-text-05\"></span></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text with mix of tags and interpolations'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> ast <span class=\"token operator\">=</span> <span class=\"token function\">baseParse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'some &lt;span>{{ foo &lt; bar + foo }} text&lt;/span>'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> text1 <span class=\"token operator\">=</span> ast<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> TextNode\n  <span class=\"token keyword\">const</span> text2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> ElementNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>children<span class=\"token operator\">!</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> TextNode\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>text1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toStrictEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXT</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token operator\">:</span> <span class=\"token string\">'some '</span><span class=\"token punctuation\">,</span>\n    loc<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      start<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      end<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      source<span class=\"token operator\">:</span> <span class=\"token string\">'some '</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>text2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toStrictEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXT</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token operator\">:</span> <span class=\"token string\">' text'</span><span class=\"token punctuation\">,</span>\n    loc<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      start<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">33</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      end<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">37</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">38</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      source<span class=\"token operator\">:</span> <span class=\"token string\">' text'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这是个标签+插值混合模板，现阶段的代码是通不过该测试的，因为它会进入到下面这个分支：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token regex\">/[a-z]/i</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 这里都出错了，为啥后面还有个 parseTag ???</span>\n  <span class=\"token comment\">// 到这里就会报错</span>\n  <span class=\"token function\">emitError</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ErrorCodes<span class=\"token punctuation\">.</span><span class=\"token constant\">X_INVALID_END_TAG</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">parseTag</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> TagType<span class=\"token punctuation\">.</span>End<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">continue</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></code></pre></div>\n<p>如控制台输出：</p>\n<p><img src=\"http://qiniu.ii6g.com/1596638044.png?imageMogr2/thumbnail/!100p\"></p>\n<p>错误上面的输出其实是 }} 和 {{ 的解析位置信息，并且 <code class=\"language-text\">&lt;div&gt;</code> 并没有解析是因为我们还没实现 <a href=\"#parse-parseelement\">parseElement</a> 分支逻辑，所以直接过滤掉当成文本处理了。</p>\n<ol>\n<li><font color=\"blue\">右边： offset=14 刚好是 <code class=\"language-text\">some &lt;span&gt;{{</code> 字符串长度 + 1 即插值内第一个空格的位置</font></li>\n<li><font color=\"blue\">左边：offset=29 刚好是 14 + <code class=\"language-text\">foo &lt; bar + foo</code> 长度位置(slice 不包含 endIdx)， 即插值内最后一个空格的位置</font></li>\n</ol>\n<p>接下来我们得看下怎么不报错能解析 <code class=\"language-text\">&lt;/div&gt;</code> 。</p>\n<p><font color=\"green\"><em>大概的猜想是在解析 <code class=\"language-text\">&lt;div&gt;</code>的时候发现是标签，可能会重写 <code class=\"language-text\">onError</code> ，避免在解析 <code class=\"language-text\">&lt;/div&gt;</code> 触发异常，而是进入 <a href=\"#parse-parsetag\">parseTag</a> 解析结束标签。但很可惜不是这样，而是在 <a href=\"#parse-parselement\">parseElement</a> 中递归调用 <a href=\"#parse-parsechildren\">parseChildren</a> 解析标签内部的模板，解析完成之后检测结束标签，无结束标签，非法异常，具体实现请看 <a href=\"#parse-parseelement\">parseElement源码实现</a>。</em></font></p>\n<p>在实现了 <a href=\"#parse-parseelement\">parseElement</a> 和部分 <a href=\"#parse-parsetag\">parseTag</a> 之后用例通过：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">➜  packages git:(master) ✗ jest compiler-core\n PASS  compiler-core/__tests__/parse.spec.js (14.492 s)\n  compiler: parse\n    Text\n      ✓ simple text (5 ms)\n      ✓ simple text with invalid end tag (2 ms)\n      ✓ text with interpolation (2 ms)\n      ✓ text with interpolation which has `&lt;` (1 ms)\n      ✓ text with mix of tags and interpolations (2 ms)\n\nTest Suites: 1 passed, 1 total\nTests:       5 passed, 5 total\nSnapshots:   0 total\nTime:        15.743 s\nRan all test suites matching /compiler-core/i.</code></pre></div>\n<p>期间碰到个问题：</p>\n<blockquote>\n<p>Cannot find module ‘core-js/modules/es6.string.iterator’ from ‘packages/compiler-core/parse.js’</p>\n</blockquote>\n<p>解决方案：<a href=\"https://github.com/babel/babel/issues/9796\">是 core-js 降级到 2</a></p>\n<h4 id=\"04-text-with-interpolation-which-has-\" style=\"position:relative;\"><a href=\"#04-text-with-interpolation-which-has-\" aria-label=\"04 text with interpolation which has  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>04-text with interpolation which has <code class=\"language-text\">&lt;</code></h4>\n<p><span id=\"test-text-04\"></span></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text with interpolation which has `&lt;`'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> ast <span class=\"token operator\">=</span> <span class=\"token function\">baseParse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'some {{ a&lt;b &amp;&amp; c>d }} text'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> text1 <span class=\"token operator\">=</span> ast<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> TextNode\n  <span class=\"token keyword\">const</span> text2 <span class=\"token operator\">=</span> ast<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> TextNode\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>text1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toStrictEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXT</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token operator\">:</span> <span class=\"token string\">'some '</span><span class=\"token punctuation\">,</span>\n    loc<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      start<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      end<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      source<span class=\"token operator\">:</span> <span class=\"token string\">'some '</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>text2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toStrictEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXT</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token operator\">:</span> <span class=\"token string\">' text'</span><span class=\"token punctuation\">,</span>\n    loc<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      start<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">22</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      end<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">27</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      source<span class=\"token operator\">:</span> <span class=\"token string\">' text'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这个用例其实和 <a href=\"#test-text-03\">03-text with interpolation</a> 用例原理一样，虽然插值里面有特殊字符 <code class=\"language-text\">&lt;</code>，但是由于在 <a href=\"#parse-parseInterpolation\">parseInterpolation</a> 函数解析过程中是通过截取 {{ 到 }} 直接的全部字符串去解析的。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">parseInterpolation</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">context<span class=\"token operator\">:</span> ParserContext<span class=\"token punctuation\">,</span>\n  mode<span class=\"token operator\">:</span> TextModes</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> InterpolationNode <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ... 省略</span>\n  \n  <span class=\"token comment\">// 也就是这两行，将 {{ ... }} 内的所有内容一次性取出来解析了，因此并不会</span>\n  <span class=\"token comment\">// 进入到 parseChildren 的 while 循环中处理，也就不会出现异常情况</span>\n  <span class=\"token keyword\">const</span> rawContentLength <span class=\"token operator\">=</span> closeIndex <span class=\"token operator\">-</span> open<span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">const</span> rawContent <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> rawContentLength<span class=\"token punctuation\">)</span>\n  \n  <span class=\"token comment\">// ... 省略</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>所以这个用例会很顺利的通过(在 03 用例通过的前提下)。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> PASS  packages/compiler-core/__tests__/parse.spec.js (5.375 s)\n  compiler: parse\n    Text\n      ✓ simple text (5 ms)\n      ✓ simple text with invalid end tag (3 ms)\n      ✓ text with interpolation (41 ms)\n      ✓ text with interpolation which has `&lt;` (3 ms)</code></pre></div>\n<h4 id=\"03-text-with-interpolation\" style=\"position:relative;\"><a href=\"#03-text-with-interpolation\" aria-label=\"03 text with interpolation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>03-text with interpolation</h4>\n<p><span id=\"test-text-03\"></span></p>\n<p><a href=\"#link-04\">该用例代码链接 -></a></p>\n<p>该用例检验的差值的处理。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text with interpolation\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> ast <span class=\"token operator\">=</span> <span class=\"token function\">baseParse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"some {{ foo + bar }} text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> text1 <span class=\"token operator\">=</span> ast<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        text2 <span class=\"token operator\">=</span> ast<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>text1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toStrictEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXT</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token operator\">:</span> <span class=\"token string\">\"some \"</span><span class=\"token punctuation\">,</span>\n    loc<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      start<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      source<span class=\"token operator\">:</span> <span class=\"token string\">\"some \"</span><span class=\"token punctuation\">,</span>\n      end<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>text2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toStrictEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXT</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token operator\">:</span> <span class=\"token string\">\" text\"</span><span class=\"token punctuation\">,</span>\n    loc<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      start<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">21</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      source<span class=\"token operator\">:</span> <span class=\"token string\">\" text\"</span><span class=\"token punctuation\">,</span>\n      end<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">26</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>差值的处理分支在 parseChildren 的 </p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>context<span class=\"token punctuation\">.</span>inVPre <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>delimiters<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// '{{'</span>\n  node <span class=\"token operator\">=</span> <span class=\"token function\">parseInterpolation</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> mode<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>完成，因为需要 <a href=\"#parse-parseInterpolation\">parseInterpolation()</a> 的支持。</p>\n<p>用例结果(<font color=\"green\">OK</font>)：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">➜  vue-next-code-read git:(master) ✗ jest parse.spec\n PASS  packages/compiler-core/__tests__/parse.spec.js\n  compiler: parse\n    Text\n      ✓ simple text (4 ms)\n      ✓ simple text with invalid end tag (2 ms)\n      ✓ text with interpolation (47 ms)\n\n  console.log\n    { column: 18, line: 1, offset: 17 } { column: 9, line: 1, offset: 8 } 1\n\n      at parseInterpolation (packages/compiler-core/parse.js:262:11)\n\nTest Suites: 1 passed, 1 total\nTests:       3 passed, 3 total\nSnapshots:   0 total\nTime:        8.776 s\nRan all test suites matching /parse.spec/i.\n➜  vue-next-code-read git:(master) ✗</code></pre></div>\n<h4 id=\"02-simple-textdiv\" style=\"position:relative;\"><a href=\"#02-simple-textdiv\" aria-label=\"02 simple textdiv permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>02-simple text&#x3C;div></h4>\n<p><span id=\"test-text-02\"></span></p>\n<p><a href=\"#link-03\">该用例代码链接-></a></p>\n<p>在跑这个用例的时候出现内存溢出了，查了下原因是因为只是<a href=\"#link-02\">增加了 while 里面的各种 if 分支</a>，但是实际并没有实现，这个用例会走到 </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mode <span class=\"token operator\">===</span> TextModes<span class=\"token punctuation\">.</span><span class=\"token constant\">DATA</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"&lt;\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ... 标签开头 &lt;...</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">emitError</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ErrorCodes<span class=\"token punctuation\">.</span><span class=\"token constant\">EOF_BEFORE_TAG_NAME</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"!\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// TODO 注释处理，&lt;!-- ...</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// &lt;/...</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">emitError</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ErrorCodes<span class=\"token punctuation\">.</span><span class=\"token constant\">EOF_BEFORE_TAG_NAME</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">\">\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token regex\">/[a-z]/i</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 会走到这个分支里面，但是由于下面的 parseTag 未实现，因此一直在这个分支里面循环</span>\n      <span class=\"token comment\">// 加上用例里面重写了 onError 不会 throw err 终止，因此会出现死循环</span>\n      <span class=\"token function\">emitError</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ErrorCodes<span class=\"token punctuation\">.</span><span class=\"token constant\">X_INVALID_END_TAG</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 但是上面都报错了，为什么这里还要加个 parseTag??? 正常理解应该是走不到这里啊</span>\n      <span class=\"token comment\">// 除非有重写 onError 报错机制???</span>\n      <span class=\"token comment\">// parseTag(context, TagType.End, parent);</span>\n      <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>因此要通过这个用例，就必须得实现 <code class=\"language-text\">parseTag(context, TagType.End, parent)</code> 函数解析标签。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"simple text with invalid end tag\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> onError <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> ast <span class=\"token operator\">=</span> <span class=\"token function\">baseParse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"some text&lt;/div>\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    onError<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> ast<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>onError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeCalled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toStrictEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXT</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token operator\">:</span> <span class=\"token string\">\"some text\"</span><span class=\"token punctuation\">,</span>\n    loc<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      start<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      end<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      source<span class=\"token operator\">:</span> <span class=\"token string\">\"some text\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>因为 baseparse 调用的时候有传递 onError 覆盖报错代码，会进入到 parseTag 进行解析标签，如果不实现会导致死循环。因此这里要通过这个用例就必须实现 <a href=\"#parse-parsetag\">parseTag()</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">parseTag</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> parent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 获取当前解析的起始位置，此时值应该是 some text 的长度</span>\n  <span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> <span class=\"token function\">getCursor</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 匹配 &lt;/div 过滤掉空格字符，但是为什么要把 > 给忽略掉???</span>\n  <span class=\"token keyword\">const</span> match <span class=\"token operator\">=</span> <span class=\"token regex\">/^&lt;\\/?([a-z][^\\t\\r\\n\\f />]*)/i</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> tag <span class=\"token operator\">=</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> ns <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span><span class=\"token function\">getNamespace</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// log1: 改变位移，将 offset 定位到 &lt;/div> 的最有一个 > 上</span>\n  <span class=\"token comment\">// 在这里 context.offset = 10, context.line = 1</span>\n  <span class=\"token function\">advanceBy</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 过滤掉空格</span>\n  <span class=\"token function\">advanceSpaces</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// log2: 经过 advance之后 context.offset = 15, context.line = 1</span>\n  <span class=\"token comment\">// 正好过滤 &lt;/div 5个字符</span>\n  <span class=\"token keyword\">const</span> cursor <span class=\"token operator\">=</span> <span class=\"token function\">getCursor</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> currSource <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>parseTag 实现到这里就可以满足通过测试用例的条件了，这里面会去匹配 <code class=\"language-text\">&lt;/div</code> 然后将其过滤掉(通过advanceBy和 advanceSpaces 来改变 context 里面的 offset 和 line 值)，输出结果(log1 和 log2 位置 context 的输出)：</p>\n<p><img src=\"http://qiniu.ii6g.com/1595444610.png?imageMogr2/thumbnail/!100p\"></p>\n<h4 id=\"span-idtest-text-0101-simple-text\" style=\"position:relative;\"><a href=\"#span-idtest-text-0101-simple-text\" aria-label=\"span idtest text 0101 simple text permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><span id=\"test-text-01\">01-simple text</h4>\n<p>这里用到的就一个 baseParse 函数，需要我们来实现其基本的功能以通过该用例。</p>\n<p>用例源码：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'simple text'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> ast <span class=\"token operator\">=</span> <span class=\"token function\">baseParse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'some text'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> ast<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> TextNode\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toStrictEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXT</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token operator\">:</span> <span class=\"token string\">'some text'</span><span class=\"token punctuation\">,</span>\n    loc<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      start<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      end<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      source<span class=\"token operator\">:</span> <span class=\"token string\">'some text'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><a href=\"https://github.com/gcclll/vue-next-code-read/tree/master/bakups/compiler-core/test-01-some-text\">用例的基本功能，验证 baseParse 解析出来的文本节点对象是否满足基本要求</a>。\t</p>\n<p>支持该用例的重要部分代码：</p>\n<ol>\n<li>\n<p>createParseContext 构建被解析的内容的对象结构</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">createParserContext</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">/*ParserContext*/</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n   options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token operator\">...</span>defaultParserOptions<span class=\"token punctuation\">,</span>\n     <span class=\"token operator\">...</span>options<span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token comment\">// 初始化以下内容</span>\n   column<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n   line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n   offset<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n   originalSource<span class=\"token operator\">:</span> context<span class=\"token punctuation\">,</span>\n   source<span class=\"token operator\">:</span> context<span class=\"token punctuation\">,</span>\n   inPref<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n   inVPref<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>parseChildren</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">parseChildren</span><span class=\"token punctuation\">(</span>\n context <span class=\"token comment\">/* ParserContext*/</span><span class=\"token punctuation\">,</span>\n mode <span class=\"token comment\">/*TextModes*/</span><span class=\"token punctuation\">,</span>\n ancesotrs <span class=\"token comment\">/*ElementNode[]*/</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">// ...</span>\n <span class=\"token keyword\">const</span> nodes <span class=\"token comment\">/*TemplateChildNode[]*/</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isEnd</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> mode<span class=\"token punctuation\">,</span> ancesotrs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// do sth</span>\n\n   <span class=\"token keyword\">const</span> s <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">let</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">// 由于 baseparse里面传过来的是个 DATA 类型，因此会走到这个 if 里</span>\n   <span class=\"token comment\">// 面去解析</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mode <span class=\"token operator\">===</span> TextModes<span class=\"token punctuation\">.</span><span class=\"token constant\">DATA</span> <span class=\"token operator\">||</span> mode <span class=\"token operator\">===</span> TextModes<span class=\"token punctuation\">.</span><span class=\"token constant\">RCDATA</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\">// 过略掉非文本的</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>context<span class=\"token punctuation\">.</span>inVPre <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>delimiters<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token comment\">// ... 插值处理{{}}</span>\n     <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mode <span class=\"token operator\">===</span> TextModes<span class=\"token punctuation\">.</span><span class=\"token constant\">DATA</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"&lt;\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token comment\">// ... 标签开头 &lt;...</span>\n     <span class=\"token punctuation\">}</span>\n\n     <span class=\"token comment\">// ... 到这里也就是说文本节点不会被这个 if 处理，而是直接到</span>\n     <span class=\"token comment\">// !node 给 parseText 解析</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\">// 纯文本重点在这里面处理，截取字符直到遇到 &lt;, {{, ]]> 标志结束</span>\n     <span class=\"token comment\">// 然后传入到 parseTextData() 判断是否是数据绑定的变量，在 </span>\n     <span class=\"token comment\">// context.options.decodeEntities() 中处理</span>\n     node <span class=\"token operator\">=</span> <span class=\"token function\">parseText</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> node<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token function\">pushNode</span><span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token function\">pushNode</span><span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token keyword\">let</span> removedWhitespace <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">return</span> removedWhitespace <span class=\"token operator\">?</span> nodes<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>Boolean<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> nodes<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>parseText</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">parseText</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context<span class=\"token punctuation\">,</span> mode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">// 字符串解析直到遇到 &lt;, {{, ]]> 为止</span>\n <span class=\"token keyword\">const</span> endTokens <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;\"</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>delimiters<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mode <span class=\"token operator\">===</span> TextModes<span class=\"token punctuation\">.</span><span class=\"token constant\">CDATA</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   endTokens<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"]]>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token keyword\">let</span> endIndex <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> endTokens<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>endTokens<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> endIndex <span class=\"token operator\">></span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     endIndex <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> <span class=\"token function\">getCursor</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// 解析 &amp; 开头的html语义的符号(>,&lt;,&amp;,',\")</span>\n <span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> <span class=\"token function\">parseTextData</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> endIndex<span class=\"token punctuation\">,</span> mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n   type<span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXT</span><span class=\"token punctuation\">,</span>\n   content<span class=\"token punctuation\">,</span>\n   <span class=\"token comment\">// loc:{ start, end, source}</span>\n   <span class=\"token comment\">// start,end: { line, column, offset }</span>\n   loc<span class=\"token operator\">:</span> <span class=\"token function\">getSelection</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>parseTextData</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 解析文本数据，纯文本内容</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">parseTextData</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">,</span> mode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> rawText <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// 解析换行，更新 line, column, offset，返回换行之后的的 source</span>\n <span class=\"token function\">advanceBy</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n   mode <span class=\"token operator\">===</span> TextModes<span class=\"token punctuation\">.</span><span class=\"token constant\">RAWTEXT</span> <span class=\"token operator\">||</span>\n   mode <span class=\"token operator\">===</span> TextModes<span class=\"token punctuation\">.</span><span class=\"token constant\">CDATA</span> <span class=\"token operator\">||</span>\n   rawText<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> rawText<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token keyword\">return</span> context<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span><span class=\"token function\">decodeEntities</span><span class=\"token punctuation\">(</span>\n   rawText<span class=\"token punctuation\">,</span>\n   mode <span class=\"token operator\">===</span> TextModes<span class=\"token punctuation\">.</span><span class=\"token constant\">ATTRIBUTE_VALUE</span>\n <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>advancedBy 解析多个字符之后更新start,end(line,column,offset)，尤其是换行符的特殊处理。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">advanceBy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context<span class=\"token punctuation\">,</span> numberOfCharacters</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> source <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> context<span class=\"token punctuation\">;</span>\n <span class=\"token function\">advancePositionWithMutation</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">,</span> numberOfCharacters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n context<span class=\"token punctuation\">.</span>source <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>numberOfCharacters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>advancePositionWithMutation</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">advancePositionWithMutation</span><span class=\"token punctuation\">(</span>\n <span class=\"token parameter\">pos<span class=\"token punctuation\">,</span>\n source<span class=\"token punctuation\">,</span>\n numberOfCharacters <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span>length</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">let</span> linesCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">let</span> lastNewLinePos <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numberOfCharacters<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">10</span> <span class=\"token comment\">/* newline char code */</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     linesCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n     lastNewLinePos <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n\n pos<span class=\"token punctuation\">.</span>offset <span class=\"token operator\">+=</span> numberOfCharacters<span class=\"token punctuation\">;</span>\n pos<span class=\"token punctuation\">.</span>line <span class=\"token operator\">+=</span> linesCount<span class=\"token punctuation\">;</span>\n pos<span class=\"token punctuation\">.</span>column <span class=\"token operator\">=</span>\n   lastNewLinePos <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n     <span class=\"token operator\">?</span> pos<span class=\"token punctuation\">.</span>column <span class=\"token operator\">+</span> numberOfCharacters\n     <span class=\"token operator\">:</span> numberOfCharacters <span class=\"token operator\">-</span> lastNewLinePos<span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">return</span> pos<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<h1 id=\"parsets\" style=\"position:relative;\"><a href=\"#parsets\" aria-label=\"parsets permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>parse.ts</h1>\n<p><span id=\"file-parse\"></span></p>\n<h2 id=\"baseparsecontext-options\" style=\"position:relative;\"><a href=\"#baseparsecontext-options\" aria-label=\"baseparsecontext options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>baseParse(context, options)</h2>\n<p><span id=\"parse-baseparse\"></span></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">baseParse</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> options <span class=\"token comment\">/* ParserOptions */</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">/*RootNode*/</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> <span class=\"token function\">createParserContext</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> <span class=\"token function\">getCursor</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">parseChildren</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> TextModes<span class=\"token punctuation\">.</span><span class=\"token constant\">DATA</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">getSelection</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>baseParse 内部实现基本就是调用其他方法，所以接下来我们得针对它使用的几个方法去逐一实现：</p>\n<ol>\n<li>createParserContext，创建节点解析对象，包含解析过程中需要或需要保存的数据</li>\n<li>getCursor，获取 context 中的 offset, line, column, start, end 等信息</li>\n<li><a href=\"#file-ast-createroot\">createRoot</a>，创建根节点</li>\n<li><a href=\"#parse-parsechildren\">parseChildren</a>，解析子节点</li>\n<li><a href=\"#parse-getselection\">getSelection</a>，获取选中的未解析的内容</li>\n</ol>\n<p><span id=\"pic-baseparse\"></span>baseParse 函数大体结构和代码调用图示：</p>\n<p><img src=\"http://qiniu.ii6g.com/parse-ts-baseparse-0.png?imageMogr2/thumbnail/!100p\"></p>\n<h2 id=\"createparsecontextcontext-options\" style=\"position:relative;\"><a href=\"#createparsecontextcontext-options\" aria-label=\"createparsecontextcontext options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>createParseContext(context, options)</h2>\n<p><span id=\"parse-createparsecontext\"></span></p>\n<p>函数作用：<strong>创建解析器上下文对象(包含解析过程中的一些记录信息)</strong></p>\n<p>函数声明：</p>\n<p><code class=\"language-text\">function createParserContext(context, options) /*ParserContext*/ {}</code></p>\n<p>参数没什么好讲的了，从 baseParse 继承而来，返回的是一个 <a href=\"#td-parser-context\">ParserContext</a> 类型。具体实现其实就是返回一个 ParserContext 类型的对象，里面包含了源码字符串被解析是的一些信息存储，比如：解析时指针的位置 offset，当前行列(line, column)，及其他信息。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">createParserContext</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">content<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n  options<span class=\"token operator\">:</span> ParserOptions</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ParserContext <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 解析器的默认选项给了些默认值，比如：isVoidTag: No, isPreTag: NO， 等等</span>\n      <span class=\"token operator\">...</span>defaultParserOptions<span class=\"token punctuation\">,</span> \n      <span class=\"token operator\">...</span>options\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    column<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    offset<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    originalSource<span class=\"token operator\">:</span> content<span class=\"token punctuation\">,</span>\n    source<span class=\"token operator\">:</span> content<span class=\"token punctuation\">,</span>\n    inPre<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    inVPre<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"\" style=\"position:relative;\"><a href=\"#\" aria-label=\" permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h2 id=\"parsechildrencontext-mode-ancestors\" style=\"position:relative;\"><a href=\"#parsechildrencontext-mode-ancestors\" aria-label=\"parsechildrencontext mode ancestors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>parseChildren(context, mode, ancestors)</h2>\n<p><span id=\"parse-parsechildren\"></span></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">parseChildren</span><span class=\"token punctuation\">(</span>\n  context <span class=\"token comment\">/* ParserContext*/</span><span class=\"token punctuation\">,</span>\n  mode <span class=\"token comment\">/*TextModes*/</span><span class=\"token punctuation\">,</span>\n  ancesotrs <span class=\"token comment\">/*ElementNode[]*/</span>\n<span class=\"token punctuation\">)</span> <span class=\"token comment\">/* TemplateChildNode[] */</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>参数列表：</p>\n<ol>\n<li>context，待解析的模板对象(<a href=\"#td-parser-context\">ParserContext</a>)</li>\n<li>mode，文本模式(<a href=\"#td-vars-textmodes\">TextModes</a>)</li>\n<li>ancestors，祖先元素(<a href=\"#td-ast-elementnode\">ElementNode[]</a>)</li>\n</ol>\n<p>返回结果： <a href=\"#td-ast-tcn\">TemplateChildNode[]</a></p>\n<h3 id=\"阶段一test01-some-text\" style=\"position:relative;\"><a href=\"#%E9%98%B6%E6%AE%B5%E4%B8%80test01-some-text\" aria-label=\"阶段一test01 some text permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>阶段一(<a href=\"test-01-sometext\">test01 some text</a>)</h3>\n<p>实现 <a href=\"#parse-parsetext\">parseText()</a> 之后的 <a href=\"#parse-parsechildren\">parseChildren()</a>代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">parseChildren</span><span class=\"token punctuation\">(</span>\n  context <span class=\"token comment\">/* ParserContext*/</span><span class=\"token punctuation\">,</span>\n  mode <span class=\"token comment\">/*TextModes*/</span><span class=\"token punctuation\">,</span>\n  ancesotrs <span class=\"token comment\">/*ElementNode[]*/</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">const</span> nodes <span class=\"token comment\">/*TemplateChildNode[]*/</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isEnd</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> mode<span class=\"token punctuation\">,</span> ancesotrs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// do sth</span>\n\n    <span class=\"token keyword\">const</span> s <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 由于 baseparse里面传过来的是个 DATA 类型，因此会走到这个 if 里</span>\n    <span class=\"token comment\">// 面去解析</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mode <span class=\"token operator\">===</span> TextModes<span class=\"token punctuation\">.</span><span class=\"token constant\">DATA</span> <span class=\"token operator\">||</span> mode <span class=\"token operator\">===</span> TextModes<span class=\"token punctuation\">.</span><span class=\"token constant\">RCDATA</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 过略掉非文本的</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>context<span class=\"token punctuation\">.</span>inVPre <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>delimiters<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ... 插值处理{{}}</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mode <span class=\"token operator\">===</span> TextModes<span class=\"token punctuation\">.</span><span class=\"token constant\">DATA</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"&lt;\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ... 标签开头 &lt;...</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\">// ... 到这里也就是说文本节点不会被这个 if 处理，而是直接到</span>\n      <span class=\"token comment\">// !node 给 parseText 解析</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      node <span class=\"token operator\">=</span> <span class=\"token function\">parseText</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> node<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">pushNode</span><span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">pushNode</span><span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token string\">\"parse children\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">let</span> removedWhitespace <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> removedWhitespace <span class=\"token operator\">?</span> nodes<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>Boolean<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> nodes<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>最后处理完之后文本节点对象内容如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    delimiters<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'{{'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'}}'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    getNamespace<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token operator\">:</span> getNamespace<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    getTextMode<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token operator\">:</span> getTextMode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    isVoidTag<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    isPreTag<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    isCustomElement<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    decodeEntities<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token operator\">:</span> decodeEntities<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    onError<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 这里发生了变换</span>\n  <span class=\"token comment\">// column: 定位到了字符串最后即 'simple text' 的长度 + 1，即结束位置</span>\n  <span class=\"token comment\">// line: 因为只有一行，所以 line 并未发生改变，如果发生了改变会在 advancedBy 里面进行处理更新</span>\n  <span class=\"token comment\">// offset: 类似文件处理时的指针偏移量，即字符串长度</span>\n  column<span class=\"token operator\">:</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span>\n  line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  offset<span class=\"token operator\">:</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 会发现处理完成之后，originalSource 维持原样</span>\n  originalSource<span class=\"token operator\">:</span> <span class=\"token string\">'simple text'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// source 变成了空字符串，因为处理完了</span>\n  source<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  inPref<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  inVPref<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">// parse children</span></code></pre></div>\n<p>baseParse 之后的 ast 结构：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 这个结构的形成是经过 createRoot 处理之后的结果</span>\n<span class=\"token comment\">// 经过 parseChildren 之后的结果会被存放到 root 的children 中，如下</span>\n<span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n      content<span class=\"token operator\">:</span> <span class=\"token string\">'\\nsimple text 1\\n simple text 2\\n'</span><span class=\"token punctuation\">,</span>\n      loc<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Object<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  loc<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    start<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> column<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    end<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> column<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">30</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    source<span class=\"token operator\">:</span> <span class=\"token string\">'\\nsimple text 1\\n simple text 2\\n'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  helpers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  components<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  directives<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  hoists<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  imports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  cached<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  temps<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  codegenNode<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">//// ast</span>\n\n<span class=\"token comment\">// 第一个 children 结构：</span>\n<span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  content<span class=\"token operator\">:</span> <span class=\"token string\">'\\nsimple text 1\\n simple text 2\\n'</span><span class=\"token punctuation\">,</span>\n  loc<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    start<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> column<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    end<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> column<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">30</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    source<span class=\"token operator\">:</span> <span class=\"token string\">'\\nsimple text 1\\n simple text 2\\n'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">//// ast</span></code></pre></div>\n<p>阶段代码：<a href=\"#link-01\">test-01-some-text 测试用例通过</a></p>\n<p>图示：文本解析</p>\n<p><img src=\"http://qiniu.ii6g.com/parse-ts-parsechildren-text-part.png?imageMogr2/thumbnail/!100p\" alt=\"parseChildren-支持纯文本解析\"></p>\n<h2 id=\"parsecommentcontext\" style=\"position:relative;\"><a href=\"#parsecommentcontext\" aria-label=\"parsecommentcontext permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>parseComment(context)</h2>\n<p><span id=\"parse-parsecomment\"></span></p>\n<p>注释处理函数，解析原则是匹配 <code class=\"language-text\">&lt;!--</code> 开头和 <code class=\"language-text\">--&gt;</code> 结尾，中间部分统统视为注释，中间需要考虑嵌套注释问题。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">parseComment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">/* CommentNode */</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> <span class=\"token function\">getCursor</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> content\n\n  <span class=\"token keyword\">const</span> match <span class=\"token operator\">=</span> <span class=\"token regex\">/--(\\!)?>/</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>match<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 没有闭合注释，后面的所有都会被当做注释处理</span>\n    content <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">advanceBy</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 后面所有的都成为注释</span>\n    <span class=\"token function\">emitError</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ErrorCodes<span class=\"token punctuation\">.</span><span class=\"token constant\">EOF_IN_COMMENT</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">.</span>index <span class=\"token operator\">&lt;=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 空注释也报错</span>\n      <span class=\"token function\">emitError</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ErrorCodes<span class=\"token punctuation\">.</span><span class=\"token constant\">ABRUPT_CLOSING_OF_EMPTY_COMMENT</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 非法结束，比如： &lt;!-xx--!>，正则里面有个 (\\!)? 捕获组</span>\n    <span class=\"token comment\">// match[1] 就是指这个匹配</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">emitError</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ErrorCodes<span class=\"token punctuation\">.</span><span class=\"token constant\">INCORRECTLY_CLOSED_COMMENT</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 取注释内容，match.index 即 /--(\\!)?>/ 正则匹配的开始索引位置</span>\n    content <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> match<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 嵌套注释??? 这里slice 之后的 s 不包含结束 --></span>\n    <span class=\"token keyword\">const</span> s <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> match<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> prevIndex <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      nestedIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> s <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 首先能进入 parseComment，说明 source 是以 &lt;!-- 开头的，且是包含 --> 的</span>\n    <span class=\"token comment\">// 否则前面就会出现异常，因此如果嵌套那可能情况只有&lt;!--x&lt;!--y-->注释中间</span>\n    <span class=\"token comment\">// 出现过 &lt;!--</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nestedIndex <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;!--'</span><span class=\"token punctuation\">,</span> prevIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> nestedIndex<span class=\"token punctuation\">,</span> prevIndex<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> len<span class=\"token operator\">:</span> s<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">advanceBy</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> nestedIndex <span class=\"token operator\">-</span> prevIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">// + 4 值是 `&lt;!--`.length，如果小于 s.length，说明嵌套了注释</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nestedIndex <span class=\"token operator\">+</span> <span class=\"token number\">4</span> <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 非法嵌套, 如：&lt;!--&lt;!--x--></span>\n        <span class=\"token function\">emitError</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ErrorCodes<span class=\"token punctuation\">.</span><span class=\"token constant\">NESTED_COMMENT</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\">/// 然后定位到嵌套的第一个 &lt;!-- 的 ! 索引上，进入下一轮处理，直</span>\n      <span class=\"token comment\">// 到找到最后一个合法的 &lt;!--</span>\n      prevIndex <span class=\"token operator\">=</span> nestedIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 这里应该是没嵌套的情况？？？</span>\n    <span class=\"token function\">advanceBy</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> match<span class=\"token punctuation\">.</span>index <span class=\"token operator\">+</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> prevIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">COMMENT</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token punctuation\">,</span>\n    loc<span class=\"token operator\">:</span> <span class=\"token function\">getSelection</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"parseelementcontext-mode\" style=\"position:relative;\"><a href=\"#parseelementcontext-mode\" aria-label=\"parseelementcontext mode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>parseElement(context, mode)</h2>\n<p><span id=\"parse-parseelement\"></span></p>\n<p>这个解析函数，用来解析 <code class=\"language-text\">&lt;div&gt;</code> 标签。</p>\n<h3 id=\"阶段一test-05\" style=\"position:relative;\"><a href=\"#%E9%98%B6%E6%AE%B5%E4%B8%80test-05\" aria-label=\"阶段一test 05 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>阶段一(<a href=\"#test-text-05\">test-05</a>)</h3>\n<p><a href=\"#test-text-05\">some &#x3C;span>{{ foo &#x3C; bar + foo }} text&#x3C;/span></a></p>\n<p>此阶段只实现对 <code class=\"language-text\">&lt;div&gt;...&lt;/div&gt;</code> 的解析，不包含属性等等其他复杂情况，因为只需要能通过用例5就行。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">parseElement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context<span class=\"token punctuation\">,</span> ancestors</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// assert context.source 是以 &lt;[a-z] 开头的</span>\n\n  <span class=\"token keyword\">const</span> wasInPre <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>inPre\n  <span class=\"token keyword\">const</span> wasInVPre <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>inVPre\n  <span class=\"token comment\">// 取 ancestors 最后一个节点 node</span>\n  <span class=\"token keyword\">const</span> parent <span class=\"token operator\">=</span> <span class=\"token function\">last</span><span class=\"token punctuation\">(</span>ancestors<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token function\">parseTag</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> TagType<span class=\"token punctuation\">.</span>Start<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// pre or v-pre</span>\n  <span class=\"token keyword\">const</span> isPreBoundary <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>inPre <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>wasInVPre\n  <span class=\"token keyword\">const</span> isVPreBoundary <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>inVPre <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>wasInVPre\n\n  <span class=\"token comment\">// 自闭合的到这里就可以结束了</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span>isSelfClosing <span class=\"token operator\">||</span> context<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>isVoidTag<span class=\"token operator\">?.</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> element\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token comment\">// 子元素 children，被漏掉的代码，会进入递归调用 parseChildren 去解析</span>\n\t<span class=\"token comment\">// &lt;span>...&lt;/span> 标签内的模板</span>\n  ancestors<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">const</span> mode <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span><span class=\"token function\">getTextMode</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">const</span> children <span class=\"token operator\">=</span> <span class=\"token function\">parseChildren</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> mode<span class=\"token punctuation\">,</span> ancestors<span class=\"token punctuation\">)</span>\n \n\tancestors<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\telement<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> children\n  <span class=\"token comment\">// P1.... 解析之后 children 里面应该包含两个 node</span>\n  <span class=\"token comment\">// node1: 插值内容 `foo &lt; bar + foo`</span>\n  <span class=\"token comment\">// node2: 文本节点 ` text`</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 结束标签？ &lt;span>&lt;/span> 这种类型？</span>\n  <span class=\"token comment\">// 上面会解析标签内的模板，解析完之后 source 正常应该会是 `&lt;/span> ....`</span>\n  <span class=\"token comment\">// 进入 if 解析结束标签</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">startsWithEndTagOpen</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">parseTag</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> TagType<span class=\"token punctuation\">.</span>End<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 会进入到这里出现报错</span>\n    <span class=\"token function\">emitError</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ErrorCodes<span class=\"token punctuation\">.</span><span class=\"token constant\">X_MISSING_END_TAG</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> element<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'script'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> first <span class=\"token operator\">=</span> children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>first <span class=\"token operator\">&amp;&amp;</span> first<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;!--'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">emitError</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ErrorCodes<span class=\"token punctuation\">.</span><span class=\"token constant\">EOF_IN_SCRIPT_HTML_COMMENT_LIKE_TEXT</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  element<span class=\"token punctuation\">.</span>loc <span class=\"token operator\">=</span> <span class=\"token function\">getSelection</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> <span class=\"token string\">'after'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isPreBoundary<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    context<span class=\"token punctuation\">.</span>inPre <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isVPreBoundary<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    context<span class=\"token punctuation\">.</span>inVPre <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> element\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>实现到这里是为了想看下经过 <a href=\"#parse-parsetag\">parseTag</a> 之后的 element 是什么？parseTag 里面有个正则是用来匹配开始或结束标签的，即： <code class=\"language-text\">/^&lt;\\/?([a-z][^\\t\\r\\n\\f /&gt;]*)/i</code> 这个既可以匹配开始标签，也可以匹配结束标签，并且考虑了 <code class=\"language-text\">&lt;div   &gt;</code> 有空格的情况，忽略大小写。</p>\n<p>正则匹配测试结果：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">/^&lt;\\/?([a-z][^\\t\\r\\n\\f /&gt;]*)/i.exec(&#39;&lt;span&gt;&#39;)\n(2) [&quot;&lt;span&quot;, &quot;span&quot;, index: 0, input: &quot;&lt;span&gt;&quot;, groups: undefined]</code></pre></div>\n<p>所以这里首先匹配解析的是开始标签 <code class=\"language-text\">&lt;div&gt;</code> 。</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// some &lt;span>{{ foo &lt; bar + foo }} text&lt;/span></span>\n<span class=\"token comment\">// parseTag 之后的 element</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 节点类型是 NodeTypes.ELEMENT</span>\n    <span class=\"token property\">\"ns\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 命名空间就是 HTML</span>\n    <span class=\"token property\">\"tag\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"span\"</span><span class=\"token punctuation\">,</span> \n    <span class=\"token property\">\"tagType\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 标签类型 ElementTypes.ELEMENT</span>\n    <span class=\"token property\">\"props\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span> <span class=\"token comment\">// 标签属性，这里没有</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"isSelfClosing\"</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 是不是自闭合标签，如：&lt;img/></span>\n    <span class=\"token property\">\"children\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"loc\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"column\"</span><span class=\"token operator\">:</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// column 不换行的情况下为 offset + 1，从 1 开始计数</span>\n            <span class=\"token property\">\"line\"</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 没换行符</span>\n            <span class=\"token property\">\"offset\"</span><span class=\"token operator\">:</span><span class=\"token number\">5</span> <span class=\"token comment\">// &lt;span> 的 &lt; 开始位置索引 `some `.length = 5</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"end\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"column\"</span><span class=\"token operator\">:</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"line\"</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n          \t<span class=\"token comment\">// 这里值的变化分两步</span>\n          \t<span class=\"token comment\">// parseTag:start 的时候</span>\n\t\t\t\t\t\t<span class=\"token comment\">// 1. 解析出 &lt;span ，这个时候 offset 其实是 10</span>\n\t\t\t\t\t\t<span class=\"token comment\">// 2. 检测是不是自闭合标签，决定 advancedBy </span>\n            <span class=\"token comment\">// 移动指针位置数(自闭合：2，非自闭合：1)，到这里 offset = 11</span>\n            <span class=\"token property\">\"offset\"</span><span class=\"token operator\">:</span><span class=\"token number\">11</span> \n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"source\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"&lt;span>\"</span> <span class=\"token comment\">// 为什么不是 `&lt;span>` ??? 漏了自闭合标签检测指针移位</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>解析之后 context 内容变化：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"options\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 忽略选项，目前对我们没啥用</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"column\"</span><span class=\"token operator\">:</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"line\"</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"offset\"</span><span class=\"token operator\">:</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// &lt;span> 后面的 > 索引</span>\n    <span class=\"token property\">\"originalSource\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"some &lt;span>{{ foo &lt; bar + foo }} text&lt;/span>\"</span><span class=\"token punctuation\">,</span>\n  \t<span class=\"token comment\">// 解析之后的模板，为何 > 没被去掉???，见 问题1</span>\n    <span class=\"token property\">\"source\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"{{ foo &lt; bar + foo }} text&lt;/span>\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"inPref\"</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"inVPref\"</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>到此我们已经解析除了 <code class=\"language-text\">&lt;span&gt;</code> 开始标签，这个时候的 <code class=\"language-text\">node.childrens = []</code>，下一步解析标签里面的内容。</p>\n<p>在实现完整的 parseElement 之后发现执行会报错，因为这个用例并不是 <code class=\"language-text\">&lt;span&gt;&lt;/span&gt;</code> 标签内没东西，所以会进入 else 触发 <code class=\"language-text\">emitError()</code>，那不是没法往下走了？？？</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 子元素 children，被漏掉的代码，会进入递归调用 parseChildren 去解析</span>\n<span class=\"token comment\">// &lt;span>...&lt;/span> 标签内的模板</span>\nancestors<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> mode <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span><span class=\"token function\">getTextMode</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> children <span class=\"token operator\">=</span> <span class=\"token function\">parseChildren</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> mode<span class=\"token punctuation\">,</span> ancestors<span class=\"token punctuation\">)</span>\nancestors<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nelement<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> children\n<span class=\"token comment\">// ...........☝🏻.☝🏻.☝🏻.☝🏻.☝🏻，加回去</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">startsWithEndTagOpen</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">parseTag</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> TagType<span class=\"token punctuation\">.</span>End<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">emitError</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ErrorCodes<span class=\"token punctuation\">.</span><span class=\"token constant\">X_MISSING_END_TAG</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> element<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'script'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> first <span class=\"token operator\">=</span> children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>first <span class=\"token operator\">&amp;&amp;</span> first<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;!--'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">emitError</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ErrorCodes<span class=\"token punctuation\">.</span><span class=\"token constant\">EOF_IN_SCRIPT_HTML_COMMENT_LIKE_TEXT</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>那是因为前面漏了一段代码。</p>\n<p>代码加上之后最后代码 P1 出的输出 ancestors 里面会有一个子节点(element)：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// ancestors[{...}]，ancestors 第一个节点是 &lt;span> 这个节点</span>\n<span class=\"token comment\">// 重点我们要看的是这个节点的 children 因为其内部有 `{{ foo &lt; bar + foo }} text`</span>\n<span class=\"token comment\">// 所以它 的 element 应该有两个节点：`foo &lt; bar + foo` 和 ` text`</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// &lt;span> 节点本身的属性，我们重点需要关注的是 children</span>\n    <span class=\"token property\">\"children\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 第一个 child 是 {{ ... }} 检测到插值进入 parseInterpolation 分支</span>\n          <span class=\"token comment\">// 处理，得到下面的节点结构，插值解析在 parseInterpolation 一章有分析过了</span>\n            <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"content\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n                <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n                <span class=\"token property\">\"isStatic\"</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n                <span class=\"token property\">\"isConstant\"</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n                <span class=\"token property\">\"content\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"foo &lt; bar + foo\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token property\">\"loc\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n                    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n                        <span class=\"token property\">\"column\"</span><span class=\"token operator\">:</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token property\">\"line\"</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token property\">\"offset\"</span><span class=\"token operator\">:</span><span class=\"token number\">14</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"end\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n                        <span class=\"token property\">\"column\"</span><span class=\"token operator\">:</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token property\">\"line\"</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token property\">\"offset\"</span><span class=\"token operator\">:</span><span class=\"token number\">29</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"source\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"foo &lt; bar + foo\"</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"loc\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n                <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n                    <span class=\"token property\">\"column\"</span><span class=\"token operator\">:</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"line\"</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"offset\"</span><span class=\"token operator\">:</span><span class=\"token number\">11</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token property\">\"end\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n                    <span class=\"token property\">\"column\"</span><span class=\"token operator\">:</span><span class=\"token number\">33</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"line\"</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"offset\"</span><span class=\"token operator\">:</span><span class=\"token number\">32</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token property\">\"source\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"{{ foo &lt; bar + foo }}\"</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"content\"</span><span class=\"token operator\">:</span><span class=\"token string\">\" text\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"loc\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n                <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n                    <span class=\"token property\">\"column\"</span><span class=\"token operator\">:</span><span class=\"token number\">33</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"line\"</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"offset\"</span><span class=\"token operator\">:</span><span class=\"token number\">32</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token property\">\"end\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n                    <span class=\"token property\">\"column\"</span><span class=\"token operator\">:</span><span class=\"token number\">38</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"line\"</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"offset\"</span><span class=\"token operator\">:</span><span class=\"token number\">37</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token property\">\"source\"</span><span class=\"token operator\">:</span><span class=\"token string\">\" text\"</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// &lt;span> 本身节点的 loc</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里也没什么好解释的，插值在 <a href=\"#parse-parseinterpolation\">parseInterpolation</a> 处分析过了，文本解析在 <a href=\"#parse-parsetext\">parseText</a> 处分析了。</p>\n<h2 id=\"parseinterpolationcontext-mode\" style=\"position:relative;\"><a href=\"#parseinterpolationcontext-mode\" aria-label=\"parseinterpolationcontext mode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>parseInterpolation(context, mode)</h2>\n<p><span id=\"parse-parseinterpolation\"></span></p>\n<p>函数声明：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">parseInterpolation</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">context<span class=\"token operator\">:</span> ParserContext<span class=\"token punctuation\">,</span>\n  mode<span class=\"token operator\">:</span> TextModes</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> InterpolationNode <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>context</strong>: 将被解析的上下文，此时这里的 source 应该是以差值 (<code class=\"language-text\">{{</code>)开始的字符串。</p>\n<p><strong>mode</strong>: 文本模式。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">parseInterpolation</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context<span class=\"token punctuation\">,</span> mode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 找出插值模板的开始和结束符号，默认是 {{ 和 }}</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>open<span class=\"token punctuation\">,</span> close<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>delimiters<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> closeIndex <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>close<span class=\"token punctuation\">,</span> open<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>closeIndex <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">emitError</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ErrorCodes<span class=\"token punctuation\">.</span><span class=\"token constant\">X_MISSING_INTERPOLATION_END</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> <span class=\"token function\">getCursor</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">advanceBy</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> open<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 下面是从 {{ 之后的字符串开始解析</span>\n  <span class=\"token keyword\">const</span> innerStart <span class=\"token operator\">=</span> <span class=\"token function\">getCursor</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    innerEnd <span class=\"token operator\">=</span> <span class=\"token function\">getCursor</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 插值里面的字符串长度</span>\n    rawContentLength <span class=\"token operator\">=</span> closeIndex <span class=\"token operator\">-</span> open<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 插值里面的字符串内容</span>\n    rawContent <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> rawContentLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    preTrimContent <span class=\"token operator\">=</span> <span class=\"token function\">parseTextData</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> rawContentLength<span class=\"token punctuation\">,</span> mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    content <span class=\"token operator\">=</span> preTrimContent<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    startOffset <span class=\"token operator\">=</span> preTrimContent<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>startOffset <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">advancePositionWithMutation</span><span class=\"token punctuation\">(</span>innerStart<span class=\"token punctuation\">,</span> rawContent<span class=\"token punctuation\">,</span> startOffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// {{ foo + bar }} -></span>\n  <span class=\"token comment\">// res = (' foo + bar '.length - 'foo + bar'.length - ' '.length)</span>\n  <span class=\"token comment\">// 插值里面字符串的长度 - 去掉空格后的长度 - 起始空格的长度，得到的</span>\n  <span class=\"token comment\">// 就是结束位置的 offset</span>\n  <span class=\"token keyword\">const</span> endOffset <span class=\"token operator\">=</span>\n    rawContentLength <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>preTrimContent<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> content<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> startOffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">advancePositionWithMutation</span><span class=\"token punctuation\">(</span>innerEnd<span class=\"token punctuation\">,</span> rawContent<span class=\"token punctuation\">,</span> endOffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 定位到 }} 位置</span>\n  <span class=\"token function\">advanceBy</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> close<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>innerEnd<span class=\"token punctuation\">,</span> innerStart<span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">INTERPOLATION</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">SIMPLE_EXPRESSION</span><span class=\"token punctuation\">,</span>\n      isStatic<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      isConstant<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      content<span class=\"token punctuation\">,</span>\n      loc<span class=\"token operator\">:</span> <span class=\"token function\">getSelection</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> innerStart<span class=\"token punctuation\">,</span> innerEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    loc<span class=\"token operator\">:</span> <span class=\"token function\">getSelection</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"http://qiniu.ii6g.com/1595570127.png?imageMogr2/thumbnail/!100p\"></p>\n<p>图中我们看到在经过解析之后 innerStart 和 innerEnd 都数据都正确定位到了相应位置，innerStart 是解析后插值字符串的开始位置(第一个 <code class=\"language-text\">{</code> offset = 8(<font color=\"purple\">‘some {{ ‘的长度</font>))，innerEnd是解析后插值字符串的结束位置(最后一个 <code class=\"language-text\">}</code> offset = 17(<font color=\"purple\">‘some {{ foo + bar ‘的长度))</font>。</p>\n<p><img src=\"http://qiniu.ii6g.com/parse-ts-parseinterpolation.png?imageMogr2/thumbnail/!100p\"></p>\n<p>解析之后得到的 <code class=\"language-text\">ast.children</code> 将会有三个节点：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">(<span class=\"token number\">3</span>) <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>…<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>…<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>…<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> content<span class=\"token operator\">:</span> <span class=\"token string\">\"some \"</span><span class=\"token punctuation\">,</span> loc<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>…<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 左侧文本</span>\n<span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> content<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>…<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> loc<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>…<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 插值部分</span>\n<span class=\"token number\">2</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> content<span class=\"token operator\">:</span> <span class=\"token string\">\" text\"</span><span class=\"token punctuation\">,</span> loc<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>…<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 右侧文本</span>\nlength<span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n__proto__<span class=\"token operator\">:</span> Array(<span class=\"token number\">0</span>)</code></pre></div>\n<p>解析回顾(分别解析出了三个节点对象)：</p>\n<ol>\n<li>\n<p><code class=\"language-text\">0: {type: 2, content: &quot;some &quot;, loc: {…}}</code>\n详细结构<span id=\"x-1\"></span>：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token number\">0</span><span class=\"token operator\">:</span>\n content<span class=\"token operator\">:</span> <span class=\"token string\">\"some \"</span> <span class=\"token comment\">// 解析出的文本内容</span>\n loc<span class=\"token operator\">:</span> <span class=\"token comment\">// 位置信息</span>\n \tend<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>column<span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 该节点在模板中的位置信息</span>\n \tsource<span class=\"token operator\">:</span> <span class=\"token string\">\"some \"</span> <span class=\"token comment\">// 文本源内容</span>\n \tstart<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>column<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 该节点在模板中的结束信息</span>\n __proto__<span class=\"token operator\">:</span> Object\n\ttype<span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token comment\">// 节点类型</span>\n\t__proto__<span class=\"token operator\">:</span> Object</code></pre></div>\n<p>那么是如何得到上面的结果的呢？？？那得从 <a href=\"#parse-parsechildren\">parseChildren</a> 说起了，模板：</p>\n<p>--->> “some {{ foo + bar }} text”</p>\n<p><code class=\"language-text\">(!context.inVPre &amp;&amp; s.startsWith(context.options.delimiters[0]))</code> <font color=\"red\">检测失败</font></p>\n<p><code class=\"language-text\">mode === TextModes.DATA &amp;&amp; s[0] === &quot;&lt;&quot;</code> <font color=\"red\">检测失败</font></p>\n<p>即一开始并不会进入插值和标签解析代码，而是直接进入 <a href=\"#parse-parsetext\">parseText(context, mode)</a> 中解析文本，解析时候直到遇到 <code class=\"language-text\">{{</code> 之前都一直会当做文本解析，而之前的文本中又不包含 <code class=\"language-text\">decodeMap</code> 中的字符，因此知道遇到 <code class=\"language-text\">{</code> 之前会一直执行 while 里面的：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n node <span class=\"token operator\">=</span> <span class=\"token function\">parseText</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> node<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">pushNode</span><span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n <span class=\"token function\">pushNode</span><span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这段代码，而由于 “some ” 都是普通字符，每个字符串会对应一个 node ，然后又都是普通文本节点，会经过 <a href=\"#parse-pushnode\">pushNode(nodes, node[i])</a> 处理掉，进行合并最后成为上面的一个完整的 “some ” 对应<a href=\"#x-1\">文本节点结构</a>。</p>\n</li>\n<li>\n<p><code class=\"language-text\">1: {type: 5, content: {…}, loc: {…}}</code></p>\n<p>节点结构<span id=\"x-2\"></span>：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token number\">1</span><span class=\"token operator\">:</span>\n content<span class=\"token operator\">:</span> <span class=\"token comment\">// 这里的数据是经过插值解析之后的模板对象</span>\n   content<span class=\"token operator\">:</span> <span class=\"token string\">\"foo + bar\"</span> <span class=\"token comment\">// trim 之后的插值字符串，没有 }} ???</span>\n   isConstant<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// 非常量类型</span>\n   isStatic<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// 非静态节点</span>\n   loc<span class=\"token operator\">:</span>  <span class=\"token comment\">// 解析之后的该节点在整个模板中的位置信息</span>\n\t\t\t<span class=\"token comment\">// 17 -> r 所在的位置</span>\n     end<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>column<span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">17</span><span class=\"token punctuation\">}</span>\n     source<span class=\"token operator\">:</span> <span class=\"token string\">\"foo + bar\"</span>\n\t\t\t<span class=\"token comment\">// 8 -> f 所在的位置，即 start -> end => 'f &lt;-> r'</span>\n     start<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>column<span class=\"token operator\">:</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">}</span>\n   __proto__<span class=\"token operator\">:</span> Object\n   type<span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token comment\">// 插值表达式类型</span>\n   __proto__<span class=\"token operator\">:</span> Object\n\tloc<span class=\"token operator\">:</span> <span class=\"token comment\">// 这里是没经过去尾部空格的位置信息</span>\n\t\t<span class=\"token comment\">// 20 -> 'some {{ foo + bar ' 最后一个空格位置</span>\n   end<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>column<span class=\"token operator\">:</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">}</span> \n   source<span class=\"token operator\">:</span> <span class=\"token string\">\"{{ foo + bar }}\"</span>\n\t\t<span class=\"token comment\">// 5 -> 'some ' 第一个 { 位置</span>\n   start<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>column<span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span> \n   __proto__<span class=\"token operator\">:</span> Object\n type<span class=\"token operator\">:</span> <span class=\"token number\">5</span> <span class=\"token comment\">// 插值类型</span>\n __proto__<span class=\"token operator\">:</span> Object</code></pre></div>\n<p>​\t如上所注释的，第一级的 loc 是通过解析 ”{{ foo + bar}}” 在整个模板中的位置信息，content 里面包含的是插值内部的信息，即真正的表达式结构信息。</p>\n</li>\n<li>\n<p><code class=\"language-text\">{type: 2, content: &quot; text&quot;, loc: {…}}</code>\n和第一步中一样，只会经过 parseText(context, mode) 解析出纯文本内容：” text”，最后的结构：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n type<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n content<span class=\"token operator\">:</span> <span class=\"token string\">\" text\"</span><span class=\"token punctuation\">,</span>\n loc<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// 从 text 前面的空格开始记录，</span><span class=\"token string\">\"some {{ foo + bar }}\"</span> 长度为 <span class=\"token number\">20</span>\n   start<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> column<span class=\"token operator\">:</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   source<span class=\"token operator\">:</span> <span class=\"token string\">\" text\"</span><span class=\"token punctuation\">,</span>\n   end<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> column<span class=\"token operator\">:</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<p>三步分析完之后，到现在我们应该具备脱离代码就可以直接根据模板得到解析后对应的 children 结构。分析的重点是要得到一个 <code class=\"language-text\">{ type, content, loc: { start, source, end }}</code> 结构的对象。</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// start/end: </span>\n<span class=\"token punctuation\">{</span> \n  column<span class=\"token comment\">/*该节点起始结束的列，从1开始计数的值*/</span><span class=\"token punctuation\">,</span> \n  line<span class=\"token comment\">/*该节点模板所在的行，从1开始计数的值*/</span><span class=\"token punctuation\">,</span> \n  offset<span class=\"token comment\">/*该节点起始结束的索引，从0开始计数的值*/</span> \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><font color=\"blue\">PS: 对于 foo 和 bar 变量数据解析执行结果这块暂时不讨论，也不知道如何做到的，现阶段只关心模板的解析。</font></p>\n<h2 id=\"parsetagcontext-type-parent\" style=\"position:relative;\"><a href=\"#parsetagcontext-type-parent\" aria-label=\"parsetagcontext type parent permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>parseTag(context, type, parent)</h2>\n<p><span id=\"parse-parsetag\"></span></p>\n<h3 id=\"阶段一simple-textdiv\" style=\"position:relative;\"><a href=\"#%E9%98%B6%E6%AE%B5%E4%B8%80simple-textdiv\" aria-label=\"阶段一simple textdiv permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>阶段一(<a href=\"#test-text-02\">simple text&#x3C;/div></a>)</h3>\n<p><span id=\"parse-parsetag-01\"></span></p>\n<ol>\n<li>为什么只匹配 <code class=\"language-text\">&lt;/div</code> 而忽略掉最后一个 <code class=\"language-text\">&gt;</code>???</li>\n</ol>\n<p>参数: </p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">parseTag</span><span class=\"token punctuation\">(</span>\n  context<span class=\"token operator\">:</span> ParserContext<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 要继续解析的模板对象 simple text&lt;/div> 里面的 &lt;/div> </span>\n  <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> TagType<span class=\"token punctuation\">,</span> <span class=\"token comment\">// Start(&lt;div>), End(&lt;/div>)开始结束标签</span>\n  parent<span class=\"token operator\">:</span> ElementNode <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token comment\">// 该标签的父级</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ElementNode</code></pre></div>\n<p>具体实现：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">parseTag</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> parent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 获取当前解析的起始位置，此时值应该是 simple text 的长度</span>\n  <span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> <span class=\"token function\">getCursor</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 匹配 &lt;/div 过滤掉空格字符，但是为什么要把 > 给忽略掉???</span>\n  <span class=\"token keyword\">const</span> match <span class=\"token operator\">=</span> <span class=\"token regex\">/^&lt;\\/?([a-z][^\\t\\r\\n\\f />]*)/i</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> tag <span class=\"token operator\">=</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> ns <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span><span class=\"token function\">getNamespace</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 改变位移，将 offset 定位到 &lt;/div> 的最有一个 > 上</span>\n  <span class=\"token function\">advanceBy</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 过滤掉空格</span>\n  <span class=\"token function\">advanceSpaces</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> cursor <span class=\"token operator\">=</span> <span class=\"token function\">getCursor</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> currSource <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"阶段二test-text-05\" style=\"position:relative;\"><a href=\"#%E9%98%B6%E6%AE%B5%E4%BA%8Ctest-text-05\" aria-label=\"阶段二test text 05 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>阶段二(<a href=\"#test-text-05\">test-text-05</a>)</h3>\n<p><span id=\"parse-parsetag-02\"></span></p>\n<p>满足用例 5(<code class=\"language-text\">some &lt;span&gt;{{ foo &lt; bar + foo }} text&lt;/span&gt;</code>) 的代码实现，这里只需要能解析 <code class=\"language-text\">&lt;span&gt; ... &lt;/span&gt;</code> 标签就可以，没有 <code class=\"language-text\">pre</code>,<code class=\"language-text\">v-pre</code>,<code class=\"language-text\">&lt;span/&gt;自闭合标签</code>，因此下面省略这几部分检测代码。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">parseTag</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> parent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 获取当前解析的起始位置，此时值应该是 some text 的长度</span>\n  <span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> <span class=\"token function\">getCursor</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 匹配 &lt;/div 过滤掉空格字符，但是为什么要把 > 给忽略掉???</span>\n  <span class=\"token keyword\">const</span> match <span class=\"token operator\">=</span> <span class=\"token regex\">/^&lt;\\/?([a-z][^\\t\\r\\n\\f />]*)/i</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> tag <span class=\"token operator\">=</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> ns <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span><span class=\"token function\">getNamespace</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// log1: 改变位移，将 offset 定位到 &lt;/div> 的最有一个 > 上</span>\n  <span class=\"token comment\">// 在这里 context.offset = 10, context.line = 1</span>\n  <span class=\"token function\">advanceBy</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 过滤掉空格</span>\n  <span class=\"token function\">advanceSpaces</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// log2: 经过 advance之后 context.offset = 15, context.line = 1</span>\n  <span class=\"token comment\">// 正好过滤 &lt;/div 5个字符</span>\n  <span class=\"token keyword\">const</span> cursor <span class=\"token operator\">=</span> <span class=\"token function\">getCursor</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> currSource <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>source\n\n  <span class=\"token comment\">// TODO-1 解析标签元素的属性</span>\n\n  <span class=\"token comment\">// TODO-2 in pre ...</span>\n\n  <span class=\"token comment\">// TODO-3 v-pre 指令</span>\n\n  <span class=\"token comment\">// TODO-3 &lt;div/> 自闭标签</span>\n  <span class=\"token comment\">// 这里要实现，不然最后解析完成之后 source 会是：>...&lt;/span></span>\n  <span class=\"token comment\">// 需要检测下是不是自闭合标签来移动指针位置</span>\n  <span class=\"token keyword\">let</span> isSelfClosing <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">emitError</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ErrorCodes<span class=\"token punctuation\">.</span><span class=\"token constant\">EOF_IN_TAG</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// some &lt;div> ... &lt;/div> 到这里的 source = > ... &lt;/div></span>\n    <span class=\"token comment\">// 所以可以检测是不是以 /> 开头的</span>\n    isSelfClosing <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/>'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> TagType<span class=\"token punctuation\">.</span>End <span class=\"token operator\">&amp;&amp;</span> isSelfClosing<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">emitError</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ErrorCodes<span class=\"token punctuation\">.</span><span class=\"token constant\">END_TAG_WITH_TRAILING_SOLIDUS</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 如果是自闭合指针移动两位(/>)，否则只移动一位(>)</span>\n    <span class=\"token comment\">// 到这里 source = ... &lt;/div></span>\n    <span class=\"token function\">advanceBy</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> isSelfClosing <span class=\"token operator\">?</span> <span class=\"token number\">2</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">let</span> tagType <span class=\"token operator\">=</span> ElementTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">ELEMENT</span>\n  <span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>options\n  <span class=\"token comment\">// 不是 v-pre，且不是自定义组件，这个 if 目的是为了检测并改变</span>\n  <span class=\"token comment\">// tagType 标签类型</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>context<span class=\"token punctuation\">.</span>inVPre <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>options<span class=\"token punctuation\">.</span><span class=\"token function\">isCustomElement</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// TODO-4 检测 tagType</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">ELEMENT</span><span class=\"token punctuation\">,</span>\n    ns<span class=\"token punctuation\">,</span>\n    tag<span class=\"token punctuation\">,</span>\n    tagType<span class=\"token punctuation\">,</span>\n    props<span class=\"token punctuation\">,</span>\n    isSelfClosing<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// TODO</span>\n    children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    loc<span class=\"token operator\">:</span> <span class=\"token function\">getSelection</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    codegenNode<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>要能通过<a href=\"#test-text-05\">用例5</a> 必须搭配 <a href=\"#parse-parseelement\">parseElement(context, ancestors) </a> 才行，并且重点在 parseElement 中，因为有了开始标签才会有结束标签的解析，不然会触发结束标签解析分支里面的 error: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token regex\">/[a-z]/i</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 这里都出错了，为啥后面还有个 parseTag ???</span>\n  <span class=\"token function\">emitError</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ErrorCodes<span class=\"token punctuation\">.</span><span class=\"token constant\">X_INVALID_END_TAG</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">parseTag</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> TagType<span class=\"token punctuation\">.</span>End<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">continue</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>因此如果这里不会触发 X<em>INVALID</em>END_TAG 那必定是 parseElement 里面做了什么处理，这个实现了 parseElement 才得以知晓(目前只是猜测~~~)，<a href=\"#parse-parseelement\">传送门 🚪>>></a></p>\n<h3 id=\"阶段三test-element-03\" style=\"position:relative;\"><a href=\"#%E9%98%B6%E6%AE%B5%E4%B8%89test-element-03\" aria-label=\"阶段三test element 03 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>阶段三(<a href=\"#test-element-03\">test-element-03</a>)</h3>\n<p><span id=\"parse-parsetag-03\"></span></p>\n<p>支持自闭标签解析，实现了阶段二之后，这里其实很简单，在上一阶段中的实现在 parseTag 中返回的时候 <code class=\"language-text\">isSelfClosing</code> 写死成了 <code class=\"language-text\">false</code> ，要支持这个用例，只要将它的值赋值为实际的 <code class=\"language-text\">isSelfClosing</code> 就可以了。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">parseTag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">let</span> isSelfClosing <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">emitError</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ErrorCodes<span class=\"token punctuation\">.</span><span class=\"token constant\">EOF_IN_TAG</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// some &lt;div> ... &lt;/div> 到这里的 source = > ... &lt;/div></span>\n    <span class=\"token comment\">// 所以可以检测是不是以 /> 开头的</span>\n    isSelfClosing <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/>'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> TagType<span class=\"token punctuation\">.</span>End <span class=\"token operator\">&amp;&amp;</span> isSelfClosing<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">emitError</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ErrorCodes<span class=\"token punctuation\">.</span><span class=\"token constant\">END_TAG_WITH_TRAILING_SOLIDUS</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 如果是自闭合指针移动两位(/>)，否则只移动一位(>)</span>\n    <span class=\"token comment\">// 到这里 source = ... &lt;/div></span>\n    <span class=\"token function\">advanceBy</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> isSelfClosing <span class=\"token operator\">?</span> <span class=\"token number\">2</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"阶段四支持template--v-if\" style=\"position:relative;\"><a href=\"#%E9%98%B6%E6%AE%B5%E5%9B%9B%E6%94%AF%E6%8C%81template--v-if\" aria-label=\"阶段四支持template  v if permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>阶段四(支持template + v-if)</h3>\n<p><span id=\"parse-parsetag-04\"></span></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">parseTag</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> parent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 获取当前解析的起始位置，此时值应该是 some text 的长度</span>\n  <span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> <span class=\"token function\">getCursor</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 匹配 &lt;div 或 &lt;/div 过滤掉空格字符，但是为什么要把 > 给忽略掉???</span>\n  <span class=\"token comment\">// 其实不是忽略掉 > 而是因为如果是 &lt;div 开头，那么后面有可能是 &lt; 或</span>\n  <span class=\"token comment\">// /> 后面需要处理闭合和非闭合问题</span>\n  <span class=\"token keyword\">const</span> match <span class=\"token operator\">=</span> <span class=\"token regex\">/^&lt;\\/?([a-z][^\\t\\r\\n\\f />]*)/i</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> tag <span class=\"token operator\">=</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> ns <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span><span class=\"token function\">getNamespace</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// log1: 改变位移，将 offset 定位到 &lt;/div> 的最有一个 > 上</span>\n  <span class=\"token comment\">// 在这里 context.offset = 10, context.line = 1</span>\n  <span class=\"token function\">advanceBy</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 过滤掉空格</span>\n  <span class=\"token function\">advanceSpaces</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// log2: 经过 advance之后 context.offset = 15, context.line = 1</span>\n  <span class=\"token comment\">// 正好过滤 &lt;/div 5个字符</span>\n  <span class=\"token keyword\">const</span> cursor <span class=\"token operator\">=</span> <span class=\"token function\">getCursor</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> currSource <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>source\n\n  <span class=\"token comment\">// 解析标签元素的属性</span>\n  <span class=\"token keyword\">let</span> props <span class=\"token operator\">=</span> <span class=\"token function\">parseAttributes</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// TODO-2 in pre ...</span>\n\n  <span class=\"token comment\">// TODO-3 v-pre 指令</span>\n\n <span class=\"token comment\">// ....</span>\n\n  <span class=\"token keyword\">let</span> tagType <span class=\"token operator\">=</span> ElementTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">ELEMENT</span>\n  <span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>options\n  <span class=\"token comment\">// 不是 v-pre，且不是自定义组件，这个 if 目的是为了检测并改变</span>\n  <span class=\"token comment\">// tagType 标签类型</span>\n  <span class=\"token comment\">// TODO-4 检测 tagType</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>context<span class=\"token punctuation\">.</span>inVPre <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>options<span class=\"token punctuation\">.</span><span class=\"token function\">isCustomElement</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 是否有 is 指令？</span>\n    <span class=\"token keyword\">const</span> hasVIs <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> p<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">DIRECTIVE</span> <span class=\"token operator\">&amp;&amp;</span> p<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'is'</span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>isNativeTag <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>hasVIs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 没有 is 指令，且不是原生标签，那就是自定义的组件了</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>options<span class=\"token punctuation\">.</span><span class=\"token function\">isNativeTag</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> tagType <span class=\"token operator\">=</span> ElementTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">COMPONENT</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n      hasVIs <span class=\"token operator\">||</span>\n      <span class=\"token function\">isCoreComponent</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n      options<span class=\"token punctuation\">.</span>isBuiltInComponent<span class=\"token operator\">?.</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n      <span class=\"token regex\">/^[A-Z]/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n      tag <span class=\"token operator\">===</span> <span class=\"token string\">'component'</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 有 is 指令 || vue 核心组件(keep-alive...) || 内置组件</span>\n      <span class=\"token comment\">// || 标签名大写开头</span>\n      tagType <span class=\"token operator\">===</span> ElementTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">COMPONENT</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tag <span class=\"token operator\">===</span> <span class=\"token string\">'slot'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      tagType <span class=\"token operator\">===</span> ElementTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">SLOT</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n      tag <span class=\"token operator\">===</span> <span class=\"token string\">'template'</span> <span class=\"token operator\">&amp;&amp;</span>\n      props<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n          p<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">DIRECTIVE</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isSpecialTemplateDirective</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 是模板的前提是有指令，并且是特殊的模板指令</span>\n      tagType <span class=\"token operator\">=</span> ElementTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">TEMPLATE</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> val <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">ELEMENT</span><span class=\"token punctuation\">,</span>\n    ns<span class=\"token punctuation\">,</span>\n    tag<span class=\"token punctuation\">,</span>\n    tagType<span class=\"token punctuation\">,</span>\n    props<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// TODO</span>\n    isSelfClosing<span class=\"token punctuation\">,</span>\n    children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    loc<span class=\"token operator\">:</span> <span class=\"token function\">getSelection</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    codegenNode<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> val\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里的实现涉及到几个新的函数：</p>\n<ol>\n<li><code class=\"language-text\">options.isCustomElement(tag)</code> 默认在 options 里面是 <code class=\"language-text\">NO</code></li>\n<li><code class=\"language-text\">options.isNativeTag(tag)</code> 作为可选 <code class=\"language-text\">OptionalOptions</code> 选项类型，并没默认值</li>\n<li>\n<p><code class=\"language-text\">isCoreComponent(tag)</code> vue 内部作为核心组件的标签</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span> <span class=\"token comment\">// 主要就这四个</span>\n Teleport<span class=\"token operator\">:</span> TELEPORT<span class=\"token punctuation\">,</span>\n Suspense<span class=\"token operator\">:</span> SUSPENSE<span class=\"token punctuation\">,</span>\n KeepAlive<span class=\"token operator\">:</span> KEEP_ALIVE<span class=\"token punctuation\">,</span>\n BaseTransition<span class=\"token operator\">:</span> BASE_TRANSITION\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li><code class=\"language-text\">options.isBuiltInComponent?.(tag)</code>  和 <code class=\"language-text\">isNativeTag</code> 一样作为可选选项，无默认值</li>\n<li>\n<p><code class=\"language-text\">isSpecialTemplateDirective(p.name)</code> 特殊的模板指令</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> isSpecialTemplateDirective <span class=\"token operator\">=</span> <span class=\"token comment\">/*#__PURE__*/</span> <span class=\"token function\">makeMap</span><span class=\"token punctuation\">(</span>\n <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">if,else,else-if,for,slot</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ol>\n<p>从上面的代码可以看出，如果要被定义为是 <code class=\"language-text\">&lt;template&gt;</code> 类型必须包含 <code class=\"language-text\">if,else,else-if,for,slot</code> 这其中的任一个指令属性，判断条件：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n  tag <span class=\"token operator\">===</span> <span class=\"token string\">'template'</span> <span class=\"token operator\">&amp;&amp;</span>\n  props<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token comment\">// isSpecialTemplateDirective 是使用 makeMap 创建的函数</span>\n    <span class=\"token comment\">// 即 key => true/false 的一些函数</span>\n    p<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">DIRECTIVE</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isSpecialTemplateDirective</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 是模板的前提是有指令，并且是特殊的模板指令(if, else, else-if, slot, for)</span>\n  tagType <span class=\"token operator\">=</span> ElementTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">TEMPLATE</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"parsetextcontext-mode\" style=\"position:relative;\"><a href=\"#parsetextcontext-mode\" aria-label=\"parsetextcontext mode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>parseText(context, mode)</h2>\n<p><span id=\"parse-parsetext\"></span></p>\n<p>解析文本节点，直到遇到结束标记(<code class=\"language-text\">&lt;</code>,<code class=\"language-text\">{{</code>,<code class=\"language-text\">]]&gt;</code>)。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">parseText</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context<span class=\"token operator\">:</span> ParserContext<span class=\"token punctuation\">,</span> mode<span class=\"token operator\">:</span> TextModes</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> TextNode <span class=\"token punctuation\">{</span>\n  __TEST__ <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> endTokens <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'&lt;'</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>delimiters<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mode <span class=\"token operator\">===</span> TextModes<span class=\"token punctuation\">.</span><span class=\"token constant\">CDATA</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    endTokens<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">']]>'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">let</span> endIndex <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> endTokens<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>endTokens<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> endIndex <span class=\"token operator\">></span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      endIndex <span class=\"token operator\">=</span> index\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  __TEST__ <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>endIndex <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> <span class=\"token function\">getCursor</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 文本内容可能包含 &amp;gt; &amp;lt; &amp;amp; &amp;apos; &amp;quot; 等html符号，需要</span>\n  <span class=\"token comment\">// 将他们替换成对应 >    &lt;    &amp;     '      \"</span>\n  <span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> <span class=\"token function\">parseTextData</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> endIndex<span class=\"token punctuation\">,</span> mode<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXT</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token punctuation\">,</span>\n    loc<span class=\"token operator\">:</span> <span class=\"token function\">getSelection</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>导图：</p>\n<p><img src=\"http://qiniu.ii6g.com/parse-ts-parsetext.png?imageMogr2/thumbnail/!100p\" alt=\"parse-text-导图\"></p>\n<h2 id=\"parsetextdatacontext-length-mode\" style=\"position:relative;\"><a href=\"#parsetextdatacontext-length-mode\" aria-label=\"parsetextdatacontext length mode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>parseTextData(context, length, mode)</h2>\n<p><span id=\"parse-parsetextdata\"></span></p>\n<p>文本节点可能包含数据，通过 <em>context.options.decodeEntities(???)</em> 来解析。</p>\n<p>一些字符的html书写格式，有 <code class=\"language-text\">/&amp;(gt|lt|amp|apos|quot);/</code>，最终会被对应的字符替换掉。</p>\n<p><code class=\"language-text\">decodeEntities: (rawText: string): string =&gt; rawText.replace(decodeRE, (_, p1) =&gt; decodeMap[p1])</code></p>\n<p>字符集：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> decodeMap<span class=\"token operator\">:</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  gt<span class=\"token operator\">:</span> <span class=\"token string\">'>'</span><span class=\"token punctuation\">,</span>\n  lt<span class=\"token operator\">:</span> <span class=\"token string\">'&lt;'</span><span class=\"token punctuation\">,</span>\n  amp<span class=\"token operator\">:</span> <span class=\"token string\">'&amp;'</span><span class=\"token punctuation\">,</span>\n  apos<span class=\"token operator\">:</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">,</span>\n  quot<span class=\"token operator\">:</span> <span class=\"token string\">'\"'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/**\n * Get text data with a given length from the current location.\n * This translates HTML entities in the text data.\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">parseTextData</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">context<span class=\"token operator\">:</span> ParserContext<span class=\"token punctuation\">,</span>\n  length<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span>\n  mode<span class=\"token operator\">:</span> TextModes</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> rawText <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">advanceBy</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n    mode <span class=\"token operator\">===</span> TextModes<span class=\"token punctuation\">.</span><span class=\"token constant\">RAWTEXT</span> <span class=\"token operator\">||</span>\n    mode <span class=\"token operator\">===</span> TextModes<span class=\"token punctuation\">.</span><span class=\"token constant\">CDATA</span> <span class=\"token operator\">||</span>\n    rawText<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&amp;'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> rawText <span class=\"token comment\">// 如果不包含 &amp;gt; &amp;lt; 等html标记</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// DATA or RCDATA containing \"&amp;\"\". Entity decoding required.</span>\n    <span class=\"token comment\">// 如果字符串中包含这些字符，得去将他们替换成对应的明文字符。</span>\n    <span class=\"token keyword\">return</span> context<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span><span class=\"token function\">decodeEntities</span><span class=\"token punctuation\">(</span>\n      rawText<span class=\"token punctuation\">,</span>\n      mode <span class=\"token operator\">===</span> TextModes<span class=\"token punctuation\">.</span><span class=\"token constant\">ATTRIBUTE_VALUE</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>导图：<img src=\"http://qiniu.ii6g.com/parse-ts-parsetextdata.png?imageMogr2/thumbnail/!100p\" alt=\"parse-textd-ata\"></p>\n<h2 id=\"parseattributescontext-type\" style=\"position:relative;\"><a href=\"#parseattributescontext-type\" aria-label=\"parseattributescontext type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>parseAttributes(context, type)</h2>\n<p><span id=\"parse-parseattributes\"></span></p>\n<p>这个是解析整个标签的所有属性，因此该属性只是做了一些非法情况的检测，实际真正解析属性的地方在 <a href=\"#parse-parseattribute\">parseAttribute</a> 里面。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 解析标签所有属性</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">parseAttributes</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context<span class=\"token punctuation\">,</span> type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> props <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> attributeNames <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>\n    context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token operator\">!</span>context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'>'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token operator\">!</span>context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/>'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 非法属性， &lt;div /v-if=\"ok\">&lt;/div>??</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">emitError</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ErrorCodes<span class=\"token punctuation\">.</span><span class=\"token constant\">UNEXPECTED_SOLIDUS_IN_TAG</span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">advanceBy</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">advanceSpaces</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">continue</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// &lt;/div> 结束标签，以属性结束的标签?</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> TagType<span class=\"token punctuation\">.</span>End<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">emitError</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ErrorCodes<span class=\"token punctuation\">.</span><span class=\"token constant\">END_TAG_WITH_ATTRIBUTES</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 逐个解析属性</span>\n    <span class=\"token keyword\">const</span> attr <span class=\"token operator\">=</span> <span class=\"token function\">parseAttribute</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> attributeNames<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> TagType<span class=\"token punctuation\">.</span>Start<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      props<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>attr<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token regex\">/^[^\\t\\r\\n\\f />]/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">emitError</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ErrorCodes<span class=\"token punctuation\">.</span><span class=\"token constant\">MISSING_WHITESPACE_BETWEEN_ATTRIBUTES</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">advanceSpaces</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> props\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"parseattributecontext-nameset\" style=\"position:relative;\"><a href=\"#parseattributecontext-nameset\" aria-label=\"parseattributecontext nameset permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>parseAttribute(context, nameSet)</h2>\n<p><span id=\"parse-parseattribute\"></span></p>\n<p>解析标签属性或指令：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">parseAttribute</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context<span class=\"token punctuation\">,</span> nameSet</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> <span class=\"token function\">getCursor</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> match <span class=\"token operator\">=</span> <span class=\"token regex\">/^[^\\t\\r\\n\\f />][^\\t\\r\\n\\f />=]*/</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nameSet<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 重复属性名</span>\n    <span class=\"token function\">emitError</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ErrorCodes<span class=\"token punctuation\">.</span><span class=\"token constant\">DUPLICATE_ATTRIBUTE</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  nameSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'='</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// =name=value ?</span>\n    <span class=\"token function\">emitError</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ErrorCodes<span class=\"token punctuation\">.</span><span class=\"token constant\">UNEXPECTED_EQUALS_SIGN_BEFORE_ATTRIBUTE_NAME</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> pattern <span class=\"token operator\">=</span> <span class=\"token regex\">/[\"'&lt;]/g</span>\n    <span class=\"token keyword\">let</span> m\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">=</span> pater<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 不合法的属性名</span>\n      <span class=\"token function\">emitError</span><span class=\"token punctuation\">(</span>\n        context<span class=\"token punctuation\">,</span>\n        ErrorCodes<span class=\"token punctuation\">.</span><span class=\"token constant\">UNEXPECTED_CHARACTER_IN_ATTRIBUTE_NAME</span><span class=\"token punctuation\">,</span>\n        m<span class=\"token punctuation\">.</span>index\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 移动指针</span>\n  <span class=\"token function\">advanceBy</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// type: { content, isQuoted, loc }</span>\n  <span class=\"token keyword\">let</span> value\n\n  <span class=\"token comment\">// 去空格解析属性值</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token regex\">/^[\\t\\r\\n\\f ]*=/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 属性名与 = 之间存在空格的情况，去掉空格</span>\n    <span class=\"token function\">advanceSpaces</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">advanceBy</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">advanceSpaces</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 去掉空格之后解析属性值</span>\n    value <span class=\"token operator\">=</span> <span class=\"token function\">parseAttributeValue</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">emitError</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ErrorCodes<span class=\"token punctuation\">.</span><span class=\"token constant\">MISSING_ATTRIBUTE_VALUE</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> loc <span class=\"token operator\">=</span> <span class=\"token function\">getSelection</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// v-dir 或 缩写</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>context<span class=\"token punctuation\">.</span>inVPre <span class=\"token operator\">&amp;&amp;</span> <span class=\"token regex\">/^(v-|:|@|#)/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ?: 非捕获组</span>\n    <span class=\"token comment\">// 1. (?:^v-([a-z0-9]+))? -> 匹配 v-dir 指令，非贪婪匹配，捕获指令名</span>\n    <span class=\"token comment\">//   称([a-z0=9]+)</span>\n    <span class=\"token comment\">// 2. (?:(?::|^@|^#)([^\\.]+))? -> 匹配 :,@,#</span>\n    <span class=\"token comment\">// 3. (.+)?$ 匹配任意字符</span>\n    <span class=\"token keyword\">const</span> match <span class=\"token operator\">=</span> <span class=\"token regex\">/(?:^v-([a-z0-9]+))?(?:(?::|^@|^#)([^\\.]+))?(.+)?$/i</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>\n      name\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">let</span> arg\n\n    <span class=\"token comment\">// ([a-z0-9]+), ([^\\.]+)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> startOffset <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">const</span> loc <span class=\"token operator\">=</span> <span class=\"token function\">getSelection</span><span class=\"token punctuation\">(</span>\n        context<span class=\"token punctuation\">,</span>\n        <span class=\"token function\">getNewPosition</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> startOffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">getNewPosition</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> startOffset <span class=\"token operator\">+</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">let</span> content <span class=\"token operator\">=</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">let</span> isStatic <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 静态属性名</span>\n\n      <span class=\"token comment\">// 动态属性名解析</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'['</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        isStatic <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>content<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">']'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// 如果是动态属性名，必须是 [varName] 形式</span>\n          <span class=\"token function\">emitError</span><span class=\"token punctuation\">(</span>\n            context<span class=\"token punctuation\">,</span>\n            ErrorCodes<span class=\"token punctuation\">.</span><span class=\"token constant\">X_MISSING_DYNAMIC_DIRECTIVE_ARGUMENT_END</span>\n          <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        content <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n\n      arg <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">SIMPLE_EXPRESSION</span><span class=\"token punctuation\">,</span>\n        content<span class=\"token punctuation\">,</span>\n        isStatic<span class=\"token punctuation\">,</span>\n        isConstant<span class=\"token operator\">:</span> isStatic<span class=\"token punctuation\">,</span>\n        loc\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 属性是否被引号包起来</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">&amp;&amp;</span> value<span class=\"token punctuation\">.</span>isQuoted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> valueLoc <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span>loc\n      valueLoc<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">.</span>offset<span class=\"token operator\">++</span>\n      valueLoc<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">.</span>column<span class=\"token operator\">++</span>\n      valueLoc<span class=\"token punctuation\">.</span>end <span class=\"token operator\">=</span> <span class=\"token function\">advancePositionWithClone</span><span class=\"token punctuation\">(</span>valueLoc<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">// 取引号内的所有内容</span>\n      valueLoc<span class=\"token punctuation\">.</span>source <span class=\"token operator\">=</span> valueLoc<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">DIRECTIVE</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// : -> v-bind, @ -> v-on, # -> v-slot 的缩写</span>\n      name<span class=\"token operator\">:</span>\n        match<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span>\n        <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">':'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">'bind'</span> <span class=\"token operator\">:</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">'on'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'slot'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      exp<span class=\"token operator\">:</span> value <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">SIMPLE_EXPRESSION</span><span class=\"token punctuation\">,</span>\n        content<span class=\"token operator\">:</span> value<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">,</span>\n        isStatic<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        isConstant<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        loc<span class=\"token operator\">:</span> value<span class=\"token punctuation\">.</span>loc\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      arg<span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// 修饰符处理, v-bind.m1.m2 -> .m1.m2 -> ['m1', 'm2']</span>\n      modifiers<span class=\"token operator\">:</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>substr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      loc\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">ATTRIBUTE</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token punctuation\">,</span>\n    value<span class=\"token operator\">:</span> value <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXT</span><span class=\"token punctuation\">,</span>\n      content<span class=\"token operator\">:</span> value<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">,</span>\n      loc<span class=\"token operator\">:</span> value<span class=\"token punctuation\">.</span>loc\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    loc\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>该函数实现主要有几部分(以 <code class=\"language-text\">&lt;div v-bind:keyup.enter.prevent=&quot;ok&quot;&gt;&lt;/div&gt;</code> 为例)：</p>\n<ol>\n<li>匹配属性名，关键正则：<code class=\"language-text\">/^[^\\t\\r\\n\\f /&gt;][^\\t\\r\\n\\f /&gt;=]*/</code> 会将 <code class=\"language-text\">v-if=&quot;varname&quot;</code> 中等号前面的<code class=\"language-text\">v-bind:keyup.enter.prevent</code>都匹配出来。</li>\n<li>将匹配到的属性名收集到 <code class=\"language-text\">nameSet[]</code> 中，检测重复性。\n<font color=\"purple\">这里需要注意的是，属性名匹配的结果会将变量名，修饰符都匹配到，如：<code class=\"language-text\">&lt;div v-bind:keyup.enter.prevent=&quot;ok&quot;&gt;</code>，最后 add 到 nameSet 中的完整属性名为：<code class=\"language-text\">v-bind:keyup.enter.prevent</code>。</font></li>\n<li>非法属性名检测(如：<code class=\"language-text\">=name=value</code>，或属性名中包含 <code class=\"language-text\">[&quot;&#39;&lt;]</code> 字符)，异常</li>\n<li>移动指针 <code class=\"language-text\">advanceBy(context, name.length)</code> 定位到属性名后的位置，目的是为了取属性值，剩下：<code class=\"language-text\">=&quot;ok&quot;</code>。</li>\n<li>\n<p>正则：<code class=\"language-text\">/^[\\t\\r\\n\\f ]*=/</code>，解析属性值，调用 <a href=\"#pars-parseattributevalue\">parseAttributeValue</a> 解析出属性值来</p>\n<ol>\n<li>指针归位至开始位置，如： <code class=\"language-text\">v-bind:keyup.enter.prevent=&quot;ok&quot;</code> 的开始位置为 <code class=\"language-text\">v</code> 位置，解析修饰符，得到 <code class=\"language-text\">modifiers: []</code>，这里的关键在于正则：<code class=\"language-text\">/(?:^v-([a-z0-9]+))?(?:(?::|^@|^#)([^\\.]+))?(.+)?$/i</code>，会匹配 <code class=\"language-text\">v-if, :, @, #...</code> 指令和指令缩写以及修饰符。</li>\n<li>解析指令后面的变量名称，如：<code class=\"language-text\">keyup</code>，有可能是动态值 <code class=\"language-text\">v-bind:[varname]</code>。</li>\n<li>检测属性值有没被引号包起来，如果有，要更新 value.loc，只取引号内的内容 <code class=\"language-text\">content.source = valueLoc.source.slice(1, -1)</code></li>\n<li>返回指令节点类型对象</li>\n</ol>\n</li>\n<li>否则返回普通属性类型节点</li>\n</ol>\n<h2 id=\"parseattributevaluecontext\" style=\"position:relative;\"><a href=\"#parseattributevaluecontext\" aria-label=\"parseattributevaluecontext permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>parseAttributeValue(context)</h2>\n<p><span id=\"parse-parseattributevalue\"></span></p>\n<p>解析属性值。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">parseAttributeValue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 保存模板字符串指针起点位置</span>\n  <span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> <span class=\"token function\">getCursor</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">let</span> content\n\n  <span class=\"token keyword\">const</span> quote <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> isQuoted <span class=\"token operator\">=</span> quote <span class=\"token operator\">===</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\"</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">||</span> quote <span class=\"token operator\">===</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">'</span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isQuoted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 有引号</span>\n    <span class=\"token function\">advanceBy</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> endIndex <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>quote<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 没有结束引号??? 整个 source 当做文本数据处理???</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>endIndex <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      content <span class=\"token operator\">=</span> <span class=\"token function\">parseTextData</span><span class=\"token punctuation\">(</span>\n        context<span class=\"token punctuation\">,</span>\n        context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\n        TextModes<span class=\"token punctuation\">.</span><span class=\"token constant\">ATTRIBUTE_VALUE</span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      content <span class=\"token operator\">=</span> <span class=\"token function\">parseTextData</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> endIndex<span class=\"token punctuation\">,</span> TextModes<span class=\"token punctuation\">.</span><span class=\"token constant\">ATTRIBUTE_VALUE</span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">advanceBy</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 没有引号</span>\n    <span class=\"token keyword\">const</span> match <span class=\"token operator\">=</span> <span class=\"token regex\">/^[^\\t\\r\\n\\f >]+/</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>match<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 无属性值</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">undefined</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> unexpectedChars <span class=\"token operator\">=</span> <span class=\"token regex\">/[\"'&lt;=`]/g</span>\n    <span class=\"token keyword\">let</span> m\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">=</span> unexpectedChars<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 无引号值中非法字符检测</span>\n      <span class=\"token function\">emitError</span><span class=\"token punctuation\">(</span>\n        context<span class=\"token punctuation\">,</span>\n        ErrorCodes<span class=\"token punctuation\">.</span><span class=\"token constant\">UNEXPECTED_CHARACTER_IN_UNQUOTED_ATTRIBUTE_VALUE</span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 解析文本数据</span>\n    content <span class=\"token operator\">=</span> <span class=\"token function\">parseTextData</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> TextModes<span class=\"token punctuation\">.</span><span class=\"token constant\">ATTRIBUTE_VALUE</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> content<span class=\"token punctuation\">,</span> isQuoted<span class=\"token punctuation\">,</span> loc<span class=\"token operator\">:</span> <span class=\"token function\">getSelection</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"pushnodenodes-node\" style=\"position:relative;\"><a href=\"#pushnodenodes-node\" aria-label=\"pushnodenodes node permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pushNode(nodes, node)</h2>\n<p><span id=\"parse-pushnode\"></span></p>\n<ol>\n<li>注释节点不处理</li>\n<li>合并文本节点(前提是prev, node 两个节点是紧挨着的，由 loc.end.offset 和 loc.start.offset判断)</li>\n<li>返回新增 node 的 nodes 节点数组</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">pushNode</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nodes<span class=\"token operator\">:</span> TemplateChildNode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> node<span class=\"token operator\">:</span> TemplateChildNode</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ignore comments in production</span>\n  <span class=\"token comment\">/* istanbul ignore next */</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>__DEV__ <span class=\"token operator\">&amp;&amp;</span> node<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">===</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">COMMENT</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">===</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXT</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 两个连着的文本节点，拼凑到一起去</span>\n    <span class=\"token keyword\">const</span> prev <span class=\"token operator\">=</span> <span class=\"token function\">last</span><span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// Merge if both this and the previous node are text and those are</span>\n    <span class=\"token comment\">// consecutive. This happens for cases like \"a &lt; b\".</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n      prev <span class=\"token operator\">&amp;&amp;</span>\n      prev<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">===</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXT</span> <span class=\"token operator\">&amp;&amp;</span>\n      prev<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">.</span>offset <span class=\"token operator\">===</span> node<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">.</span>offset\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      prev<span class=\"token punctuation\">.</span>content <span class=\"token operator\">+=</span> node<span class=\"token punctuation\">.</span>content\n      prev<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">.</span>end <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">.</span>end\n      prev<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">.</span>source <span class=\"token operator\">+=</span> node<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">.</span>source\n      <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  nodes<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"isendcontext-mode-ancestors\" style=\"position:relative;\"><a href=\"#isendcontext-mode-ancestors\" aria-label=\"isendcontext mode ancestors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>isEnd(context, mode, ancestors)</h2>\n<p><span id=\"parse-isend\"></span></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">isEnd</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">context<span class=\"token operator\">:</span> ParserContext<span class=\"token punctuation\">,</span>\n  mode<span class=\"token operator\">:</span> TextModes<span class=\"token punctuation\">,</span>\n  ancestors<span class=\"token operator\">:</span> ElementNode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> s <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>source\n\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>mode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> TextModes<span class=\"token punctuation\">.</span><span class=\"token constant\">DATA</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token string\">'&lt;/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//TODO: probably bad performance</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> ancestors<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">startsWithEndTagOpen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> ancestors<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">break</span>\n\n    <span class=\"token keyword\">case</span> TextModes<span class=\"token punctuation\">.</span><span class=\"token constant\">RCDATA</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">case</span> TextModes<span class=\"token punctuation\">.</span><span class=\"token constant\">RAWTEXT</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> parent <span class=\"token operator\">=</span> <span class=\"token function\">last</span><span class=\"token punctuation\">(</span>ancestors<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">startsWithEndTagOpen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">case</span> TextModes<span class=\"token punctuation\">.</span><span class=\"token constant\">CDATA</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token string\">']]>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">break</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span>s\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"getcursorcontext\" style=\"position:relative;\"><a href=\"#getcursorcontext\" aria-label=\"getcursorcontext permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>getCursor(context)</h2>\n<p><span id=\"parse-getCursor\"></span></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">getCursor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context<span class=\"token operator\">:</span> ParserContext</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Position <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> column<span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">,</span> offset <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> context\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> column<span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">,</span> offset <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"getselectioncontext-start-end-postion\" style=\"position:relative;\"><a href=\"#getselectioncontext-start-end-postion\" aria-label=\"getselectioncontext start end postion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>getSelection(context, start, end?: Postion)</h2>\n<p><span id=\"parse-getselection\"></span></p>\n<p>取实时解析后的 source，start，end的值。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">getSelection</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">context<span class=\"token operator\">:</span> ParserContext<span class=\"token punctuation\">,</span>\n  start<span class=\"token operator\">:</span> Position<span class=\"token punctuation\">,</span>\n  end<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Position</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> SourceLocation <span class=\"token punctuation\">{</span>\n  end <span class=\"token operator\">=</span> end <span class=\"token operator\">||</span> <span class=\"token function\">getCursor</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    start<span class=\"token punctuation\">,</span>\n    end<span class=\"token punctuation\">,</span>\n    source<span class=\"token operator\">:</span> context<span class=\"token punctuation\">.</span>originalSource<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">.</span>offset<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">.</span>offset<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"astts\" style=\"position:relative;\"><a href=\"#astts\" aria-label=\"astts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ast.ts</h1>\n<p><span id=\"file-ast\"></span></p>\n<h2 id=\"createrootchildren-loc--locstub\" style=\"position:relative;\"><a href=\"#createrootchildren-loc--locstub\" aria-label=\"createrootchildren loc  locstub permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>createRoot(children, loc = locStub)</h2>\n<p><span id=\"ast-createroot\"></span></p>\n<p>创建根节点对象，返回一个 <a href=\"#td-ast-rootnode\">RootNode</a> 类型对象。</p>\n<p>参数：</p>\n<ol>\n<li>\n<p>children 节点子孙节点，类型：<a href=\"#td-ast-tcn\">TemplateChildNode[]</a></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> TemplateChildNode <span class=\"token operator\">=</span>\n <span class=\"token operator\">|</span> ElementNode <span class=\"token comment\">// 节元素点类型</span>\n <span class=\"token operator\">|</span> InterpolationNode <span class=\"token comment\">// 插值节点</span>\n <span class=\"token operator\">|</span> CompoundExpressionNode <span class=\"token comment\">// 混合表达式节点</span>\n <span class=\"token operator\">|</span> TextNode <span class=\"token comment\">// 文本节点</span>\n <span class=\"token operator\">|</span> CommentNode <span class=\"token comment\">// 注释节点</span>\n <span class=\"token operator\">|</span> IfNode <span class=\"token comment\">// v-if 节点</span>\n <span class=\"token operator\">|</span> IfBranchNode <span class=\"token comment\">// v-else, v-else-if 分支节点</span>\n <span class=\"token operator\">|</span> ForNode <span class=\"token comment\">// v-ofr 节点</span>\n <span class=\"token operator\">|</span> TextCallNode <span class=\"token comment\">// ???</span></code></pre></div>\n</li>\n<li>\n<p>loc 一个 SourceLoation 类型的结构，默认值为 <code class=\"language-text\">locStub</code></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> locStub<span class=\"token operator\">:</span> SourceLocation <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n source<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n start<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n end<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<p>代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">children<span class=\"token operator\">:</span> TemplateChildNode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  loc <span class=\"token operator\">=</span> locStub</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> RootNode <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">ROOT</span><span class=\"token punctuation\">,</span>\n    children<span class=\"token punctuation\">,</span>\n    helpers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    components<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    directives<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    hoists<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    imports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    cached<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    temps<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    codegenNode<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n    loc\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"utilsts\" style=\"position:relative;\"><a href=\"#utilsts\" aria-label=\"utilsts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>utils.ts</h1>\n<h2 id=\"advancepositionwithmutationpossource-numberofcharacters\" style=\"position:relative;\"><a href=\"#advancepositionwithmutationpossource-numberofcharacters\" aria-label=\"advancepositionwithmutationpossource numberofcharacters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>advancePositionWithMutation(pos,source, numberOfCharacters)</h2>\n<p><span id=\"util-advancepositionwithmutation\"></span></p>\n<p>更新context的 line，column，offset的值</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// advance by mutation without cloning (for performance reasons), since this</span>\n<span class=\"token comment\">// gets called a lot in the parser</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">advancePositionWithMutation</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">pos<span class=\"token operator\">:</span> Position<span class=\"token punctuation\">,</span>\n  source<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n  numberOfCharacters<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span>length</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Position <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> linesCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">let</span> lastNewLinePos <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numberOfCharacters<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">10</span> <span class=\"token comment\">/* newline char code */</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      linesCount<span class=\"token operator\">++</span>\n      lastNewLinePos <span class=\"token operator\">=</span> i\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  pos<span class=\"token punctuation\">.</span>offset <span class=\"token operator\">+=</span> numberOfCharacters\n  pos<span class=\"token punctuation\">.</span>line <span class=\"token operator\">+=</span> linesCount\n  pos<span class=\"token punctuation\">.</span>column <span class=\"token operator\">=</span>\n    lastNewLinePos <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n      <span class=\"token operator\">?</span> pos<span class=\"token punctuation\">.</span>column <span class=\"token operator\">+</span> numberOfCharacters\n      <span class=\"token operator\">:</span> numberOfCharacters <span class=\"token operator\">-</span> lastNewLinePos\n\n  <span class=\"token keyword\">return</span> pos\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"变量声明\" style=\"position:relative;\"><a href=\"#%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E\" aria-label=\"变量声明 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>变量声明</h1>\n<p>该模块相关的一些全局变量信息。</p>\n<h2 id=\"枚举类型\" style=\"position:relative;\"><a href=\"#%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B\" aria-label=\"枚举类型 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>枚举类型</h2>\n<h3 id=\"span-idtd-vars-textmodesspantextmodes\" style=\"position:relative;\"><a href=\"#span-idtd-vars-textmodesspantextmodes\" aria-label=\"span idtd vars textmodesspantextmodes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><span id=\"td-vars-textmodes\"></span>TextModes</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">enum</span> TextModes <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//          | Elements | Entities | End sign              | Inside of</span>\n  <span class=\"token constant\">DATA</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//    | ✔        | ✔        | End tags of ancestors |</span>\n  <span class=\"token constant\">RCDATA</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//  | ✘        | ✔        | End tag of the parent | &lt;textarea></span>\n  <span class=\"token constant\">RAWTEXT</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// | ✘        | ✘        | End tag of the parent | &lt;style>,&lt;script></span>\n  <span class=\"token constant\">CDATA</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">ATTRIBUTE_VALUE</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>转换成 javascript：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> TextModes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//             | Elements | Entities | End sign              | Inside of</span>\n  <span class=\"token constant\">DATA</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//    | ✔        | ✔        | End tags of ancestors |</span>\n  <span class=\"token constant\">RCDATA</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//  | ✘        | ✔        | End tag of the parent | &lt;textarea></span>\n  <span class=\"token constant\">RAWTEXT</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// | ✘        | ✘        | End tag of the parent | &lt;style>,&lt;script></span>\n  <span class=\"token constant\">CDATA</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">ATTRIBUTE_VALUE</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"parser\" style=\"position:relative;\"><a href=\"#parser\" aria-label=\"parser permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>parser</h2>\n<h3 id=\"defaultparseroptions\" style=\"position:relative;\"><a href=\"#defaultparseroptions\" aria-label=\"defaultparseroptions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>defaultParserOptions</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 默认的解析器选项</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> defaultParserOptions<span class=\"token operator\">:</span> MergedParserOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  delimiters<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">{{</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">}}</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">getNamespace</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Namespaces<span class=\"token punctuation\">.</span><span class=\"token constant\">HTML</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 命名空间</span>\n  <span class=\"token function-variable function\">getTextMode</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> TextModes<span class=\"token punctuation\">.</span><span class=\"token constant\">DATA</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 文本类型</span>\n  isVoidTag<span class=\"token operator\">:</span> <span class=\"token constant\">NO</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 自关闭标签???，如：&lt;img>, &lt;hr> ...</span>\n  isPreTag<span class=\"token operator\">:</span> <span class=\"token constant\">NO</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// &lt;pre> 代码标签???，需要保留空格保证缩进的</span>\n  isCustomElement<span class=\"token operator\">:</span> <span class=\"token constant\">NO</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 自定义标签，如：Transition</span>\n  decodeEntities<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>rawText<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\"><span class=\"token builtin\">string</span></span> <span class=\"token operator\">=></span> \n  \t<span class=\"token comment\">// 解码实例，一些特殊符号表示，如：&amp;gt;, &amp;lt;, &amp;amp;, &amp;apos; &amp;quot;</span>\n    rawText<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>decodeRE<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> p1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> decodeMap<span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  onError<span class=\"token operator\">:</span> defaultOnError\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>使用到的其他全局变量：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> decodeRE <span class=\"token operator\">=</span> <span class=\"token regex\">/&amp;(gt|lt|amp|apos|quot);/g</span>\n<span class=\"token keyword\">const</span> decodeMap<span class=\"token operator\">:</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  gt<span class=\"token operator\">:</span> <span class=\"token string\">'>'</span><span class=\"token punctuation\">,</span>\n  lt<span class=\"token operator\">:</span> <span class=\"token string\">'&lt;'</span><span class=\"token punctuation\">,</span>\n  amp<span class=\"token operator\">:</span> <span class=\"token string\">'&amp;'</span><span class=\"token punctuation\">,</span>\n  apos<span class=\"token operator\">:</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">,</span>\n  quot<span class=\"token operator\">:</span> <span class=\"token string\">'\"'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"类型声明\" style=\"position:relative;\"><a href=\"#%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E\" aria-label=\"类型声明 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>类型声明</h1>\n<p>该模块所有类型声明统一归类到此，顺序按照用例解析遇到的顺序为主。</p>\n<h2 id=\"astts-1\" style=\"position:relative;\"><a href=\"#astts-1\" aria-label=\"astts 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ast.ts</h2>\n<h3 id=\"elementnode\" style=\"position:relative;\"><a href=\"#elementnode\" aria-label=\"elementnode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ElementNode</h3>\n<p><span id=\"td-ast-elementnode\"></span></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> ElementNode <span class=\"token operator\">=</span>\n  <span class=\"token operator\">|</span> PlainElementNode\n  <span class=\"token operator\">|</span> ComponentNode\n  <span class=\"token operator\">|</span> SlotOutletNode\n  <span class=\"token operator\">|</span> TemplateNode</code></pre></div>\n<h3 id=\"templatechildnode\" style=\"position:relative;\"><a href=\"#templatechildnode\" aria-label=\"templatechildnode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TemplateChildNode</h3>\n<p><span id=\"td-ast-tcn\"></span></p>\n<p>模板子孙节点的可能类型组合：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> TemplateChildNode <span class=\"token operator\">=</span>\n  <span class=\"token operator\">|</span> ElementNode <span class=\"token comment\">// 节元素点类型</span>\n  <span class=\"token operator\">|</span> InterpolationNode <span class=\"token comment\">// 插值节点</span>\n  <span class=\"token operator\">|</span> CompoundExpressionNode <span class=\"token comment\">// 混合表达式节点</span>\n  <span class=\"token operator\">|</span> TextNode <span class=\"token comment\">// 文本节点</span>\n  <span class=\"token operator\">|</span> CommentNode <span class=\"token comment\">// 注释节点</span>\n  <span class=\"token operator\">|</span> IfNode <span class=\"token comment\">// v-if 节点</span>\n  <span class=\"token operator\">|</span> IfBranchNode <span class=\"token comment\">// v-else, v-else-if 分支节点</span>\n  <span class=\"token operator\">|</span> ForNode <span class=\"token comment\">// v-ofr 节点</span>\n  <span class=\"token operator\">|</span> TextCallNode <span class=\"token comment\">// ???</span></code></pre></div>\n<h3 id=\"rootnode\" style=\"position:relative;\"><a href=\"#rootnode\" aria-label=\"rootnode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RootNode</h3>\n<p><span id=\"td-ast-rootnode\"></span></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">RootNode</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> NodeTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">ROOT</span>\n  children<span class=\"token operator\">:</span> TemplateChildNode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  helpers<span class=\"token operator\">:</span> <span class=\"token builtin\">symbol</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  components<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  directives<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  hoists<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>JSChildNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  imports<span class=\"token operator\">:</span> ImportItem<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  cached<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  temps<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  ssrHelpers<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">symbol</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  codegenNode<span class=\"token operator\">?</span><span class=\"token operator\">:</span> TemplateChildNode <span class=\"token operator\">|</span> JSChildNode <span class=\"token operator\">|</span> BlockStatement <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"parseroptions\" style=\"position:relative;\"><a href=\"#parseroptions\" aria-label=\"parseroptions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ParserOptions</h2>\n<p><span id=\"td-parser-options\"></span></p>\n<p>定义位置：<em><font color=\"purple\"> src/options.ts</font></em></p>\n<p>接口内容：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ParserOptions</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n   * e.g. platform native elements, e.g. &lt;div> for browsers\n   */</span>\n  isNativeTag<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">tag<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">boolean</span>\n  <span class=\"token comment\">/**\n   * e.g. native elements that can self-close, e.g. &lt;img>, &lt;br>, &lt;hr>\n   */</span>\n  isVoidTag<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">tag<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">boolean</span>\n  <span class=\"token comment\">/**\n   * e.g. elements that should preserve whitespace inside, e.g. &lt;pre>\n   */</span>\n  isPreTag<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">tag<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">boolean</span>\n  <span class=\"token comment\">/**\n   * Platform-specific built-in components e.g. &lt;Transition>\n   */</span>\n  isBuiltInComponent<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">tag<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">symbol</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">void</span>\n  <span class=\"token comment\">/**\n   * Separate option for end users to extend the native elements list\n   */</span>\n  isCustomElement<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">tag<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">boolean</span>\n  <span class=\"token comment\">/**\n   * Get tag namespace\n   */</span>\n  getNamespace<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">tag<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> parent<span class=\"token operator\">:</span> ElementNode <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Namespace\n  <span class=\"token comment\">/**\n   * Get text parsing mode for this element\n   */</span>\n  getTextMode<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\">node<span class=\"token operator\">:</span> ElementNode<span class=\"token punctuation\">,</span>\n    parent<span class=\"token operator\">:</span> ElementNode <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span></span>\n  <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> TextModes\n  <span class=\"token comment\">/**\n   * @default ['{{', '}}']\n   */</span>\n  delimiters<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>\n  <span class=\"token comment\">/**\n   * Only needed for DOM compilers\n   */</span>\n  decodeEntities<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">rawText<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> asAttr<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span>\n  onError<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token operator\">:</span> CompilerError</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>字段说明：</p>\n<ol>\n<li><code class=\"language-text\">isNativeTag?: (tag: string) =&gt; boolean</code> 一个函数，判断标签是否是原生标签(如：li, div)</li>\n<li><code class=\"language-text\">isVoidTag?: (tag: string) =&gt; boolean</code>,自关闭标签，如：img, br, hr</li>\n<li><code class=\"language-text\">isPreTag?: (tag: string) =&gt; boolean</code>，代码标签，需要空格缩进的，如：pre</li>\n<li><code class=\"language-text\">isBuiltInComponent?: (tag: string) =&gt; symbol | void</code>，平台相关的内置组件，如：Transition</li>\n<li><code class=\"language-text\">isCoustomElement?: (tag: string) =&gt; boolean</code>，用户自定的标签</li>\n<li><code class=\"language-text\">getNamespace?: (tag: string, parent: ElementNode | undefined) =&gt; N⁄amespace</code> ，获取标签命名空间</li>\n<li><code class=\"language-text\">getTextMode?: (node: ElementNode, parent: ElementNode|undefined) =&gt; TextModes</code>获取文本解析模式</li>\n<li><code class=\"language-text\">delimiters?: [string, string]</code>，插值分隔符，默认：<code class=\"language-text\">[&#39;{{&#39;, &#39;}}&#39;]</code></li>\n<li><code class=\"language-text\">decodeEntities?: (rawText: string, asAttr: boolean) =&gt; string</code>，仅用于 DOM compilers</li>\n<li><code class=\"language-text\">onError?: (error: CompilerError) =&gt; void</code></li>\n</ol>\n<h2 id=\"parsercontext\" style=\"position:relative;\"><a href=\"#parsercontext\" aria-label=\"parsercontext permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ParserContext</h2>\n<p><span id=\"td-parser-context\"></span></p>\n<p>定义位置：<em><font color=\"purple\"> src/parse.ts</font></em></p>\n<p>接口内容：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ParserContext</span> <span class=\"token punctuation\">{</span>\n  options<span class=\"token operator\">:</span> MergedParserOptions <span class=\"token comment\">// 解析器选项，即合并之后的参数对象</span>\n  <span class=\"token keyword\">readonly</span> originalSource<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token comment\">// 最初的源码，即解析之前的最原始的字符串，只读版本</span>\n  source<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token comment\">// 解析中的源码字符串，会发生变化的字符串</span>\n  offset<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token comment\">// 解析的指针位置，类似文件读取是的指针偏移量</span>\n  line<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token comment\">// 解析位置在源码中的当前行</span>\n  column<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token comment\">// 解析位置在源码中的当前列</span>\n  inPre<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token comment\">// 标识是不是 &lt;pre> 标签，如果是需要保留空格保证缩进</span>\n  inVPre<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token comment\">// v-pre 指令，不处理指令和插值(v-xxx, {{...}})</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"阶段代码记录\" style=\"position:relative;\"><a href=\"#%E9%98%B6%E6%AE%B5%E4%BB%A3%E7%A0%81%E8%AE%B0%E5%BD%95\" aria-label=\"阶段代码记录 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>阶段代码记录</h1>\n<p><span id=\"stage-codes\"></span></p>\n<ol>\n<li><a href=\"https://github.com/gcclll/vue-next-code-read/tree/master/bakups/compiler-core/text-test-01-some-text\">text01: some text 的代码备份</a><span id=\"link-01\"></span></li>\n<li><a href=\"https://github.com/gcclll/vue-next-code-read/tree/master/bakups/compiler-core/text-test-02-some-text-div-01\">text02: some text &#x3C;div> 01 代码备份</a><span id=\"link-02\"></span></li>\n<li><a href=\"https://github.com/gcclll/vue-next-code-read/tree/master/bakups/compiler-core/text-test-02-some-text-div-02\">text02: some text &#x3C;div> 02 代码备份</a><span id=\"link-03\"></span></li>\n<li><a href=\"https://github.com/gcclll/vue-next-code-read/tree/master/bakups/compiler-core/text-test-03-interpolation\">text03: some {{ foo + bar }} text 代码备份</a><span id=\"link-04\"></span></li>\n<li><a href=\"https://github.com/gcclll/vue-next-code-read/tree/master/bakups/compiler-core/text-test-03-interpolation\">text04: some {{ a&#x3C;b &#x26;&#x26; c>d }} text 代码备份</a><span id=\"link-05\"></span></li>\n<li><a href=\"https://github.com/gcclll/vue-next-code-read/tree/master/bakups/compiler-core/comment-test\">comment: <!--x-->注释解析代码备份</a><span id=\"link-06\"></span></li>\n</ol>\n<h1 id=\"问题疑问列表\" style=\"position:relative;\"><a href=\"#%E9%97%AE%E9%A2%98%E7%96%91%E9%97%AE%E5%88%97%E8%A1%A8\" aria-label=\"问题疑问列表 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>问题/疑问列表</h1>\n<p><span id=\"issues\"></span></p>\n<ol>\n<li><font color=\"red\">如何区分内置标签|内置组件|核心组件|自定义组件？<a href=\"#parse-parsetag-04\">🛫</a></font></li>\n<li>\n<p><font color=\"red\">为什么 <a href=\"#parse-parsetag\">parseTag</a> 解析 <code class=\"language-text\">&lt;div&gt;</code> 之后只会得到 <code class=\"language-text\">&lt;div</code> 而不会将 <code class=\"language-text\">&gt;</code> 解析进去？<a href=\"#parse-parseelement\">🛫</a></font>\n答：是因为我们漏掉实现了一部分代码，自闭合标签的检测，移动指针(2/1位)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">parseTag</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context<span class=\"token punctuation\">,</span> type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">// .... 省略</span>\n \n \n <span class=\"token comment\">// TODO-3 &lt;div/> 自闭标签</span>\n <span class=\"token comment\">// 这里要实现，不然最后解析完成之后 source 会是：>...&lt;/span></span>\n <span class=\"token comment\">// 需要检测下是不是自闭合标签来移动指针位置</span>\n <span class=\"token keyword\">let</span> isSelfClosing <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">emitError</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ErrorCodes<span class=\"token punctuation\">.</span><span class=\"token constant\">EOF_IN_TAG</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// some &lt;div> ... &lt;/div> 到这里的 source = > ... &lt;/div></span>\n   <span class=\"token comment\">// 所以可以检测是不是以 /> 开头的</span>\n   isSelfClosing <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/>'</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> TagType<span class=\"token punctuation\">.</span>End <span class=\"token operator\">&amp;&amp;</span> isSelfClosing<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token function\">emitError</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ErrorCodes<span class=\"token punctuation\">.</span><span class=\"token constant\">END_TAG_WITH_TRAILING_SOLIDUS</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token comment\">// 如果是自闭合指针移动两位(/>)，否则只移动一位(>)</span>\n   <span class=\"token comment\">// 到这里 source = ... &lt;/div></span>\n   <span class=\"token function\">advanceBy</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> isSelfClosing <span class=\"token operator\">?</span> <span class=\"token number\">2</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span>\n \n <span class=\"token comment\">// ... 省略</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><font color=\"red\">为什么 <a href=\"#parse-parseelement\">parseElement</a> 解析 children 的时候先 ancestors.push(element) 解析之后又 pop() 掉？\n</font>\n答：要回到这个问题要从 parseChildren 和 parseElement 两个函数结合来看，如下代码分析</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 解析流程(用例5)：</span>\n<span class=\"token comment\">// 1. 先 parseChildren(context, mode, ancestors) </span>\n<span class=\"token comment\">// 解析 `some &lt;span>{{ foo &lt; bar + foo }} text&lt;/span>`</span>\n<span class=\"token comment\">//   1) 首先得到的是 `some ` 文本节点</span>\n<span class=\"token comment\">//   2) 检测到 &lt;span> 进入标签解析 parseElement(context, ancestors) 注意这里的 \t\t//\t\t\t\tancestors，是由 parseChildren 继承过来的</span>\n<span class=\"token comment\">// 2. 进入 parseElement 解析进程</span>\n<span class=\"token comment\">//   \t1) 遇到 &lt;span> 解析出标签节点 span</span>\n<span class=\"token comment\">//   \t2) 在自身函数内检测到标签内还有内容，重新调用 parseChildren(..., ancestors) </span>\n<span class=\"token comment\">//    3) 所以重点来了</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token comment\">// ancestors 是 parseChildren 传递过来的，parseElement 里面将</span>\n<span class=\"token comment\">// push 的目的：让子节点有所依赖，知道自己的父级是谁，但好像 parseChildren 里面用到 </span>\n<span class=\"token comment\">// \t\tparent 也是为了获取命名空间去用了</span>\n<span class=\"token comment\">// pop 的目的：难道是为了不污染 ancestors ???</span></code></pre></div>\n<p>好像还不是很明确为何要 push->pop。</p>\n</li>\n</ol>\n<h1 id=\"流程图\" style=\"position:relative;\"><a href=\"#%E6%B5%81%E7%A8%8B%E5%9B%BE\" aria-label=\"流程图 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>流程图</h1>\n<p><span id=\"flowchart-list\"></span></p>\n<p>由于有些流程图挺大的，内容多，因此放到最后。</p>\n<h2 id=\"带指令的模板标签解析\" style=\"position:relative;\"><a href=\"#%E5%B8%A6%E6%8C%87%E4%BB%A4%E7%9A%84%E6%A8%A1%E6%9D%BF%E6%A0%87%E7%AD%BE%E8%A7%A3%E6%9E%90\" aria-label=\"带指令的模板标签解析 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>带指令的模板/标签解析</h2>\n<p>实例：</p>\n<ol>\n<li>用例：<a href=\"#test-element-05\">05-template element with directives</a></li>\n<li>more…</li>\n</ol>\n<p>图片完整地址：<a href=\"http://qiniu.ii6g.com/test-element-directive.png?imageMogr2/thumbnail/!100p\">http://qiniu.ii6g.com/test-element-directive.png?imageMogr2/thumbnail/!100p</a></p>\n<p><img src=\"http://qiniu.ii6g.com/test-element-directive.png?imageMogr2/thumbnail/!100p\"></p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E5%88%86%E6%9E%90\">测试用例分析</a></p>\n<ul>\n<li><a href=\"#parsespects\">parse.spec.ts</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#parsets\">parse.ts</a></p>\n<ul>\n<li><a href=\"#baseparsecontext-options\">baseParse(context, options)</a></li>\n<li><a href=\"#createparsecontextcontext-options\">createParseContext(context, options)</a></li>\n<li><a href=\"#parsechildrencontext-mode-ancestors\">parseChildren(context, mode, ancestors)</a></li>\n<li><a href=\"#parsecommentcontext\">parseComment(context)</a></li>\n<li><a href=\"#parseelementcontext-mode\">parseElement(context, mode)</a></li>\n<li><a href=\"#parseinterpolationcontext-mode\">parseInterpolation(context, mode)</a></li>\n<li><a href=\"#parsetagcontext-type-parent\">parseTag(context, type, parent)</a></li>\n<li><a href=\"#parsetextcontext-mode\">parseText(context, mode)</a></li>\n<li><a href=\"#parsetextdatacontext-length-mode\">parseTextData(context, length, mode)</a></li>\n<li><a href=\"#parseattributescontext-type\">parseAttributes(context, type)</a></li>\n<li><a href=\"#parseattributecontext-nameset\">parseAttribute(context, nameSet)</a></li>\n<li><a href=\"#parseattributevaluecontext\">parseAttributeValue(context)</a></li>\n<li><a href=\"#pushnodenodes-node\">pushNode(nodes, node)</a></li>\n<li><a href=\"#isendcontext-mode-ancestors\">isEnd(context, mode, ancestors)</a></li>\n<li><a href=\"#getcursorcontext\">getCursor(context)</a></li>\n<li><a href=\"#getselectioncontext-start-end-postion\">getSelection(context, start, end?: Postion)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#astts\">ast.ts</a></p>\n<ul>\n<li><a href=\"#createrootchildren-loc--locstub\">createRoot(children, loc = locStub)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#utilsts\">utils.ts</a></p>\n<ul>\n<li><a href=\"#advancepositionwithmutationpossource-numberofcharacters\">advancePositionWithMutation(pos,source, numberOfCharacters)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E\">变量声明</a></p>\n<ul>\n<li><a href=\"#%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B\">枚举类型</a></li>\n<li><a href=\"#parser\">parser</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E\">类型声明</a></p>\n<ul>\n<li><a href=\"#astts-1\">ast.ts</a></li>\n<li><a href=\"#parseroptions\">ParserOptions</a></li>\n<li><a href=\"#parsercontext\">ParserContext</a></li>\n</ul>\n</li>\n<li><a href=\"#%E9%98%B6%E6%AE%B5%E4%BB%A3%E7%A0%81%E8%AE%B0%E5%BD%95\">阶段代码记录</a></li>\n<li><a href=\"#%E9%97%AE%E9%A2%98%E7%96%91%E9%97%AE%E5%88%97%E8%A1%A8\">问题/疑问列表</a></li>\n<li>\n<p><a href=\"#%E6%B5%81%E7%A8%8B%E5%9B%BE\">流程图</a></p>\n<ul>\n<li><a href=\"#%E5%B8%A6%E6%8C%87%E4%BB%A4%E7%9A%84%E6%A8%A1%E6%9D%BF%E6%A0%87%E7%AD%BE%E8%A7%A3%E6%9E%90\">带指令的模板/标签解析</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Vue3.0 源码系列 02 -- Compiler-core【DOING】","date":"June 18, 2020","description":"vue3.0 source code of compiler-core module."}}},"pageContext":{"slug":"/vue3/compiler-core/","previous":{"fields":{"slug":"/algo/leetcode-easy/"},"frontmatter":{"title":"Algorithm on leetcode easy level【DOING】"}},"next":null}}}