{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020-06-16-algo-leetcode/","result":{"data":{"site":{"siteMetadata":{"title":"若叶知秋"}},"markdownRemark":{"id":"e50b7273-0267-5dec-92a0-8922f876f812","excerpt":"基于leetcode的算法学习记录文章，使用语言主要是 JavaScript，可能会有少于C/Python实现。 字符串操作 删除字符串中重复的字符 https://leetcode.com/articles/remove-all-adjacent-duplicates-in-string…","html":"<blockquote>\n<p>基于leetcode的算法学习记录文章，使用语言主要是 JavaScript，可能会有少于C/Python实现。</p>\n</blockquote>\n<h1>字符串操作</h1>\n<h2>删除字符串中重复的字符</h2>\n<p><a href=\"https://leetcode.com/articles/remove-all-adjacent-duplicates-in-string/\">https://leetcode.com/articles/remove-all-adjacent-duplicates-in-string/</a></p>\n<p>题解：删除靠着的重复字符，然后对删除后的字符执行同样的操作，直到没有紧靠着的重复字符为止。</p>\n<p>  比如： abbaca => del, bb => aaca => del, aa => ca</p>\n<p>  最终 =abbaca= 经过处理得到 =ca= 。</p>\n<h3><em>while</em> 循环版本</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">del</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">str</span> <span class=\"token operator\">=></span> str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/([a-z])\\1{1,}/gi</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">rmDupsWithWhile</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">current</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">let</span> last <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>last <span class=\"token operator\">!==</span> current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\nlast <span class=\"token operator\">=</span> current\ncurrent <span class=\"token operator\">=</span> <span class=\"token function\">del</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">return</span> current\n<span class=\"token punctuation\">}</span>\n\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Time'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'result:'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">rmDupsWithWhile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abbaca'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Time'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>执行结果：</p>\n<blockquote>\n<p>: result: ca\n: Time: 3.740ms\n: undefined</p>\n</blockquote>\n<p>原理含简单，就是不断的使用正则去重复替换掉重复的连续字符，直到最后 ~last === current~ 为止，</p>\n<p>因为一旦没有重复连续字符了， =replace= 的结果都最终一样。</p>\n<h3>正则递归版本(尾调用未优化)</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'abbaca'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">del</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">s</span> <span class=\"token operator\">=></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/([a-z])\\1{1,}/gi</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">rmDupsWithRecursionNoOptimized</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">current<span class=\"token punctuation\">,</span> last</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>last <span class=\"token operator\">==</span> current<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> current\n\n  last <span class=\"token operator\">=</span> current\n  current <span class=\"token operator\">=</span> <span class=\"token function\">del</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token function\">rmDupsWithRecursionNoOptimized</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">,</span> last<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 不满足尾调用优化：未立即返回执行结果，非最后一个语句</span>\n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Time'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token function\">rmDupsWithRecursionNoOptimized</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Time'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></code></pre></div>\n<p>结果：</p>\n<blockquote>\n<p>: Time: 0.446ms\n: ca\n: undefined</p>\n</blockquote>\n<h3>正则递归版本(尾调用优化)</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'abbaca'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">del</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">s</span> <span class=\"token operator\">=></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/([a-z])\\1{1,}/gi</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">rmDupsWithRecursionOptimized</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">current<span class=\"token punctuation\">,</span> last</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>last <span class=\"token operator\">==</span> current<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> current\n\n  last <span class=\"token operator\">=</span> current\n  current <span class=\"token operator\">=</span> <span class=\"token function\">del</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 尾调用优化条件： 1. 立即返回结果，2. 无变量引用，3. 最后一行</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">rmDupsWithRecursionOptimized</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">,</span> last<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Time'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token function\">rmDupsWithRecursionOptimized</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Time'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></code></pre></div>\n<p>结果：</p>\n<blockquote>\n<p>: Time: 0.463ms\n: ca\n: undefined</p>\n</blockquote>","frontmatter":{"title":"Algorithm on leetcode 1(算法学习 leetcode)","date":"June 16, 2020","description":null}}},"pageContext":{"slug":"/2020-06-16-algo-leetcode/","previous":{"fields":{"slug":"/2020-06-16-vue-3.0-reactivity/"},"frontmatter":{"title":"Vue3.0 源码之 Reactivity"}},"next":{"fields":{"slug":"/2020-06-18-vue-3.0-compiler-core/"},"frontmatter":{"title":"Vue3.0 源码之 Compiler-core"}}}}}